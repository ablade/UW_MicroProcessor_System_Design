

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Nov 28 21:56:18 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000600                     __psmallconst:
    53                           	opt stack 0
    54  000600                     _dpowers:
    55                           	opt stack 0
    56  000600  0001               	dw	1
    57  000602  0000               	dw	0
    58  000604  000A               	dw	10
    59  000606  0000               	dw	0
    60  000608  0064               	dw	100
    61  00060A  0000               	dw	0
    62  00060C  03E8               	dw	1000
    63  00060E  0000               	dw	0
    64  000610  2710               	dw	10000
    65  000612  0000               	dw	0
    66  000614  86A0               	dw	34464
    67  000616  0001               	dw	1
    68  000618  4240               	dw	16960
    69  00061A  000F               	dw	15
    70  00061C  9680               	dw	38528
    71  00061E  0098               	dw	152
    72  000620  E100               	dw	57600
    73  000622  05F5               	dw	1525
    74  000624  CA00               	dw	51712
    75  000626  3B9A               	dw	15258
    76  000628                     __end_of_dpowers:
    77                           	opt stack 0
    78  000628                     __npowers_:
    79                           	opt stack 0
    80  000628  00                 	db	0
    81  000629  80                 	db	128
    82  00062A  3F                 	db	63
    83  00062B  CD                 	db	205
    84  00062C  CC                 	db	204
    85  00062D  3D                 	db	61
    86  00062E  D7                 	db	215
    87  00062F  23                 	db	35
    88  000630  3C                 	db	60
    89  000631  12                 	db	18
    90  000632  83                 	db	131
    91  000633  3A                 	db	58
    92  000634  B7                 	db	183
    93  000635  D1                 	db	209
    94  000636  38                 	db	56
    95  000637  C6                 	db	198
    96  000638  27                 	db	39
    97  000639  37                 	db	55
    98  00063A  38                 	db	56
    99  00063B  86                 	db	134
   100  00063C  35                 	db	53
   101  00063D  C0                 	db	192
   102  00063E  D6                 	db	214
   103  00063F  33                 	db	51
   104  000640  CC                 	db	204
   105  000641  2B                 	db	43
   106  000642  32                 	db	50
   107  000643  70                 	db	112
   108  000644  89                 	db	137
   109  000645  30                 	db	48
   110  000646  E7                 	db	231
   111  000647  DB                 	db	219
   112  000648  2E                 	db	46
   113  000649  E5                 	db	229
   114  00064A  3C                 	db	60
   115  00064B  1E                 	db	30
   116  00064C  42                 	db	66
   117  00064D  A2                 	db	162
   118  00064E  0D                 	db	13
   119  00064F                     __end_of__npowers_:
   120                           	opt stack 0
   121  00064F                     __powers_:
   122                           	opt stack 0
   123  00064F  00                 	db	0
   124  000650  80                 	db	128
   125  000651  3F                 	db	63
   126  000652  00                 	db	0
   127  000653  20                 	db	32
   128  000654  41                 	db	65
   129  000655  00                 	db	0
   130  000656  C8                 	db	200
   131  000657  42                 	db	66
   132  000658  00                 	db	0
   133  000659  7A                 	db	122
   134  00065A  44                 	db	68
   135  00065B  40                 	db	64
   136  00065C  1C                 	db	28
   137  00065D  46                 	db	70
   138  00065E  50                 	db	80
   139  00065F  C3                 	db	195
   140  000660  47                 	db	71
   141  000661  24                 	db	36
   142  000662  74                 	db	116
   143  000663  49                 	db	73
   144  000664  97                 	db	151
   145  000665  18                 	db	24
   146  000666  4B                 	db	75
   147  000667  BC                 	db	188
   148  000668  BE                 	db	190
   149  000669  4C                 	db	76
   150  00066A  6B                 	db	107
   151  00066B  6E                 	db	110
   152  00066C  4E                 	db	78
   153  00066D  03                 	db	3
   154  00066E  15                 	db	21
   155  00066F  50                 	db	80
   156  000670  79                 	db	121
   157  000671  AD                 	db	173
   158  000672  60                 	db	96
   159  000673  F3                 	db	243
   160  000674  49                 	db	73
   161  000675  71                 	db	113
   162  000676                     __end_of__powers_:
   163                           	opt stack 0
   164  0000                     _ADCON0bits	set	4034
   165  0000                     _ADCON1	set	4033
   166  0000                     _ADCON2bits	set	4032
   167  0000                     _ADRESH	set	4036
   168  0000                     _ADRESL	set	4035
   169  0000                     _INTCONbits	set	4082
   170  0000                     _PIE1bits	set	3997
   171  0000                     _PIR1bits	set	3998
   172  0000                     _PORTD	set	3971
   173  0000                     _PORTDbits	set	3971
   174  0000                     _TRISD	set	3989
   175  0000                     _ADIF	set	31990
   176  000676                     __stringdata:
   177                           	opt stack 0
   178  000676                     STR_1:
   179  000676  52                 	db	82	;'R'
   180  000677  41                 	db	65	;'A'
   181  000678  30                 	db	48	;'0'
   182  000679  20                 	db	32
   183  00067A  56                 	db	86	;'V'
   184  00067B  6F                 	db	111	;'o'
   185  00067C  6C                 	db	108	;'l'
   186  00067D  74                 	db	116	;'t'
   187  00067E  61                 	db	97	;'a'
   188  00067F  67                 	db	103	;'g'
   189  000680  65                 	db	101	;'e'
   190  000681  20                 	db	32
   191  000682  3A                 	db	58	;':'
   192  000683  20                 	db	32
   193  000684  00                 	db	0
   194  000685  00                 	db	0
   195  000686                     STR_2:
   196  000686  25                 	db	37
   197  000687  2E                 	db	46
   198  000688  33                 	db	51	;'3'
   199  000689  67                 	db	103	;'g'
   200  00068A  00                 	db	0
   201  00068B  00                 	db	0
   202  00068C                     __end_of__stringdata:
   203                           	opt stack 0
   204                           
   205                           ; #config settings
   206  00068C  00                 	db	0	; dummy byte at the end
   207  0000                     
   208                           	psect	nvCOMRAM
   209  000070                     __pnvCOMRAM:
   210                           	opt stack 0
   211  000070                     delayms@j:
   212                           	opt stack 0
   213  000070                     	ds	1
   214                           
   215                           	psect	cinit
   216  002F46                     __pcinit:
   217                           	opt stack 0
   218  002F46                     start_initialization:
   219                           	opt stack 0
   220  002F46                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Clear objects allocated to BANK0 (2 bytes)
   224  002F46  0100               	movlb	0
   225  002F48  6BD8               	clrf	(__pbssBANK0+1)& (0+255),b
   226  002F4A  6BD7               	clrf	__pbssBANK0& (0+255),b
   227                           
   228                           ; Clear objects allocated to COMRAM (2 bytes)
   229  002F4C  6A6F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   230  002F4E  6A6E               	clrf	__pbssCOMRAM& (0+255),c
   231  002F50                     end_of_initialization:
   232                           	opt stack 0
   233  002F50                     __end_of__initialization:
   234                           	opt stack 0
   235  002F50  0E00               	movlw	low (__Lmediumconst shr (0+16))
   236  002F52  6EF8               	movwf	tblptru,c
   237  002F54  0100               	movlb	0
   238  002F56  EFDB  F00F         	goto	_main	;jump to C main() function
   239                           tblptru	equ	0xFF8
   240                           
   241                           	psect	bssCOMRAM
   242  00006E                     __pbssCOMRAM:
   243                           	opt stack 0
   244  00006E                     delayms@i:
   245                           	opt stack 0
   246  00006E                     	ds	1
   247  00006F                     delayus@i:
   248                           	opt stack 0
   249  00006F                     	ds	1
   250                           tblptru	equ	0xFF8
   251                           
   252                           	psect	bssBANK0
   253  0000D7                     __pbssBANK0:
   254                           	opt stack 0
   255  0000D7                     _flag:
   256                           	opt stack 0
   257  0000D7                     	ds	2
   258                           tblptru	equ	0xFF8
   259                           
   260                           	psect	cstackBANK0
   261  000080                     __pcstackBANK0:
   262                           	opt stack 0
   263  000080                     ?___ftge:
   264                           	opt stack 0
   265  000080                     ?___ftsub:
   266                           	opt stack 0
   267  000080                     ?___asftadd:
   268                           	opt stack 0
   269  000080                     ?___asftmul:
   270                           	opt stack 0
   271  000080                     ___asftadd@f1p:
   272                           	opt stack 0
   273  000080                     ___asftmul@f1p:
   274                           	opt stack 0
   275  000080                     ___ftge@ff1:
   276                           	opt stack 0
   277  000080                     ___ftsub@f1:
   278                           	opt stack 0
   279                           
   280                           ; 3 bytes @ 0x0
   281  000080                     	ds	2
   282  000082                     ___asftadd@f2:
   283                           	opt stack 0
   284  000082                     ___asftmul@f2:
   285                           	opt stack 0
   286                           
   287                           ; 3 bytes @ 0x2
   288  000082                     	ds	1
   289  000083                     ___ftge@ff2:
   290                           	opt stack 0
   291  000083                     ___ftsub@f2:
   292                           	opt stack 0
   293                           
   294                           ; 3 bytes @ 0x3
   295  000083                     	ds	3
   296  000086                     ?___asftsub:
   297                           	opt stack 0
   298  000086                     ___asftsub@f1p:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x6
   302  000086                     	ds	2
   303  000088                     ___asftsub@f2:
   304                           	opt stack 0
   305                           
   306                           ; 3 bytes @ 0x8
   307  000088                     	ds	3
   308  00008B                     ?_sprintf:
   309                           	opt stack 0
   310  00008B                     sprintf@sp:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0xB
   314  00008B                     	ds	2
   315  00008D                     sprintf@f:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0xD
   319  00008D                     	ds	5
   320  000092                     ??_sprintf:
   321                           
   322                           ; 0 bytes @ 0x12
   323  000092                     	ds	6
   324  000098                     _sprintf$1138:
   325                           	opt stack 0
   326                           
   327                           ; 3 bytes @ 0x18
   328  000098                     	ds	3
   329  00009B                     _sprintf$526:
   330                           	opt stack 0
   331                           
   332                           ; 4 bytes @ 0x1B
   333  00009B                     	ds	4
   334  00009F                     sprintf@ap:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x1F
   338  00009F                     	ds	2
   339  0000A1                     sprintf@vd:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x21
   343  0000A1                     	ds	2
   344  0000A3                     sprintf@vd_528:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x23
   348  0000A3                     	ds	2
   349  0000A5                     sprintf@temp:
   350                           	opt stack 0
   351                           
   352                           ; 3 bytes @ 0x25
   353  0000A5                     	ds	3
   354  0000A8                     sprintf@integ:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0x28
   358  0000A8                     	ds	3
   359  0000AB                     sprintf@flag:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x2B
   363  0000AB                     	ds	2
   364  0000AD                     sprintf@_val:
   365                           	opt stack 0
   366                           
   367                           ; 5 bytes @ 0x2D
   368  0000AD                     	ds	5
   369  0000B2                     sprintf@exp:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x32
   373  0000B2                     	ds	2
   374  0000B4                     sprintf@prec:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x34
   378  0000B4                     	ds	2
   379  0000B6                     sprintf@fval:
   380                           	opt stack 0
   381                           
   382                           ; 3 bytes @ 0x36
   383  0000B6                     	ds	3
   384  0000B9                     sprintf@c:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x39
   388  0000B9                     	ds	1
   389  0000BA                     ??_main:
   390                           
   391                           ; 0 bytes @ 0x3A
   392  0000BA                     	ds	4
   393  0000BE                     main@buffer:
   394                           	opt stack 0
   395                           
   396                           ; 20 bytes @ 0x3E
   397  0000BE                     	ds	20
   398  0000D2                     main@voltage:
   399                           	opt stack 0
   400                           
   401                           ; 3 bytes @ 0x52
   402  0000D2                     	ds	3
   403  0000D5                     main@adc_result:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x55
   407  0000D5                     	ds	2
   408                           tblptru	equ	0xFF8
   409                           
   410                           	psect	cstackCOMRAM
   411  000001                     __pcstackCOMRAM:
   412                           	opt stack 0
   413  000001                     ??_RA0_isr:
   414  000001                     
   415                           ; 0 bytes @ 0x0
   416  000001                     	ds	14
   417  00000F                     ?_delayms:
   418                           	opt stack 0
   419  00000F                     ?_delayus:
   420                           	opt stack 0
   421  00000F                     ?_isdigit:
   422                           	opt stack 0
   423  00000F                     ?___awmod:
   424                           	opt stack 0
   425  00000F                     ?___lwmod:
   426                           	opt stack 0
   427  00000F                     ?___ftpack:
   428                           	opt stack 0
   429  00000F                     ?__tdiv_to_l_:
   430                           	opt stack 0
   431  00000F                     ?__div_to_l_:
   432                           	opt stack 0
   433  00000F                     ?___lldiv:
   434                           	opt stack 0
   435  00000F                     ?___llmod:
   436                           	opt stack 0
   437  00000F                     delayms@cnt:
   438                           	opt stack 0
   439  00000F                     delayus@cnt:
   440                           	opt stack 0
   441  00000F                     isdigit@c:
   442                           	opt stack 0
   443  00000F                     ___awmod@dividend:
   444                           	opt stack 0
   445  00000F                     ___lwmod@dividend:
   446                           	opt stack 0
   447  00000F                     __div_to_l_@f1:
   448                           	opt stack 0
   449  00000F                     ___ftpack@arg:
   450                           	opt stack 0
   451  00000F                     __tdiv_to_l_@f1:
   452                           	opt stack 0
   453  00000F                     ___lldiv@dividend:
   454                           	opt stack 0
   455  00000F                     ___llmod@dividend:
   456                           	opt stack 0
   457                           
   458                           ; 4 bytes @ 0xE
   459  00000F                     	ds	1
   460  000010                     ??_delayms:
   461  000010                     ??_delayus:
   462  000010                     ??_isdigit:
   463                           
   464                           ; 0 bytes @ 0xF
   465  000010                     	ds	1
   466  000011                     ??_epulse:
   467  000011                     _isdigit$801:
   468                           	opt stack 0
   469  000011                     ___awmod@divisor:
   470                           	opt stack 0
   471  000011                     ___lwmod@divisor:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x10
   475  000011                     	ds	1
   476  000012                     ?_send_data:
   477                           	opt stack 0
   478  000012                     send_data@data:
   479                           	opt stack 0
   480  000012                     ___ftpack@exp:
   481                           	opt stack 0
   482  000012                     __div_to_l_@f2:
   483                           	opt stack 0
   484  000012                     __tdiv_to_l_@f2:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x11
   488  000012                     	ds	1
   489  000013                     ??___awmod:
   490  000013                     ??___lwmod:
   491  000013                     send_data@cflag:
   492                           	opt stack 0
   493  000013                     ___ftpack@sign:
   494                           	opt stack 0
   495  000013                     ___lldiv@divisor:
   496                           	opt stack 0
   497  000013                     ___llmod@divisor:
   498                           	opt stack 0
   499                           
   500                           ; 4 bytes @ 0x12
   501  000013                     	ds	1
   502  000014                     ??___ftpack:
   503  000014                     send_data@chk_busy:
   504                           	opt stack 0
   505  000014                     ___awmod@counter:
   506                           	opt stack 0
   507  000014                     ___lwmod@counter:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x13
   511  000014                     	ds	1
   512  000015                     ??__tdiv_to_l_:
   513  000015                     ??__div_to_l_:
   514  000015                     send_data@dflag:
   515                           	opt stack 0
   516  000015                     ___awmod@sign:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x14
   520  000015                     	ds	1
   521  000016                     ??_send_data:
   522  000016                     ?___awdiv:
   523                           	opt stack 0
   524  000016                     ___awdiv@dividend:
   525                           	opt stack 0
   526  000016                     __div_to_l_@quot:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x15
   530  000016                     	ds	1
   531  000017                     ??___lldiv:
   532  000017                     ??___llmod:
   533  000017                     ?___lwtoft:
   534                           	opt stack 0
   535  000017                     send_data@bflag:
   536                           	opt stack 0
   537  000017                     ___lwtoft@c:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x16
   541  000017                     	ds	1
   542  000018                     send_data@c:
   543                           	opt stack 0
   544  000018                     ___llmod@counter:
   545                           	opt stack 0
   546  000018                     ___awdiv@divisor:
   547                           	opt stack 0
   548  000018                     ___lldiv@quotient:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x17
   552  000018                     	ds	1
   553  000019                     send_data@d:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x18
   557  000019                     	ds	1
   558  00001A                     ??_init_LCD:
   559  00001A                     ?_load_string:
   560                           	opt stack 0
   561  00001A                     ??___awdiv:
   562  00001A                     ??___lwtoft:
   563  00001A                     __div_to_l_@cntr:
   564                           	opt stack 0
   565  00001A                     load_string@ptr:
   566                           	opt stack 0
   567  00001A                     __tdiv_to_l_@quot:
   568                           	opt stack 0
   569                           
   570                           ; 4 bytes @ 0x19
   571  00001A                     	ds	1
   572  00001B                     ___awdiv@counter:
   573                           	opt stack 0
   574  00001B                     __div_to_l_@exp1:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x1A
   578  00001B                     	ds	1
   579  00001C                     ??_load_string:
   580  00001C                     ___awdiv@sign:
   581                           	opt stack 0
   582  00001C                     ___lldiv@counter:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x1B
   586  00001C                     	ds	1
   587  00001D                     ___awdiv@quotient:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x1C
   591  00001D                     	ds	1
   592  00001E                     __tdiv_to_l_@cntr:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x1D
   596  00001E                     	ds	1
   597  00001F                     ?___wmul:
   598                           	opt stack 0
   599  00001F                     __tdiv_to_l_@exp1:
   600                           	opt stack 0
   601  00001F                     ___wmul@multiplier:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x1E
   605  00001F                     	ds	2
   606  000021                     ___wmul@multiplicand:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x20
   610  000021                     	ds	2
   611  000023                     ___wmul@product:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x22
   615  000023                     	ds	2
   616  000025                     ?___ftmul:
   617                           	opt stack 0
   618  000025                     ___ftmul@f1:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x24
   622  000025                     	ds	3
   623  000028                     ___ftmul@f2:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x27
   627  000028                     	ds	3
   628  00002B                     ??___ftmul:
   629                           
   630                           ; 0 bytes @ 0x2A
   631  00002B                     	ds	5
   632  000030                     ___ftmul@exp:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x2F
   636  000030                     	ds	1
   637  000031                     ___ftmul@f3_as_product:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x30
   641  000031                     	ds	3
   642  000034                     ___ftmul@cntr:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x33
   646  000034                     	ds	1
   647  000035                     ___ftmul@sign:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x34
   651  000035                     	ds	1
   652  000036                     ?___ftdiv:
   653                           	opt stack 0
   654  000036                     ?_fround:
   655                           	opt stack 0
   656  000036                     ?_scale:
   657                           	opt stack 0
   658  000036                     fround@prec:
   659                           	opt stack 0
   660  000036                     scale@scl:
   661                           	opt stack 0
   662  000036                     ___ftdiv@f1:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x35
   666  000036                     	ds	3
   667  000039                     ??_fround:
   668  000039                     ??_scale:
   669  000039                     ___ftdiv@f2:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x38
   673  000039                     	ds	3
   674  00003C                     ??___ftdiv:
   675                           
   676                           ; 0 bytes @ 0x3B
   677  00003C                     	ds	3
   678  00003F                     _fround$1136:
   679                           	opt stack 0
   680  00003F                     _scale$1137:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x3E
   684  00003F                     	ds	2
   685  000041                     ___ftdiv@cntr:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x40
   689  000041                     	ds	1
   690  000042                     ?___fttol:
   691                           	opt stack 0
   692  000042                     ___ftdiv@f3:
   693                           	opt stack 0
   694  000042                     ___fttol@f1:
   695                           	opt stack 0
   696  000042                     _fround$1135:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x41
   700  000042                     	ds	3
   701  000045                     ___ftdiv@exp:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x44
   705  000045                     	ds	1
   706  000046                     ??___fttol:
   707  000046                     ___ftdiv@sign:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x45
   711  000046                     	ds	1
   712  000047                     ?___asftdiv:
   713                           	opt stack 0
   714  000047                     ___asftdiv@f1p:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x46
   718  000047                     	ds	2
   719  000049                     ___asftdiv@f2:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x48
   723  000049                     	ds	2
   724  00004B                     ___fttol@sign1:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x4A
   728  00004B                     	ds	1
   729  00004C                     ___fttol@lval:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x4B
   733  00004C                     	ds	4
   734  000050                     ___fttol@exp1:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x4F
   738  000050                     	ds	1
   739  000051                     ?___lltoft:
   740                           	opt stack 0
   741  000051                     ___lltoft@c:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x50
   745  000051                     	ds	4
   746  000055                     ??___lltoft:
   747                           
   748                           ; 0 bytes @ 0x54
   749  000055                     	ds	4
   750  000059                     ___lltoft@exp:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x58
   754  000059                     	ds	1
   755  00005A                     ?___ftneg:
   756                           	opt stack 0
   757  00005A                     ___ftneg@f1:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0x59
   761  00005A                     	ds	3
   762  00005D                     ?___ftadd:
   763                           	opt stack 0
   764  00005D                     ___ftadd@f1:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0x5C
   768  00005D                     	ds	3
   769  000060                     ___ftadd@f2:
   770                           	opt stack 0
   771                           
   772                           ; 3 bytes @ 0x5F
   773  000060                     	ds	3
   774  000063                     ??___ftadd:
   775                           
   776                           ; 0 bytes @ 0x62
   777  000063                     	ds	5
   778  000068                     ___ftadd@sign:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x67
   782  000068                     	ds	1
   783  000069                     ___ftadd@exp2:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x68
   787  000069                     	ds	1
   788  00006A                     ___ftadd@exp1:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x69
   792  00006A                     	ds	1
   793  00006B                     ??___ftge:
   794                           
   795                           ; 0 bytes @ 0x6A
   796  00006B                     	ds	3
   797                           tblptru	equ	0xFF8
   798                           
   799 ;;
   800 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   801 ;;
   802 ;; *************** function _main *****************
   803 ;; Defined at:
   804 ;;		line 36 in file "HW8.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  buffer         20   62[BANK0 ] unsigned char [20]
   809 ;;  voltage         3   82[BANK0 ] float 
   810 ;;  adc_result      2   85[BANK0 ] unsigned int 
   811 ;; Return value:  Size  Location     Type
   812 ;;		None               void
   813 ;; Registers used:
   814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   820 ;;      Params:         0       0       0       0       0       0       0
   821 ;;      Locals:         0      25       0       0       0       0       0
   822 ;;      Temps:          0       4       0       0       0       0       0
   823 ;;      Totals:         0      29       0       0       0       0       0
   824 ;;Total ram usage:       29 bytes
   825 ;; Hardware stack levels required when called:    6
   826 ;; This function calls:
   827 ;;		_init_ADCM
   828 ;;		_init_LCD
   829 ;;		_load_string
   830 ;;		_send_data
   831 ;;		_sprintf
   832 ;;		_delayms
   833 ;;		___ftdiv
   834 ;;		___ftmul
   835 ;;		___lwtoft
   836 ;; This function is called by:
   837 ;;		Startup code after reset
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text0
   842  001FB6                     __ptext0:
   843                           	opt stack 0
   844  001FB6                     _main:
   845                           	opt stack 25
   846                           
   847                           ;HW8.c: 38: unsigned int adc_result = 0;
   848                           
   849                           ;incstack = 0
   850                           ;incstack = 0
   851  001FB6  0E00               	movlw	0
   852  001FB8  0100               	movlb	0	; () banked
   853  001FBA  0100               	movlb	0	; () banked
   854  001FBC  6FD6               	movwf	(main@adc_result+1)& (0+255),b
   855  001FBE  0E00               	movlw	0
   856  001FC0  0100               	movlb	0	; () banked
   857  001FC2  6FD5               	movwf	main@adc_result& (0+255),b
   858                           
   859                           ; BSR set to: 0
   860                           ;HW8.c: 39: float voltage;
   861                           ;HW8.c: 40: unsigned char buffer[20];
   862                           ;HW8.c: 41: init_ADCM();
   863  001FC4  EC89  F017         	call	_init_ADCM	;wreg free
   864                           
   865                           ;HW8.c: 43: init_LCD();
   866  001FC8  EC9C  F012         	call	_init_LCD	;wreg free
   867                           
   868                           ;HW8.c: 45: INTCONbits.GIE = 1;
   869  001FCC  8EF2               	bsf	intcon,7,c	;volatile
   870                           
   871                           ;HW8.c: 46: INTCONbits.PEIE = 1;
   872  001FCE  8CF2               	bsf	intcon,6,c	;volatile
   873                           
   874                           ;HW8.c: 47: PIE1bits.ADIE = 1;
   875  001FD0  8C9D               	bsf	3997,6,c	;volatile
   876                           
   877                           ;HW8.c: 48: PIR1bits.ADIF = 0;
   878  001FD2  9C9E               	bcf	3998,6,c	;volatile
   879  001FD4                     l4937:
   880                           
   881                           ;HW8.c: 52: {
   882                           ;HW8.c: 53: ADCON0bits.GO_NOT_DONE = 1;
   883  001FD4  82C2               	bsf	4034,1,c	;volatile
   884                           
   885                           ;HW8.c: 54: if(flag)
   886  001FD6  0100               	movlb	0	; () banked
   887  001FD8  0100               	movlb	0	; () banked
   888  001FDA  51D8               	movf	(_flag+1)& (0+255),w,b	;volatile
   889  001FDC  11D7               	iorwf	_flag& (0+255),w,b	;volatile
   890  001FDE  B4D8               	btfsc	status,2,c
   891  001FE0  D7F9               	goto	l4937
   892                           
   893                           ; BSR set to: 0
   894                           ;HW8.c: 55: { flag = 0;
   895  001FE2  0E00               	movlw	0
   896  001FE4  0100               	movlb	0	; () banked
   897  001FE6  0100               	movlb	0	; () banked
   898  001FE8  6FD8               	movwf	(_flag+1)& (0+255),b	;volatile
   899  001FEA  0E00               	movlw	0
   900  001FEC  0100               	movlb	0	; () banked
   901  001FEE  6FD7               	movwf	_flag& (0+255),b	;volatile
   902                           
   903                           ;HW8.c: 57: adc_result = (((unsigned int)ADRESH)<<8)|(ADRESL);
   904  001FF0  50C4               	movf	4036,w,c	;volatile
   905  001FF2  0100               	movlb	0	; () banked
   906  001FF4  0100               	movlb	0	; () banked
   907  001FF6  6FD6               	movwf	(main@adc_result+1)& (0+255),b
   908  001FF8  50C3               	movf	4035,w,c	;volatile
   909  001FFA  0100               	movlb	0	; () banked
   910  001FFC  6FD5               	movwf	main@adc_result& (0+255),b
   911                           
   912                           ; BSR set to: 0
   913                           ;HW8.c: 58: voltage = (adc_result*5.0)/1024;
   914  001FFE  0E00               	movlw	0
   915  002000  6E28               	movwf	?___ftmul+3,c
   916  002002  0EA0               	movlw	160
   917  002004  6E29               	movwf	?___ftmul+4,c
   918  002006  0E40               	movlw	64
   919  002008  6E2A               	movwf	?___ftmul+5,c
   920  00200A  C0D5  F017         	movff	main@adc_result,?___lwtoft
   921  00200E  C0D6  F018         	movff	main@adc_result+1,?___lwtoft+1
   922  002012  EC27  F017         	call	___lwtoft	;wreg free
   923  002016  C019  F027         	movff	?___lwtoft+2,?___ftmul+2
   924  00201A  C018  F026         	movff	?___lwtoft+1,?___ftmul+1
   925  00201E  C017  F025         	movff	?___lwtoft,?___ftmul
   926  002022  EC1B  F011         	call	___ftmul	;wreg free
   927  002026  C027  F038         	movff	?___ftmul+2,?___ftdiv+2
   928  00202A  C026  F037         	movff	?___ftmul+1,?___ftdiv+1
   929  00202E  C025  F036         	movff	?___ftmul,?___ftdiv
   930  002032  0E00               	movlw	0
   931  002034  6E39               	movwf	?___ftdiv+3,c
   932  002036  0E80               	movlw	128
   933  002038  6E3A               	movwf	?___ftdiv+4,c
   934  00203A  0E44               	movlw	68
   935  00203C  6E3B               	movwf	?___ftdiv+5,c
   936  00203E  ECA3  F011         	call	___ftdiv	;wreg free
   937  002042  C038  F0D4         	movff	?___ftdiv+2,main@voltage+2
   938  002046  C037  F0D3         	movff	?___ftdiv+1,main@voltage+1
   939  00204A  C036  F0D2         	movff	?___ftdiv,main@voltage
   940                           
   941                           ;HW8.c: 59: load_string("RA0 Voltage : \0");
   942  00204E  0E06               	movlw	high STR_1
   943  002050  6E1B               	movwf	?_load_string+1,c
   944  002052  0E76               	movlw	low STR_1
   945  002054  6E1A               	movwf	?_load_string,c
   946  002056  EC19  F016         	call	_load_string	;wreg free
   947                           
   948                           ;HW8.c: 60: send_data(0xc0,1,0,1);
   949  00205A  0100               	movlb	0	; () banked
   950  00205C  6FBA               	movwf	??_main& (0+255),b
   951  00205E  0EC0               	movlw	192
   952  002060  6E12               	movwf	?_send_data,c
   953  002062  0100               	movlb	0	; () banked
   954  002064  51BA               	movf	??_main& (0+255),w,b
   955  002066  0100               	movlb	0	; () banked
   956  002068  6FBB               	movwf	(??_main+1)& (0+255),b
   957  00206A  0E01               	movlw	1
   958  00206C  6E13               	movwf	?_send_data+1,c
   959  00206E  0100               	movlb	0	; () banked
   960  002070  51BB               	movf	(??_main+1)& (0+255),w,b
   961  002072  0100               	movlb	0	; () banked
   962  002074  6FBC               	movwf	(??_main+2)& (0+255),b
   963  002076  0E00               	movlw	0
   964  002078  6E14               	movwf	?_send_data+2,c
   965  00207A  0100               	movlb	0	; () banked
   966  00207C  51BC               	movf	(??_main+2)& (0+255),w,b
   967  00207E  0100               	movlb	0	; () banked
   968  002080  6FBD               	movwf	(??_main+3)& (0+255),b
   969  002082  0E01               	movlw	1
   970  002084  6E15               	movwf	?_send_data+3,c
   971  002086  0100               	movlb	0	; () banked
   972  002088  51BD               	movf	(??_main+3)& (0+255),w,b
   973  00208A  EC52  F014         	call	_send_data	;wreg free
   974                           
   975                           ;HW8.c: 61: sprintf(buffer, "%.3g\0", voltage );
   976  00208E  0100               	movlb	0	; () banked
   977  002090  0E00               	movlw	high main@buffer
   978  002092  0100               	movlb	0	; () banked
   979  002094  0100               	movlb	0	; () banked
   980  002096  6F8C               	movwf	(?_sprintf+1)& (0+255),b
   981  002098  0100               	movlb	0	; () banked
   982  00209A  0EBE               	movlw	low main@buffer
   983  00209C  0100               	movlb	0	; () banked
   984  00209E  6F8B               	movwf	?_sprintf& (0+255),b
   985  0020A0  0E06               	movlw	high STR_2
   986  0020A2  0100               	movlb	0	; () banked
   987  0020A4  0100               	movlb	0	; () banked
   988  0020A6  6F8E               	movwf	(?_sprintf+3)& (0+255),b
   989  0020A8  0E86               	movlw	low STR_2
   990  0020AA  0100               	movlb	0	; () banked
   991  0020AC  6F8D               	movwf	(?_sprintf+2)& (0+255),b
   992  0020AE  C0D2  F08F         	movff	main@voltage,?_sprintf+4
   993  0020B2  C0D3  F090         	movff	main@voltage+1,?_sprintf+5
   994  0020B6  C0D4  F091         	movff	main@voltage+2,?_sprintf+6
   995  0020BA  EC47  F003         	call	_sprintf	;wreg free
   996                           
   997                           ;HW8.c: 62: load_string(buffer);
   998  0020BE  0100               	movlb	0	; () banked
   999  0020C0  0E00               	movlw	high main@buffer
  1000  0020C2  6E1B               	movwf	?_load_string+1,c
  1001  0020C4  0100               	movlb	0	; () banked
  1002  0020C6  0EBE               	movlw	low main@buffer
  1003  0020C8  6E1A               	movwf	?_load_string,c
  1004  0020CA  EC19  F016         	call	_load_string	;wreg free
  1005                           
  1006                           ;HW8.c: 63: delayms(200);
  1007  0020CE  0100               	movlb	0	; () banked
  1008  0020D0  6FBA               	movwf	??_main& (0+255),b
  1009  0020D2  0EC8               	movlw	200
  1010  0020D4  6E0F               	movwf	?_delayms,c
  1011  0020D6  0100               	movlb	0	; () banked
  1012  0020D8  51BA               	movf	??_main& (0+255),w,b
  1013  0020DA  EC77  F017         	call	_delayms	;wreg free
  1014                           
  1015                           ;HW8.c: 64: send_data(0x01,1,1,1);
  1016  0020DE  0100               	movlb	0	; () banked
  1017  0020E0  6FBA               	movwf	??_main& (0+255),b
  1018  0020E2  0E01               	movlw	1
  1019  0020E4  6E12               	movwf	?_send_data,c
  1020  0020E6  0100               	movlb	0	; () banked
  1021  0020E8  51BA               	movf	??_main& (0+255),w,b
  1022  0020EA  0100               	movlb	0	; () banked
  1023  0020EC  6FBB               	movwf	(??_main+1)& (0+255),b
  1024  0020EE  0E01               	movlw	1
  1025  0020F0  6E13               	movwf	?_send_data+1,c
  1026  0020F2  0100               	movlb	0	; () banked
  1027  0020F4  51BB               	movf	(??_main+1)& (0+255),w,b
  1028  0020F6  0100               	movlb	0	; () banked
  1029  0020F8  6FBC               	movwf	(??_main+2)& (0+255),b
  1030  0020FA  0E01               	movlw	1
  1031  0020FC  6E14               	movwf	?_send_data+2,c
  1032  0020FE  0100               	movlb	0	; () banked
  1033  002100  51BC               	movf	(??_main+2)& (0+255),w,b
  1034  002102  0100               	movlb	0	; () banked
  1035  002104  6FBD               	movwf	(??_main+3)& (0+255),b
  1036  002106  0E01               	movlw	1
  1037  002108  6E15               	movwf	?_send_data+3,c
  1038  00210A  0100               	movlb	0	; () banked
  1039  00210C  51BD               	movf	(??_main+3)& (0+255),w,b
  1040  00210E  EC52  F014         	call	_send_data	;wreg free
  1041  002112  D760               	goto	l4937
  1042  002114                     __end_of_main:
  1043                           	opt stack 0
  1044                           tblptru	equ	0xFF8
  1045                           intcon	equ	0xFF2
  1046                           status	equ	0xFD8
  1047                           
  1048 ;; *************** function ___lwtoft *****************
  1049 ;; Defined at:
  1050 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtoft.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;  c               2   22[COMRAM] unsigned int 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  3   22[COMRAM] float 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, status,0, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1064 ;;      Params:         3       0       0       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0       0       0
  1066 ;;      Temps:          2       0       0       0       0       0       0
  1067 ;;      Totals:         5       0       0       0       0       0       0
  1068 ;;Total ram usage:        5 bytes
  1069 ;; Hardware stack levels used:    1
  1070 ;; Hardware stack levels required when called:    2
  1071 ;; This function calls:
  1072 ;;		___ftpack
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text1
  1079  002E4E                     __ptext1:
  1080                           	opt stack 0
  1081  002E4E                     ___lwtoft:
  1082                           	opt stack 28
  1083                           
  1084                           ;incstack = 0
  1085                           ;incstack = 0
  1086  002E4E  C017  F00F         	movff	___lwtoft@c,?___ftpack
  1087  002E52  C018  F010         	movff	___lwtoft@c+1,?___ftpack+1
  1088  002E56  6A11               	clrf	?___ftpack+2,c
  1089  002E58  6E1A               	movwf	??___lwtoft& (0+255),c
  1090  002E5A  0E8E               	movlw	142
  1091  002E5C  6E12               	movwf	?___ftpack+3,c
  1092  002E5E  501A               	movf	??___lwtoft& (0+255),w,c
  1093  002E60  6E1B               	movwf	(??___lwtoft+1)& (0+255),c
  1094  002E62  0E00               	movlw	0
  1095  002E64  6E13               	movwf	?___ftpack+4,c
  1096  002E66  501B               	movf	(??___lwtoft+1)& (0+255),w,c
  1097  002E68  ECF6  F013         	call	___ftpack	;wreg free
  1098  002E6C  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
  1099  002E70  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
  1100  002E74  C00F  F017         	movff	?___ftpack,?___lwtoft
  1101  002E78  0012               	return	
  1102  002E7A                     __end_of___lwtoft:
  1103                           	opt stack 0
  1104                           tblptru	equ	0xFF8
  1105                           intcon	equ	0xFF2
  1106                           status	equ	0xFD8
  1107                           
  1108 ;; *************** function _sprintf *****************
  1109 ;; Defined at:
  1110 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;  sp              2   11[BANK0 ] PTR unsigned char 
  1113 ;;		 -> main@buffer(20), 
  1114 ;;  f               2   13[BANK0 ] PTR const unsigned char 
  1115 ;;		 -> STR_2(6), 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  vd              2   33[BANK0 ] unsigned int 
  1118 ;;  temp            3   37[BANK0 ] unsigned int 
  1119 ;;  vd              2   35[BANK0 ] unsigned int 
  1120 ;;  _val            5   45[BANK0 ] struct .
  1121 ;;  fval            3   54[BANK0 ] struct .
  1122 ;;  integ           3   40[BANK0 ] struct .
  1123 ;;  ival            3    0        struct .
  1124 ;;  prec            2   52[BANK0 ] int 
  1125 ;;  exp             2   50[BANK0 ] int 
  1126 ;;  flag            2   43[BANK0 ] unsigned short 
  1127 ;;  ap              2   31[BANK0 ] PTR void [1]
  1128 ;;		 -> ?_sprintf(2), 
  1129 ;;  width           2    0        int 
  1130 ;;  c               1   57[BANK0 ] char 
  1131 ;;  d               1    0        unsigned char 
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  2   11[BANK0 ] int 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1141 ;;      Params:         0       7       0       0       0       0       0
  1142 ;;      Locals:         0      34       0       0       0       0       0
  1143 ;;      Temps:          0       6       0       0       0       0       0
  1144 ;;      Totals:         0      47       0       0       0       0       0
  1145 ;;Total ram usage:       47 bytes
  1146 ;; Hardware stack levels used:    1
  1147 ;; Hardware stack levels required when called:    5
  1148 ;; This function calls:
  1149 ;;		_fround
  1150 ;;		_scale
  1151 ;;		_isdigit
  1152 ;;		__tdiv_to_l_
  1153 ;;		__div_to_l_
  1154 ;;		___asftadd
  1155 ;;		___ftadd
  1156 ;;		___asftdiv
  1157 ;;		___asftmul
  1158 ;;		___ftmul
  1159 ;;		___asftsub
  1160 ;;		___awdiv
  1161 ;;		___awmod
  1162 ;;		___ftge
  1163 ;;		___ftneg
  1164 ;;		___fttol
  1165 ;;		___lldiv
  1166 ;;		___llmod
  1167 ;;		___lltoft
  1168 ;;		___lwmod
  1169 ;;		___wmul
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text2
  1176  00068E                     __ptext2:
  1177                           	opt stack 0
  1178  00068E                     _sprintf:
  1179                           	opt stack 25
  1180                           
  1181                           ;doprnt.c: 494: va_list ap;
  1182                           ;doprnt.c: 499: signed char c;
  1183                           ;doprnt.c: 501: int width;
  1184                           ;doprnt.c: 504: int prec;
  1185                           ;doprnt.c: 508: unsigned short flag;
  1186                           ;doprnt.c: 515: char d;
  1187                           ;doprnt.c: 516: double fval, integ;
  1188                           ;doprnt.c: 517: int exp;
  1189                           ;doprnt.c: 518: double ival;
  1190                           ;doprnt.c: 519: union {
  1191                           ;doprnt.c: 520: unsigned long _val;
  1192                           ;doprnt.c: 521: struct {
  1193                           ;doprnt.c: 522: const char * _cp;
  1194                           ;doprnt.c: 523: unsigned _len;
  1195                           ;doprnt.c: 524: } _str;
  1196                           ;doprnt.c: 525: } _val;
  1197                           ;doprnt.c: 542: *ap = __va_start();
  1198                           
  1199                           ;incstack = 0
  1200                           ;incstack = 0
  1201  00068E  0100               	movlb	0	; () banked
  1202  000690  0E00               	movlw	high (?_sprintf+4)
  1203  000692  0100               	movlb	0	; () banked
  1204  000694  0100               	movlb	0	; () banked
  1205  000696  6FA0               	movwf	(sprintf@ap+1)& (0+255),b
  1206  000698  0100               	movlb	0	; () banked
  1207  00069A  0E8F               	movlw	low (?_sprintf+4)
  1208  00069C  0100               	movlb	0	; () banked
  1209  00069E  6F9F               	movwf	sprintf@ap& (0+255),b
  1210                           
  1211                           ;doprnt.c: 545: while(c = *f++) {
  1212  0006A0  EF74  F00B         	goto	l5301
  1213  0006A4                     l4959:
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;doprnt.c: 547: if(c != '%')
  1217  0006A4  0100               	movlb	0	; () banked
  1218  0006A6  0100               	movlb	0	; () banked
  1219  0006A8  51B9               	movf	sprintf@c& (0+255),w,b
  1220  0006AA  0A25               	xorlw	37
  1221  0006AC  B4D8               	btfsc	status,2,c
  1222  0006AE  D009               	goto	l4965
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;doprnt.c: 549: {
  1226                           ;doprnt.c: 550: ((*sp++ = (c)));
  1227  0006B0  C08B  FFD9         	movff	sprintf@sp,fsr2l
  1228  0006B4  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  1229  0006B8  0100               	movlb	0	; () banked
  1230  0006BA  C0B9  FFDF         	movff	sprintf@c,indf2
  1231  0006BE  EF70  F00B         	goto	L8
  1232  0006C2                     l4965:
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;doprnt.c: 552: }
  1236                           ;doprnt.c: 557: flag = 0;
  1237  0006C2  0E00               	movlw	0
  1238  0006C4  0100               	movlb	0	; () banked
  1239  0006C6  0100               	movlb	0	; () banked
  1240  0006C8  6FAC               	movwf	(sprintf@flag+1)& (0+255),b
  1241  0006CA  0E00               	movlw	0
  1242  0006CC  0100               	movlb	0	; () banked
  1243  0006CE  6FAB               	movwf	sprintf@flag& (0+255),b
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;doprnt.c: 620: if(*f == '.') {
  1247  0006D0  0100               	movlb	0	; () banked
  1248  0006D2  C08D  FFF6         	movff	sprintf@f,tblptrl
  1249  0006D6  0100               	movlb	0	; () banked
  1250  0006D8  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  1251  0006DC  0008               	tblrd		*
  1252  0006DE  50F5               	movf	tablat,w,c
  1253  0006E0  0A2E               	xorlw	46
  1254  0006E2  A4D8               	btfss	status,2,c
  1255  0006E4  D03F               	goto	l4979
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;doprnt.c: 621: flag |= 0x4000;
  1259  0006E6  0100               	movlb	0	; () banked
  1260  0006E8  0100               	movlb	0	; () banked
  1261  0006EA  8DAC               	bsf	(sprintf@flag+1)& (0+255),6,b
  1262                           
  1263                           ;doprnt.c: 622: f++;
  1264  0006EC  0100               	movlb	0	; () banked
  1265  0006EE  0100               	movlb	0	; () banked
  1266  0006F0  4B8D               	infsnz	sprintf@f& (0+255),f,b
  1267  0006F2  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;doprnt.c: 629: {
  1271                           ;doprnt.c: 630: prec = 0;
  1272  0006F4  0E00               	movlw	0
  1273  0006F6  0100               	movlb	0	; () banked
  1274  0006F8  0100               	movlb	0	; () banked
  1275  0006FA  6FB5               	movwf	(sprintf@prec+1)& (0+255),b
  1276  0006FC  0E00               	movlw	0
  1277  0006FE  0100               	movlb	0	; () banked
  1278  000700  6FB4               	movwf	sprintf@prec& (0+255),b
  1279                           
  1280                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1281  000702  D022               	goto	l4977
  1282  000704                     l4973:
  1283                           
  1284                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1285  000704  C0B4  F01F         	movff	sprintf@prec,?___wmul
  1286  000708  C0B5  F020         	movff	sprintf@prec+1,?___wmul+1
  1287  00070C  0E00               	movlw	0
  1288  00070E  6E22               	movwf	?___wmul+3,c
  1289  000710  0E0A               	movlw	10
  1290  000712  6E21               	movwf	?___wmul+2,c
  1291  000714  EC0A  F017         	call	___wmul	;wreg free
  1292  000718  0100               	movlb	0	; () banked
  1293  00071A  C08D  FFF6         	movff	sprintf@f,tblptrl
  1294  00071E  0100               	movlb	0	; () banked
  1295  000720  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  1296  000724  0008               	tblrd		*
  1297  000726  50F5               	movf	tablat,w,c
  1298  000728  261F               	addwf	?___wmul,f,c
  1299  00072A  0E00               	movlw	0
  1300  00072C  2220               	addwfc	?___wmul+1,f,c
  1301  00072E  0ED0               	movlw	208
  1302  000730  241F               	addwf	?___wmul,w,c
  1303  000732  0100               	movlb	0	; () banked
  1304  000734  0100               	movlb	0	; () banked
  1305  000736  6FB4               	movwf	sprintf@prec& (0+255),b
  1306  000738  0EFF               	movlw	255
  1307  00073A  2020               	addwfc	?___wmul+1,w,c
  1308  00073C  0100               	movlb	0	; () banked
  1309  00073E  6FB5               	movwf	(sprintf@prec+1)& (0+255),b
  1310                           
  1311                           ; BSR set to: 0
  1312  000740  0100               	movlb	0	; () banked
  1313  000742  0100               	movlb	0	; () banked
  1314  000744  4B8D               	infsnz	sprintf@f& (0+255),f,b
  1315  000746  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  1316  000748                     l4977:
  1317                           
  1318                           ; BSR set to: 0
  1319  000748  0100               	movlb	0	; () banked
  1320  00074A  C08D  FFF6         	movff	sprintf@f,tblptrl
  1321  00074E  0100               	movlb	0	; () banked
  1322  000750  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  1323  000754  0008               	tblrd		*
  1324  000756  CFF5 F00F          	movff	tablat,?_isdigit
  1325  00075A  EC65  F017         	call	_isdigit	;wreg free
  1326  00075E  A0D8               	btfss	status,0,c
  1327  000760  D010               	goto	l4987
  1328  000762  D7D0               	goto	l4973
  1329  000764                     l4979:
  1330                           
  1331                           ;doprnt.c: 635: prec = 0;
  1332  000764  0E00               	movlw	0
  1333  000766  0100               	movlb	0	; () banked
  1334  000768  0100               	movlb	0	; () banked
  1335  00076A  6FB5               	movwf	(sprintf@prec+1)& (0+255),b
  1336  00076C  0E00               	movlw	0
  1337  00076E  0100               	movlb	0	; () banked
  1338  000770  6FB4               	movwf	sprintf@prec& (0+255),b
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;doprnt.c: 637: flag |= 0x1000;
  1342  000772  0100               	movlb	0	; () banked
  1343  000774  0100               	movlb	0	; () banked
  1344  000776  89AC               	bsf	(sprintf@flag+1)& (0+255),4,b
  1345  000778  D004               	goto	l4987
  1346  00077A                     l4983:
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;doprnt.c: 692: flag |= 0x200;
  1350  00077A  0100               	movlb	0	; () banked
  1351  00077C  0100               	movlb	0	; () banked
  1352  00077E  83AC               	bsf	(sprintf@flag+1)& (0+255),1,b
  1353                           
  1354                           ;doprnt.c: 693: break;
  1355  000780  D019               	goto	l4989
  1356  000782                     l4987:
  1357  000782  0100               	movlb	0	; () banked
  1358  000784  C08D  FFF6         	movff	sprintf@f,tblptrl
  1359  000788  0100               	movlb	0	; () banked
  1360  00078A  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  1361  00078E  0100               	movlb	0	; () banked
  1362  000790  0100               	movlb	0	; () banked
  1363  000792  4B8D               	infsnz	sprintf@f& (0+255),f,b
  1364  000794  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  1365  000796  0008               	tblrd		*
  1366  000798  0100               	movlb	0	; () banked
  1367  00079A  CFF5 F0B9          	movff	tablat,sprintf@c
  1368  00079E  0100               	movlb	0	; () banked
  1369  0007A0  51B9               	movf	sprintf@c& (0+255),w,b
  1370                           
  1371                           ; Switch size 1, requested type "space"
  1372                           ; Number of cases is 2, Range of values is 0 to 103
  1373                           ; switch strategies available:
  1374                           ; Name         Instructions Cycles
  1375                           ; simple_byte            7     4 (average)
  1376                           ;	Chosen strategy is simple_byte
  1377  0007A2  0A00               	xorlw	0	; case 0
  1378  0007A4  B4D8               	btfsc	status,2,c
  1379  0007A6  EF86  F00B         	goto	l5303
  1380  0007AA  0A67               	xorlw	103	; case 103
  1381  0007AC  B4D8               	btfsc	status,2,c
  1382  0007AE  D7E5               	goto	l4983
  1383  0007B0  EF74  F00B         	goto	l5301
  1384  0007B4                     l4989:
  1385                           
  1386                           ; BSR set to: 0
  1387                           ;doprnt.c: 834: if(flag & (0x700)) {
  1388  0007B4  0E07               	movlw	7
  1389  0007B6  0100               	movlb	0	; () banked
  1390  0007B8  0100               	movlb	0	; () banked
  1391  0007BA  15AC               	andwf	(sprintf@flag+1)& (0+255),w,b
  1392  0007BC  B4D8               	btfsc	status,2,c
  1393  0007BE  EF10  F00B         	goto	l5281
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;doprnt.c: 836: if(flag & 0x1000)
  1397  0007C2  0100               	movlb	0	; () banked
  1398  0007C4  0100               	movlb	0	; () banked
  1399  0007C6  A9AC               	btfss	(sprintf@flag+1)& (0+255),4,b
  1400  0007C8  D007               	goto	l4995
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;doprnt.c: 838: prec = 6;
  1404  0007CA  0E00               	movlw	0
  1405  0007CC  0100               	movlb	0	; () banked
  1406  0007CE  0100               	movlb	0	; () banked
  1407  0007D0  6FB5               	movwf	(sprintf@prec+1)& (0+255),b
  1408  0007D2  0E06               	movlw	6
  1409  0007D4  0100               	movlb	0	; () banked
  1410  0007D6  6FB4               	movwf	sprintf@prec& (0+255),b
  1411  0007D8                     l4995:
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1415  0007D8  C09F  FFD9         	movff	sprintf@ap,fsr2l
  1416  0007DC  C0A0  FFDA         	movff	sprintf@ap+1,fsr2h
  1417  0007E0  0100               	movlb	0	; () banked
  1418  0007E2  CFDE F0B6          	movff	postinc2,sprintf@fval
  1419  0007E6  0100               	movlb	0	; () banked
  1420  0007E8  CFDE F0B7          	movff	postinc2,sprintf@fval+1
  1421  0007EC  0100               	movlb	0	; () banked
  1422  0007EE  CFDD F0B8          	movff	postdec2,sprintf@fval+2
  1423                           
  1424                           ; BSR set to: 0
  1425  0007F2  0E03               	movlw	3
  1426  0007F4  0100               	movlb	0	; () banked
  1427  0007F6  0100               	movlb	0	; () banked
  1428  0007F8  279F               	addwf	sprintf@ap& (0+255),f,b
  1429  0007FA  0E00               	movlw	0
  1430  0007FC  0100               	movlb	0	; () banked
  1431  0007FE  23A0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;doprnt.c: 840: if(fval < 0.0) {
  1435  000800  0100               	movlb	0	; () banked
  1436  000802  0100               	movlb	0	; () banked
  1437  000804  51B8               	movf	(sprintf@fval+2)& (0+255),w,b
  1438  000806  0A80               	xorlw	128
  1439  000808  0F80               	addlw	128
  1440  00080A  E107               	bnz	u3435
  1441  00080C  0E00               	movlw	0
  1442  00080E  0100               	movlb	0	; () banked
  1443  000810  5DB7               	subwf	(sprintf@fval+1)& (0+255),w,b
  1444  000812  E103               	bnz	u3435
  1445  000814  0E00               	movlw	0
  1446  000816  0100               	movlb	0	; () banked
  1447  000818  5DB6               	subwf	sprintf@fval& (0+255),w,b
  1448  00081A                     u3435:
  1449  00081A  B0D8               	btfsc	status,0,c
  1450  00081C  D012               	goto	l5005
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;doprnt.c: 841: fval = -fval;
  1454  00081E  C0B6  F05A         	movff	sprintf@fval,?___ftneg
  1455  000822  C0B7  F05B         	movff	sprintf@fval+1,?___ftneg+1
  1456  000826  C0B8  F05C         	movff	sprintf@fval+2,?___ftneg+2
  1457  00082A  EC52  F017         	call	___ftneg	;wreg free
  1458  00082E  C05C  F0B8         	movff	?___ftneg+2,sprintf@fval+2
  1459  000832  C05B  F0B7         	movff	?___ftneg+1,sprintf@fval+1
  1460  000836  C05A  F0B6         	movff	?___ftneg,sprintf@fval
  1461                           
  1462                           ;doprnt.c: 842: flag |= 0x03;
  1463  00083A  0E03               	movlw	3
  1464  00083C  0100               	movlb	0	; () banked
  1465  00083E  0100               	movlb	0	; () banked
  1466  000840  13AB               	iorwf	sprintf@flag& (0+255),f,b
  1467  000842                     l5005:
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;doprnt.c: 843: }
  1471                           ;doprnt.c: 844: exp = 0;
  1472  000842  0E00               	movlw	0
  1473  000844  0100               	movlb	0	; () banked
  1474  000846  0100               	movlb	0	; () banked
  1475  000848  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  1476  00084A  0E00               	movlw	0
  1477  00084C  0100               	movlb	0	; () banked
  1478  00084E  6FB2               	movwf	sprintf@exp& (0+255),b
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;doprnt.c: 845: if( fval!=0) {
  1482  000850  0E7F               	movlw	127
  1483  000852  0100               	movlb	0	; () banked
  1484  000854  0100               	movlb	0	; () banked
  1485  000856  15B8               	andwf	(sprintf@fval+2)& (0+255),w,b
  1486  000858  0100               	movlb	0	; () banked
  1487  00085A  11B7               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1488  00085C  0100               	movlb	0	; () banked
  1489  00085E  11B6               	iorwf	sprintf@fval& (0+255),w,b
  1490  000860  B4D8               	btfsc	status,2,c
  1491  000862  D0A5               	goto	l5033
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1495  000864  0E82               	movlw	130
  1496  000866  0100               	movlb	0	; () banked
  1497  000868  6F92               	movwf	??_sprintf& (0+255),b
  1498  00086A  0EFF               	movlw	255
  1499  00086C  6F93               	movwf	(??_sprintf+1)& (0+255),b
  1500  00086E  0100               	movlb	0	; () banked
  1501  000870  C0B6  F094         	movff	sprintf@fval,??_sprintf+2
  1502  000874  0100               	movlb	0	; () banked
  1503  000876  C0B7  F095         	movff	sprintf@fval+1,??_sprintf+3
  1504  00087A  0100               	movlb	0	; () banked
  1505  00087C  C0B8  F096         	movff	sprintf@fval+2,??_sprintf+4
  1506  000880  0100               	movlb	0	; () banked
  1507  000882  C0B9  F097         	movff	sprintf@fval+3,??_sprintf+5
  1508  000886  0E10               	movlw	16
  1509  000888  D006               	goto	u3450
  1510  00088A                     u3455:
  1511  00088A  0100               	movlb	0	; () banked
  1512  00088C  90D8               	bcf	status,0,c
  1513  00088E  3397               	rrcf	(??_sprintf+5)& (0+255),f,b
  1514  000890  3396               	rrcf	(??_sprintf+4)& (0+255),f,b
  1515  000892  3395               	rrcf	(??_sprintf+3)& (0+255),f,b
  1516  000894  3394               	rrcf	(??_sprintf+2)& (0+255),f,b
  1517  000896                     u3450:
  1518  000896  2EE8               	decfsz	wreg,f,c
  1519  000898  D7F8               	goto	u3455
  1520  00089A  0100               	movlb	0	; () banked
  1521  00089C  5194               	movf	(??_sprintf+2)& (0+255),w,b
  1522  00089E  0100               	movlb	0	; () banked
  1523  0008A0  2592               	addwf	??_sprintf& (0+255),w,b
  1524  0008A2  0100               	movlb	0	; () banked
  1525  0008A4  0100               	movlb	0	; () banked
  1526  0008A6  6FB2               	movwf	sprintf@exp& (0+255),b
  1527  0008A8  0100               	movlb	0	; () banked
  1528  0008AA  0100               	movlb	0	; () banked
  1529  0008AC  0E00               	movlw	0
  1530  0008AE  2193               	addwfc	(??_sprintf+1)& (0+255),w,b
  1531  0008B0  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;doprnt.c: 847: exp--;
  1535  0008B2  0100               	movlb	0	; () banked
  1536  0008B4  0100               	movlb	0	; () banked
  1537  0008B6  07B2               	decf	sprintf@exp& (0+255),f,b
  1538  0008B8  A0D8               	btfss	status,0,c
  1539  0008BA  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;doprnt.c: 848: exp *= 3;
  1543  0008BC  C0B2  F01F         	movff	sprintf@exp,?___wmul
  1544  0008C0  C0B3  F020         	movff	sprintf@exp+1,?___wmul+1
  1545  0008C4  0E00               	movlw	0
  1546  0008C6  6E22               	movwf	?___wmul+3,c
  1547  0008C8  0E03               	movlw	3
  1548  0008CA  6E21               	movwf	?___wmul+2,c
  1549  0008CC  EC0A  F017         	call	___wmul	;wreg free
  1550  0008D0  C01F  F0B2         	movff	?___wmul,sprintf@exp
  1551  0008D4  C020  F0B3         	movff	?___wmul+1,sprintf@exp+1
  1552                           
  1553                           ;doprnt.c: 849: exp /= 10;
  1554  0008D8  C0B2  F016         	movff	sprintf@exp,?___awdiv
  1555  0008DC  C0B3  F017         	movff	sprintf@exp+1,?___awdiv+1
  1556  0008E0  0E00               	movlw	0
  1557  0008E2  6E19               	movwf	?___awdiv+3,c
  1558  0008E4  0E0A               	movlw	10
  1559  0008E6  6E18               	movwf	?___awdiv+2,c
  1560  0008E8  ECA6  F014         	call	___awdiv	;wreg free
  1561  0008EC  C016  F0B2         	movff	?___awdiv,sprintf@exp
  1562  0008F0  C017  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  1563                           
  1564                           ;doprnt.c: 850: if(exp < 0)
  1565  0008F4  0100               	movlb	0	; () banked
  1566  0008F6  0100               	movlb	0	; () banked
  1567  0008F8  AFB3               	btfss	(sprintf@exp+1)& (0+255),7,b
  1568  0008FA  D005               	goto	l5021
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;doprnt.c: 851: exp--;
  1572  0008FC  0100               	movlb	0	; () banked
  1573  0008FE  0100               	movlb	0	; () banked
  1574  000900  07B2               	decf	sprintf@exp& (0+255),f,b
  1575  000902  A0D8               	btfss	status,0,c
  1576  000904  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  1577  000906                     l5021:
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;doprnt.c: 855: integ = scale(-exp);
  1581  000906  0100               	movlb	0	; () banked
  1582  000908  0100               	movlb	0	; () banked
  1583  00090A  51B2               	movf	sprintf@exp& (0+255),w,b
  1584  00090C  0800               	sublw	0
  1585  00090E  6E36               	movwf	?_scale,c
  1586  000910  EC8D  F00B         	call	_scale	;wreg free
  1587  000914  C038  F0AA         	movff	?_scale+2,sprintf@integ+2
  1588  000918  C037  F0A9         	movff	?_scale+1,sprintf@integ+1
  1589  00091C  C036  F0A8         	movff	?_scale,sprintf@integ
  1590                           
  1591                           ;doprnt.c: 856: integ *= fval;
  1592  000920  0100               	movlb	0	; () banked
  1593  000922  0E00               	movlw	high sprintf@integ
  1594  000924  0100               	movlb	0	; () banked
  1595  000926  0100               	movlb	0	; () banked
  1596  000928  6F81               	movwf	(?___asftmul+1)& (0+255),b
  1597  00092A  0100               	movlb	0	; () banked
  1598  00092C  0EA8               	movlw	low sprintf@integ
  1599  00092E  0100               	movlb	0	; () banked
  1600  000930  6F80               	movwf	?___asftmul& (0+255),b
  1601  000932  C0B6  F082         	movff	sprintf@fval,?___asftmul+2
  1602  000936  C0B7  F083         	movff	sprintf@fval+1,?___asftmul+3
  1603  00093A  C0B8  F084         	movff	sprintf@fval+2,?___asftmul+4
  1604  00093E  ECB0  F016         	call	___asftmul	;wreg free
  1605                           
  1606                           ;doprnt.c: 857: if(integ < 1.0)
  1607  000942  C0A8  F080         	movff	sprintf@integ,?___ftge
  1608  000946  C0A9  F081         	movff	sprintf@integ+1,?___ftge+1
  1609  00094A  C0AA  F082         	movff	sprintf@integ+2,?___ftge+2
  1610  00094E  0E00               	movlw	0
  1611  000950  0100               	movlb	0	; () banked
  1612  000952  0100               	movlb	0	; () banked
  1613  000954  6F83               	movwf	(?___ftge+3)& (0+255),b
  1614  000956  0E80               	movlw	128
  1615  000958  0100               	movlb	0	; () banked
  1616  00095A  0100               	movlb	0	; () banked
  1617  00095C  6F84               	movwf	(?___ftge+4)& (0+255),b
  1618  00095E  0E3F               	movlw	63
  1619  000960  0100               	movlb	0	; () banked
  1620  000962  0100               	movlb	0	; () banked
  1621  000964  6F85               	movwf	(?___ftge+5)& (0+255),b
  1622  000966  EC14  F013         	call	___ftge	;wreg free
  1623  00096A  B0D8               	btfsc	status,0,c
  1624  00096C  D006               	goto	l5029
  1625                           
  1626                           ;doprnt.c: 858: exp--;
  1627  00096E  0100               	movlb	0	; () banked
  1628  000970  0100               	movlb	0	; () banked
  1629  000972  07B2               	decf	sprintf@exp& (0+255),f,b
  1630  000974  A0D8               	btfss	status,0,c
  1631  000976  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  1632  000978  D01A               	goto	l5033
  1633  00097A                     l5029:
  1634                           
  1635                           ;doprnt.c: 859: else if(integ >= 10.0)
  1636  00097A  C0A8  F080         	movff	sprintf@integ,?___ftge
  1637  00097E  C0A9  F081         	movff	sprintf@integ+1,?___ftge+1
  1638  000982  C0AA  F082         	movff	sprintf@integ+2,?___ftge+2
  1639  000986  0E00               	movlw	0
  1640  000988  0100               	movlb	0	; () banked
  1641  00098A  0100               	movlb	0	; () banked
  1642  00098C  6F83               	movwf	(?___ftge+3)& (0+255),b
  1643  00098E  0E20               	movlw	32
  1644  000990  0100               	movlb	0	; () banked
  1645  000992  0100               	movlb	0	; () banked
  1646  000994  6F84               	movwf	(?___ftge+4)& (0+255),b
  1647  000996  0E41               	movlw	65
  1648  000998  0100               	movlb	0	; () banked
  1649  00099A  0100               	movlb	0	; () banked
  1650  00099C  6F85               	movwf	(?___ftge+5)& (0+255),b
  1651  00099E  EC14  F013         	call	___ftge	;wreg free
  1652  0009A2  A0D8               	btfss	status,0,c
  1653  0009A4  D004               	goto	l5033
  1654                           
  1655                           ;doprnt.c: 860: exp++;
  1656  0009A6  0100               	movlb	0	; () banked
  1657  0009A8  0100               	movlb	0	; () banked
  1658  0009AA  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  1659  0009AC  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  1660  0009AE                     l5033:
  1661                           
  1662                           ;doprnt.c: 861: }
  1663                           ;doprnt.c: 863: if(exp <= 0)
  1664  0009AE  0100               	movlb	0	; () banked
  1665  0009B0  0100               	movlb	0	; () banked
  1666  0009B2  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  1667  0009B4  0A80               	xorlw	128
  1668  0009B6  0F80               	addlw	-128
  1669  0009B8  0E01               	movlw	1
  1670  0009BA  B4D8               	btfsc	status,2,c
  1671  0009BC  5DB2               	subwf	sprintf@exp& (0+255),w,b
  1672  0009BE  B0D8               	btfsc	status,0,c
  1673  0009C0  D009               	goto	l154
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;doprnt.c: 864: c = 1;
  1677  0009C2  0100               	movlb	0	; () banked
  1678  0009C4  6F92               	movwf	??_sprintf& (0+255),b
  1679  0009C6  0E01               	movlw	1
  1680  0009C8  0100               	movlb	0	; () banked
  1681  0009CA  0100               	movlb	0	; () banked
  1682  0009CC  6FB9               	movwf	sprintf@c& (0+255),b
  1683  0009CE  0100               	movlb	0	; () banked
  1684  0009D0  5192               	movf	??_sprintf& (0+255),w,b
  1685  0009D2  D002               	goto	l155
  1686  0009D4                     l154:
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;doprnt.c: 865: else
  1690                           ;doprnt.c: 866: c = exp;
  1691  0009D4  C0B2  F0B9         	movff	sprintf@exp,sprintf@c
  1692  0009D8                     l155:
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;doprnt.c: 867: if(
  1696                           ;doprnt.c: 875: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  1697                           ;doprnt.c: 877: ) {
  1698  0009D8  0100               	movlb	0	; () banked
  1699  0009DA  0100               	movlb	0	; () banked
  1700  0009DC  A3AC               	btfss	(sprintf@flag+1)& (0+255),1,b
  1701  0009DE  D2B6               	goto	l156
  1702                           
  1703                           ; BSR set to: 0
  1704  0009E0  0100               	movlb	0	; () banked
  1705  0009E2  0100               	movlb	0	; () banked
  1706  0009E4  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  1707  0009E6  0A80               	xorlw	128
  1708  0009E8  0F81               	addlw	-127
  1709  0009EA  0EFC               	movlw	252
  1710  0009EC  B4D8               	btfsc	status,2,c
  1711  0009EE  5DB2               	subwf	sprintf@exp& (0+255),w,b
  1712  0009F0  A0D8               	btfss	status,0,c
  1713  0009F2  D013               	goto	l5041
  1714                           
  1715                           ; BSR set to: 0
  1716  0009F4  0100               	movlb	0	; () banked
  1717  0009F6  0100               	movlb	0	; () banked
  1718  0009F8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  1719  0009FA  0A80               	xorlw	128
  1720  0009FC  0100               	movlb	0	; () banked
  1721  0009FE  6F92               	movwf	??_sprintf& (0+255),b
  1722  000A00  0100               	movlb	0	; () banked
  1723  000A02  51B4               	movf	sprintf@prec& (0+255),w,b
  1724  000A04  0100               	movlb	0	; () banked
  1725  000A06  0100               	movlb	0	; () banked
  1726  000A08  5DB2               	subwf	sprintf@exp& (0+255),w,b
  1727  000A0A  0100               	movlb	0	; () banked
  1728  000A0C  0100               	movlb	0	; () banked
  1729  000A0E  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  1730  000A10  0A80               	xorlw	128
  1731  000A12  0100               	movlb	0	; () banked
  1732  000A14  5992               	subwfb	??_sprintf& (0+255),w,b
  1733  000A16  A0D8               	btfss	status,0,c
  1734  000A18  D299               	goto	l156
  1735  000A1A                     l5041:
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;doprnt.c: 879: if(prec && flag & 0x200)
  1739  000A1A  0100               	movlb	0	; () banked
  1740  000A1C  0100               	movlb	0	; () banked
  1741  000A1E  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  1742  000A20  11B4               	iorwf	sprintf@prec& (0+255),w,b
  1743  000A22  B4D8               	btfsc	status,2,c
  1744  000A24  D009               	goto	l5047
  1745                           
  1746                           ; BSR set to: 0
  1747  000A26  0100               	movlb	0	; () banked
  1748  000A28  0100               	movlb	0	; () banked
  1749  000A2A  A3AC               	btfss	(sprintf@flag+1)& (0+255),1,b
  1750  000A2C  D005               	goto	l5047
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;doprnt.c: 880: prec--;
  1754  000A2E  0100               	movlb	0	; () banked
  1755  000A30  0100               	movlb	0	; () banked
  1756  000A32  07B4               	decf	sprintf@prec& (0+255),f,b
  1757  000A34  A0D8               	btfss	status,0,c
  1758  000A36  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  1759  000A38                     l5047:
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;doprnt.c: 882: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  1763  000A38  0E09               	movlw	9
  1764  000A3A  0100               	movlb	0	; () banked
  1765  000A3C  0100               	movlb	0	; () banked
  1766  000A3E  5DB4               	subwf	sprintf@prec& (0+255),w,b
  1767  000A40  0E00               	movlw	0
  1768  000A42  0100               	movlb	0	; () banked
  1769  000A44  59B5               	subwfb	(sprintf@prec+1)& (0+255),w,b
  1770  000A46  A0D8               	btfss	status,0,c
  1771  000A48  D009               	goto	l160
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;doprnt.c: 883: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  1775  000A4A  0100               	movlb	0	; () banked
  1776  000A4C  6F92               	movwf	??_sprintf& (0+255),b
  1777  000A4E  0E08               	movlw	8
  1778  000A50  0100               	movlb	0	; () banked
  1779  000A52  0100               	movlb	0	; () banked
  1780  000A54  6FB9               	movwf	sprintf@c& (0+255),b
  1781  000A56  0100               	movlb	0	; () banked
  1782  000A58  5192               	movf	??_sprintf& (0+255),w,b
  1783  000A5A  D002               	goto	l5051
  1784  000A5C                     l160:
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;doprnt.c: 884: else
  1788                           ;doprnt.c: 885: c = prec;
  1789  000A5C  C0B4  F0B9         	movff	sprintf@prec,sprintf@c
  1790  000A60                     l5051:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;doprnt.c: 886: if( fval!=0) {
  1794  000A60  0E7F               	movlw	127
  1795  000A62  0100               	movlb	0	; () banked
  1796  000A64  0100               	movlb	0	; () banked
  1797  000A66  15B8               	andwf	(sprintf@fval+2)& (0+255),w,b
  1798  000A68  0100               	movlb	0	; () banked
  1799  000A6A  11B7               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1800  000A6C  0100               	movlb	0	; () banked
  1801  000A6E  11B6               	iorwf	sprintf@fval& (0+255),w,b
  1802  000A70  B4D8               	btfsc	status,2,c
  1803  000A72  D0F6               	goto	l5071
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 887: fval /= scale(exp-c);
  1807  000A74  0100               	movlb	0	; () banked
  1808  000A76  0E00               	movlw	high sprintf@fval
  1809  000A78  6E48               	movwf	?___asftdiv+1,c
  1810  000A7A  0100               	movlb	0	; () banked
  1811  000A7C  0EB6               	movlw	low sprintf@fval
  1812  000A7E  6E47               	movwf	?___asftdiv,c
  1813  000A80  0100               	movlb	0	; () banked
  1814  000A82  0100               	movlb	0	; () banked
  1815  000A84  51B9               	movf	sprintf@c& (0+255),w,b
  1816  000A86  0800               	sublw	0
  1817  000A88  0100               	movlb	0	; () banked
  1818  000A8A  0100               	movlb	0	; () banked
  1819  000A8C  25B2               	addwf	sprintf@exp& (0+255),w,b
  1820  000A8E  6E36               	movwf	?_scale,c
  1821  000A90  EC8D  F00B         	call	_scale	;wreg free
  1822  000A94  C038  F04B         	movff	?_scale+2,?___asftdiv+4
  1823  000A98  C037  F04A         	movff	?_scale+1,?___asftdiv+3
  1824  000A9C  C036  F049         	movff	?_scale,?___asftdiv+2
  1825  000AA0  ECCE  F016         	call	___asftdiv	;wreg free
  1826                           
  1827                           ;doprnt.c: 902: if(fval - (double)(unsigned long)fval >= 0.5)
  1828  000AA4  C0B6  F060         	movff	sprintf@fval,?___ftadd+3
  1829  000AA8  C0B7  F061         	movff	sprintf@fval+1,?___ftadd+4
  1830  000AAC  C0B8  F062         	movff	sprintf@fval+2,?___ftadd+5
  1831  000AB0  C0B6  F042         	movff	sprintf@fval,?___fttol
  1832  000AB4  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  1833  000AB8  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  1834  000ABC  EC86  F013         	call	___fttol	;wreg free
  1835  000AC0  C045  F054         	movff	?___fttol+3,?___lltoft+3
  1836  000AC4  C044  F053         	movff	?___fttol+2,?___lltoft+2
  1837  000AC8  C043  F052         	movff	?___fttol+1,?___lltoft+1
  1838  000ACC  C042  F051         	movff	?___fttol,?___lltoft
  1839  000AD0  ECE7  F015         	call	___lltoft	;wreg free
  1840  000AD4  C053  F05C         	movff	?___lltoft+2,?___ftneg+2
  1841  000AD8  C052  F05B         	movff	?___lltoft+1,?___ftneg+1
  1842  000ADC  C051  F05A         	movff	?___lltoft,?___ftneg
  1843  000AE0  EC52  F017         	call	___ftneg	;wreg free
  1844  000AE4  C05C  F05F         	movff	?___ftneg+2,?___ftadd+2
  1845  000AE8  C05B  F05E         	movff	?___ftneg+1,?___ftadd+1
  1846  000AEC  C05A  F05D         	movff	?___ftneg,?___ftadd
  1847  000AF0  ECF5  F00E         	call	___ftadd	;wreg free
  1848  000AF4  C05F  F082         	movff	?___ftadd+2,?___ftge+2
  1849  000AF8  C05E  F081         	movff	?___ftadd+1,?___ftge+1
  1850  000AFC  C05D  F080         	movff	?___ftadd,?___ftge
  1851  000B00  0E00               	movlw	0
  1852  000B02  0100               	movlb	0	; () banked
  1853  000B04  0100               	movlb	0	; () banked
  1854  000B06  6F83               	movwf	(?___ftge+3)& (0+255),b
  1855  000B08  0E00               	movlw	0
  1856  000B0A  0100               	movlb	0	; () banked
  1857  000B0C  0100               	movlb	0	; () banked
  1858  000B0E  6F84               	movwf	(?___ftge+4)& (0+255),b
  1859  000B10  0E3F               	movlw	63
  1860  000B12  0100               	movlb	0	; () banked
  1861  000B14  0100               	movlb	0	; () banked
  1862  000B16  6F85               	movwf	(?___ftge+5)& (0+255),b
  1863  000B18  EC14  F013         	call	___ftge	;wreg free
  1864  000B1C  A0D8               	btfss	status,0,c
  1865  000B1E  D017               	goto	l5059
  1866                           
  1867                           ;doprnt.c: 903: fval += 0.5;
  1868  000B20  0100               	movlb	0	; () banked
  1869  000B22  0E00               	movlw	high sprintf@fval
  1870  000B24  0100               	movlb	0	; () banked
  1871  000B26  0100               	movlb	0	; () banked
  1872  000B28  6F81               	movwf	(?___asftadd+1)& (0+255),b
  1873  000B2A  0100               	movlb	0	; () banked
  1874  000B2C  0EB6               	movlw	low sprintf@fval
  1875  000B2E  0100               	movlb	0	; () banked
  1876  000B30  6F80               	movwf	?___asftadd& (0+255),b
  1877  000B32  0E00               	movlw	0
  1878  000B34  0100               	movlb	0	; () banked
  1879  000B36  0100               	movlb	0	; () banked
  1880  000B38  6F82               	movwf	(?___asftadd+2)& (0+255),b
  1881  000B3A  0E00               	movlw	0
  1882  000B3C  0100               	movlb	0	; () banked
  1883  000B3E  0100               	movlb	0	; () banked
  1884  000B40  6F83               	movwf	(?___asftadd+3)& (0+255),b
  1885  000B42  0E3F               	movlw	63
  1886  000B44  0100               	movlb	0	; () banked
  1887  000B46  0100               	movlb	0	; () banked
  1888  000B48  6F84               	movwf	(?___asftadd+4)& (0+255),b
  1889  000B4A  ECEC  F016         	call	___asftadd	;wreg free
  1890  000B4E                     l5059:
  1891                           
  1892                           ;doprnt.c: 904: if((unsigned long)fval >= dpowers[c+1]) {
  1893  000B4E  0100               	movlb	0	; () banked
  1894  000B50  C0B9  F092         	movff	sprintf@c,??_sprintf
  1895  000B54  0100               	movlb	0	; () banked
  1896  000B56  6B93               	clrf	(??_sprintf+1)& (0+255),b
  1897  000B58  BF92               	btfsc	??_sprintf& (0+255),7,b
  1898  000B5A  0793               	decf	(??_sprintf+1)& (0+255),f,b
  1899  000B5C  0100               	movlb	0	; () banked
  1900  000B5E  90D8               	bcf	status,0,c
  1901  000B60  3792               	rlcf	??_sprintf& (0+255),f,b
  1902  000B62  3793               	rlcf	(??_sprintf+1)& (0+255),f,b
  1903  000B64  0100               	movlb	0	; () banked
  1904  000B66  90D8               	bcf	status,0,c
  1905  000B68  3792               	rlcf	??_sprintf& (0+255),f,b
  1906  000B6A  3793               	rlcf	(??_sprintf+1)& (0+255),f,b
  1907  000B6C  0E04               	movlw	4
  1908  000B6E  0100               	movlb	0	; () banked
  1909  000B70  2792               	addwf	??_sprintf& (0+255),f,b
  1910  000B72  0E00               	movlw	0
  1911  000B74  2393               	addwfc	(??_sprintf+1)& (0+255),f,b
  1912  000B76  0E00               	movlw	low _dpowers
  1913  000B78  0100               	movlb	0	; () banked
  1914  000B7A  2592               	addwf	??_sprintf& (0+255),w,b
  1915  000B7C  6EF6               	movwf	tblptrl,c
  1916  000B7E  0E06               	movlw	high _dpowers
  1917  000B80  2193               	addwfc	(??_sprintf+1)& (0+255),w,b
  1918  000B82  6EF7               	movwf	tblptrh,c
  1919  000B84  C0B6  F042         	movff	sprintf@fval,?___fttol
  1920  000B88  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  1921  000B8C  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  1922  000B90  EC86  F013         	call	___fttol	;wreg free
  1923  000B94  0009               	tblrd		*+
  1924  000B96  50F5               	movf	tablat,w,c
  1925  000B98  5C42               	subwf	?___fttol,w,c
  1926  000B9A  0009               	tblrd		*+
  1927  000B9C  50F5               	movf	tablat,w,c
  1928  000B9E  5843               	subwfb	?___fttol+1,w,c
  1929  000BA0  0009               	tblrd		*+
  1930  000BA2  50F5               	movf	tablat,w,c
  1931  000BA4  5844               	subwfb	?___fttol+2,w,c
  1932  000BA6  0009               	tblrd		*+
  1933  000BA8  50F5               	movf	tablat,w,c
  1934  000BAA  5845               	subwfb	?___fttol+3,w,c
  1935  000BAC  A0D8               	btfss	status,0,c
  1936  000BAE  D01C               	goto	l5065
  1937                           
  1938                           ;doprnt.c: 905: fval *= 1e-1;
  1939  000BB0  0100               	movlb	0	; () banked
  1940  000BB2  0E00               	movlw	high sprintf@fval
  1941  000BB4  0100               	movlb	0	; () banked
  1942  000BB6  0100               	movlb	0	; () banked
  1943  000BB8  6F81               	movwf	(?___asftmul+1)& (0+255),b
  1944  000BBA  0100               	movlb	0	; () banked
  1945  000BBC  0EB6               	movlw	low sprintf@fval
  1946  000BBE  0100               	movlb	0	; () banked
  1947  000BC0  6F80               	movwf	?___asftmul& (0+255),b
  1948  000BC2  0ECD               	movlw	205
  1949  000BC4  0100               	movlb	0	; () banked
  1950  000BC6  0100               	movlb	0	; () banked
  1951  000BC8  6F82               	movwf	(?___asftmul+2)& (0+255),b
  1952  000BCA  0ECC               	movlw	204
  1953  000BCC  0100               	movlb	0	; () banked
  1954  000BCE  0100               	movlb	0	; () banked
  1955  000BD0  6F83               	movwf	(?___asftmul+3)& (0+255),b
  1956  000BD2  0E3D               	movlw	61
  1957  000BD4  0100               	movlb	0	; () banked
  1958  000BD6  0100               	movlb	0	; () banked
  1959  000BD8  6F84               	movwf	(?___asftmul+4)& (0+255),b
  1960  000BDA  ECB0  F016         	call	___asftmul	;wreg free
  1961                           
  1962                           ;doprnt.c: 906: exp++;
  1963  000BDE  0100               	movlb	0	; () banked
  1964  000BE0  0100               	movlb	0	; () banked
  1965  000BE2  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  1966  000BE4  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  1967                           
  1968                           ;doprnt.c: 907: } else if((unsigned long)fval < dpowers[c]) {
  1969  000BE6  D03C               	goto	l5071
  1970  000BE8                     l5065:
  1971  000BE8  0100               	movlb	0	; () banked
  1972  000BEA  0100               	movlb	0	; () banked
  1973  000BEC  51B9               	movf	sprintf@c& (0+255),w,b
  1974  000BEE  0D04               	mullw	4
  1975  000BF0  0E00               	movlw	low _dpowers
  1976  000BF2  24F3               	addwf	prodl,w,c
  1977  000BF4  6EF6               	movwf	tblptrl,c
  1978  000BF6  0E06               	movlw	high _dpowers
  1979  000BF8  20F4               	addwfc	prodh,w,c
  1980  000BFA  6EF7               	movwf	tblptrh,c
  1981  000BFC  C0B6  F042         	movff	sprintf@fval,?___fttol
  1982  000C00  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  1983  000C04  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  1984  000C08  EC86  F013         	call	___fttol	;wreg free
  1985  000C0C  0009               	tblrd		*+
  1986  000C0E  50F5               	movf	tablat,w,c
  1987  000C10  5C42               	subwf	?___fttol,w,c
  1988  000C12  0009               	tblrd		*+
  1989  000C14  50F5               	movf	tablat,w,c
  1990  000C16  5843               	subwfb	?___fttol+1,w,c
  1991  000C18  0009               	tblrd		*+
  1992  000C1A  50F5               	movf	tablat,w,c
  1993  000C1C  5844               	subwfb	?___fttol+2,w,c
  1994  000C1E  0009               	tblrd		*+
  1995  000C20  50F5               	movf	tablat,w,c
  1996  000C22  5845               	subwfb	?___fttol+3,w,c
  1997  000C24  B0D8               	btfsc	status,0,c
  1998  000C26  D01C               	goto	l5071
  1999                           
  2000                           ;doprnt.c: 908: fval *= 10.0;
  2001  000C28  0100               	movlb	0	; () banked
  2002  000C2A  0E00               	movlw	high sprintf@fval
  2003  000C2C  0100               	movlb	0	; () banked
  2004  000C2E  0100               	movlb	0	; () banked
  2005  000C30  6F81               	movwf	(?___asftmul+1)& (0+255),b
  2006  000C32  0100               	movlb	0	; () banked
  2007  000C34  0EB6               	movlw	low sprintf@fval
  2008  000C36  0100               	movlb	0	; () banked
  2009  000C38  6F80               	movwf	?___asftmul& (0+255),b
  2010  000C3A  0E00               	movlw	0
  2011  000C3C  0100               	movlb	0	; () banked
  2012  000C3E  0100               	movlb	0	; () banked
  2013  000C40  6F82               	movwf	(?___asftmul+2)& (0+255),b
  2014  000C42  0E20               	movlw	32
  2015  000C44  0100               	movlb	0	; () banked
  2016  000C46  0100               	movlb	0	; () banked
  2017  000C48  6F83               	movwf	(?___asftmul+3)& (0+255),b
  2018  000C4A  0E41               	movlw	65
  2019  000C4C  0100               	movlb	0	; () banked
  2020  000C4E  0100               	movlb	0	; () banked
  2021  000C50  6F84               	movwf	(?___asftmul+4)& (0+255),b
  2022  000C52  ECB0  F016         	call	___asftmul	;wreg free
  2023                           
  2024                           ;doprnt.c: 909: exp--;
  2025  000C56  0100               	movlb	0	; () banked
  2026  000C58  0100               	movlb	0	; () banked
  2027  000C5A  07B2               	decf	sprintf@exp& (0+255),f,b
  2028  000C5C  A0D8               	btfss	status,0,c
  2029  000C5E  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  2030  000C60                     l5071:
  2031                           
  2032                           ;doprnt.c: 910: }
  2033                           ;doprnt.c: 912: }
  2034                           ;doprnt.c: 968: {
  2035                           ;doprnt.c: 982: if(flag & 0x03)
  2036  000C60  0E03               	movlw	3
  2037  000C62  0100               	movlb	0	; () banked
  2038  000C64  0100               	movlb	0	; () banked
  2039  000C66  15AB               	andwf	sprintf@flag& (0+255),w,b
  2040  000C68  0100               	movlb	0	; () banked
  2041  000C6A  6F92               	movwf	??_sprintf& (0+255),b
  2042  000C6C  0E00               	movlw	0
  2043  000C6E  0100               	movlb	0	; () banked
  2044  000C70  0100               	movlb	0	; () banked
  2045  000C72  15AC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2046  000C74  0100               	movlb	0	; () banked
  2047  000C76  6F93               	movwf	(??_sprintf+1)& (0+255),b
  2048  000C78  0100               	movlb	0	; () banked
  2049  000C7A  5193               	movf	(??_sprintf+1)& (0+255),w,b
  2050  000C7C  1192               	iorwf	??_sprintf& (0+255),w,b
  2051  000C7E  B4D8               	btfsc	status,2,c
  2052  000C80  D00A               	goto	l5077
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;doprnt.c: 983: ((*sp++ = ('-')));
  2056  000C82  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2057  000C86  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2058  000C8A  0E2D               	movlw	45
  2059  000C8C  6EDF               	movwf	indf2,c
  2060                           
  2061                           ; BSR set to: 0
  2062  000C8E  0100               	movlb	0	; () banked
  2063  000C90  0100               	movlb	0	; () banked
  2064  000C92  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2065  000C94  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2066  000C96                     l5077:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;doprnt.c: 989: }
  2070                           ;doprnt.c: 994: _val._val = (unsigned long)fval;
  2071  000C96  C0B6  F042         	movff	sprintf@fval,?___fttol
  2072  000C9A  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  2073  000C9E  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  2074  000CA2  EC86  F013         	call	___fttol	;wreg free
  2075  000CA6  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  2076  000CAA  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  2077  000CAE  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  2078  000CB2  C042  F0AD         	movff	?___fttol,sprintf@_val
  2079                           
  2080                           ;doprnt.c: 995: ((*sp++ = (_val._val/dpowers[c] + '0')));
  2081  000CB6  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  2082  000CBA  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  2083  000CBE  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  2084  000CC2  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  2085  000CC6  0100               	movlb	0	; () banked
  2086  000CC8  0100               	movlb	0	; () banked
  2087  000CCA  51B9               	movf	sprintf@c& (0+255),w,b
  2088  000CCC  0D04               	mullw	4
  2089  000CCE  0E00               	movlw	low _dpowers
  2090  000CD0  24F3               	addwf	prodl,w,c
  2091  000CD2  6EF6               	movwf	tblptrl,c
  2092  000CD4  0E06               	movlw	high _dpowers
  2093  000CD6  20F4               	addwfc	prodh,w,c
  2094  000CD8  6EF7               	movwf	tblptrh,c
  2095  000CDA  0009               	tblrd		*+
  2096  000CDC  CFF5 F013          	movff	tablat,?___lldiv+4
  2097  000CE0  0009               	tblrd		*+
  2098  000CE2  CFF5 F014          	movff	tablat,?___lldiv+5
  2099  000CE6  0009               	tblrd		*+
  2100  000CE8  CFF5 F015          	movff	tablat,?___lldiv+6
  2101  000CEC  000A               	tblrd		*-
  2102  000CEE  CFF5 F016          	movff	tablat,?___lldiv+7
  2103  000CF2  ECEE  F014         	call	___lldiv	;wreg free
  2104  000CF6  500F               	movf	?___lldiv,w,c
  2105  000CF8  0F30               	addlw	48
  2106  000CFA  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2107  000CFE  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2108  000D02  6EDF               	movwf	indf2,c
  2109  000D04  0100               	movlb	0	; () banked
  2110  000D06  0100               	movlb	0	; () banked
  2111  000D08  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2112  000D0A  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;doprnt.c: 996: _val._val %= dpowers[c];
  2116  000D0C  C0AD  F00F         	movff	sprintf@_val,?___llmod
  2117  000D10  C0AE  F010         	movff	sprintf@_val+1,?___llmod+1
  2118  000D14  C0AF  F011         	movff	sprintf@_val+2,?___llmod+2
  2119  000D18  C0B0  F012         	movff	sprintf@_val+3,?___llmod+3
  2120  000D1C  0100               	movlb	0	; () banked
  2121  000D1E  0100               	movlb	0	; () banked
  2122  000D20  51B9               	movf	sprintf@c& (0+255),w,b
  2123  000D22  0D04               	mullw	4
  2124  000D24  0E00               	movlw	low _dpowers
  2125  000D26  24F3               	addwf	prodl,w,c
  2126  000D28  6EF6               	movwf	tblptrl,c
  2127  000D2A  0E06               	movlw	high _dpowers
  2128  000D2C  20F4               	addwfc	prodh,w,c
  2129  000D2E  6EF7               	movwf	tblptrh,c
  2130  000D30  0009               	tblrd		*+
  2131  000D32  CFF5 F013          	movff	tablat,?___llmod+4
  2132  000D36  0009               	tblrd		*+
  2133  000D38  CFF5 F014          	movff	tablat,?___llmod+5
  2134  000D3C  0009               	tblrd		*+
  2135  000D3E  CFF5 F015          	movff	tablat,?___llmod+6
  2136  000D42  000A               	tblrd		*-
  2137  000D44  CFF5 F016          	movff	tablat,?___llmod+7
  2138  000D48  ECB2  F015         	call	___llmod	;wreg free
  2139  000D4C  C012  F0B0         	movff	?___llmod+3,sprintf@_val+3
  2140  000D50  C011  F0AF         	movff	?___llmod+2,sprintf@_val+2
  2141  000D54  C010  F0AE         	movff	?___llmod+1,sprintf@_val+1
  2142  000D58  C00F  F0AD         	movff	?___llmod,sprintf@_val
  2143                           
  2144                           ;doprnt.c: 1001: if(prec)
  2145  000D5C  0100               	movlb	0	; () banked
  2146  000D5E  0100               	movlb	0	; () banked
  2147  000D60  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2148  000D62  11B4               	iorwf	sprintf@prec& (0+255),w,b
  2149  000D64  B4D8               	btfsc	status,2,c
  2150  000D66  D0A7               	goto	l5113
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;doprnt.c: 1003: {
  2154                           ;doprnt.c: 1004: ((*sp++ = ('.')));
  2155  000D68  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2156  000D6C  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2157  000D70  0E2E               	movlw	46
  2158  000D72  6EDF               	movwf	indf2,c
  2159                           
  2160                           ; BSR set to: 0
  2161  000D74  0100               	movlb	0	; () banked
  2162  000D76  0100               	movlb	0	; () banked
  2163  000D78  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2164  000D7A  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;doprnt.c: 1005: prec -= c;
  2168  000D7C  0100               	movlb	0	; () banked
  2169  000D7E  0100               	movlb	0	; () banked
  2170  000D80  51B9               	movf	sprintf@c& (0+255),w,b
  2171  000D82  0100               	movlb	0	; () banked
  2172  000D84  0100               	movlb	0	; () banked
  2173  000D86  5FB4               	subwf	sprintf@prec& (0+255),f,b
  2174  000D88  0E00               	movlw	0
  2175  000D8A  0100               	movlb	0	; () banked
  2176  000D8C  BFB9               	btfsc	sprintf@c& (0+255),7,b
  2177  000D8E  0EFF               	movlw	255
  2178  000D90  0100               	movlb	0	; () banked
  2179  000D92  0100               	movlb	0	; () banked
  2180  000D94  5BB5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2181                           
  2182                           ;doprnt.c: 1006: while(c--) {
  2183  000D96  D072               	goto	l5103
  2184  000D98                     l170:
  2185                           
  2186                           ; BSR set to: 0
  2187                           ;doprnt.c: 1011: if(flag & 0x200 && _val._val == 0) {
  2188  000D98  0100               	movlb	0	; () banked
  2189  000D9A  0100               	movlb	0	; () banked
  2190  000D9C  A3AC               	btfss	(sprintf@flag+1)& (0+255),1,b
  2191  000D9E  D01B               	goto	l5097
  2192                           
  2193                           ; BSR set to: 0
  2194  000DA0  0100               	movlb	0	; () banked
  2195  000DA2  0100               	movlb	0	; () banked
  2196  000DA4  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  2197  000DA6  11AD               	iorwf	sprintf@_val& (0+255),w,b
  2198  000DA8  11AE               	iorwf	(sprintf@_val+1)& (0+255),w,b
  2199  000DAA  11AF               	iorwf	(sprintf@_val+2)& (0+255),w,b
  2200  000DAC  A4D8               	btfss	status,2,c
  2201  000DAE  D013               	goto	l5097
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;doprnt.c: 1012: prec = c = 0;
  2205  000DB0  0100               	movlb	0	; () banked
  2206  000DB2  6F92               	movwf	??_sprintf& (0+255),b
  2207  000DB4  0E00               	movlw	0
  2208  000DB6  0100               	movlb	0	; () banked
  2209  000DB8  0100               	movlb	0	; () banked
  2210  000DBA  6FB9               	movwf	sprintf@c& (0+255),b
  2211  000DBC  0100               	movlb	0	; () banked
  2212  000DBE  5192               	movf	??_sprintf& (0+255),w,b
  2213  000DC0  0100               	movlb	0	; () banked
  2214  000DC2  51B9               	movf	sprintf@c& (0+255),w,b
  2215  000DC4  0100               	movlb	0	; () banked
  2216  000DC6  0100               	movlb	0	; () banked
  2217  000DC8  6FB4               	movwf	sprintf@prec& (0+255),b
  2218  000DCA  0100               	movlb	0	; () banked
  2219  000DCC  6BB5               	clrf	(sprintf@prec+1)& (0+255),b
  2220  000DCE  0100               	movlb	0	; () banked
  2221  000DD0  BFB4               	btfsc	sprintf@prec& (0+255),7,b
  2222  000DD2  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  2223                           
  2224                           ;doprnt.c: 1013: break;
  2225  000DD4  D06A               	goto	l5111
  2226  000DD6                     l5097:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;doprnt.c: 1014: }
  2230                           ;doprnt.c: 1016: ((*sp++ = ('0' + (_val._val/dpowers[c]))));
  2231  000DD6  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  2232  000DDA  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  2233  000DDE  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  2234  000DE2  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  2235  000DE6  0100               	movlb	0	; () banked
  2236  000DE8  0100               	movlb	0	; () banked
  2237  000DEA  51B9               	movf	sprintf@c& (0+255),w,b
  2238  000DEC  0D04               	mullw	4
  2239  000DEE  0E00               	movlw	low _dpowers
  2240  000DF0  24F3               	addwf	prodl,w,c
  2241  000DF2  6EF6               	movwf	tblptrl,c
  2242  000DF4  0E06               	movlw	high _dpowers
  2243  000DF6  20F4               	addwfc	prodh,w,c
  2244  000DF8  6EF7               	movwf	tblptrh,c
  2245  000DFA  0009               	tblrd		*+
  2246  000DFC  CFF5 F013          	movff	tablat,?___lldiv+4
  2247  000E00  0009               	tblrd		*+
  2248  000E02  CFF5 F014          	movff	tablat,?___lldiv+5
  2249  000E06  0009               	tblrd		*+
  2250  000E08  CFF5 F015          	movff	tablat,?___lldiv+6
  2251  000E0C  000A               	tblrd		*-
  2252  000E0E  CFF5 F016          	movff	tablat,?___lldiv+7
  2253  000E12  ECEE  F014         	call	___lldiv	;wreg free
  2254  000E16  500F               	movf	?___lldiv,w,c
  2255  000E18  0F30               	addlw	48
  2256  000E1A  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2257  000E1E  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2258  000E22  6EDF               	movwf	indf2,c
  2259  000E24  0100               	movlb	0	; () banked
  2260  000E26  0100               	movlb	0	; () banked
  2261  000E28  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2262  000E2A  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;doprnt.c: 1017: _val._val %= dpowers[c];
  2266  000E2C  C0AD  F00F         	movff	sprintf@_val,?___llmod
  2267  000E30  C0AE  F010         	movff	sprintf@_val+1,?___llmod+1
  2268  000E34  C0AF  F011         	movff	sprintf@_val+2,?___llmod+2
  2269  000E38  C0B0  F012         	movff	sprintf@_val+3,?___llmod+3
  2270  000E3C  0100               	movlb	0	; () banked
  2271  000E3E  0100               	movlb	0	; () banked
  2272  000E40  51B9               	movf	sprintf@c& (0+255),w,b
  2273  000E42  0D04               	mullw	4
  2274  000E44  0E00               	movlw	low _dpowers
  2275  000E46  24F3               	addwf	prodl,w,c
  2276  000E48  6EF6               	movwf	tblptrl,c
  2277  000E4A  0E06               	movlw	high _dpowers
  2278  000E4C  20F4               	addwfc	prodh,w,c
  2279  000E4E  6EF7               	movwf	tblptrh,c
  2280  000E50  0009               	tblrd		*+
  2281  000E52  CFF5 F013          	movff	tablat,?___llmod+4
  2282  000E56  0009               	tblrd		*+
  2283  000E58  CFF5 F014          	movff	tablat,?___llmod+5
  2284  000E5C  0009               	tblrd		*+
  2285  000E5E  CFF5 F015          	movff	tablat,?___llmod+6
  2286  000E62  000A               	tblrd		*-
  2287  000E64  CFF5 F016          	movff	tablat,?___llmod+7
  2288  000E68  ECB2  F015         	call	___llmod	;wreg free
  2289  000E6C  C012  F0B0         	movff	?___llmod+3,sprintf@_val+3
  2290  000E70  C011  F0AF         	movff	?___llmod+2,sprintf@_val+2
  2291  000E74  C010  F0AE         	movff	?___llmod+1,sprintf@_val+1
  2292  000E78  C00F  F0AD         	movff	?___llmod,sprintf@_val
  2293  000E7C                     l5103:
  2294  000E7C  0100               	movlb	0	; () banked
  2295  000E7E  0100               	movlb	0	; () banked
  2296  000E80  07B9               	decf	sprintf@c& (0+255),f,b
  2297  000E82  0100               	movlb	0	; () banked
  2298  000E84  29B9               	incf	sprintf@c& (0+255),w,b
  2299  000E86  B4D8               	btfsc	status,2,c
  2300  000E88  D010               	goto	l5111
  2301  000E8A  D786               	goto	l170
  2302  000E8C                     l5105:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;doprnt.c: 1021: ((*sp++ = ('0')));
  2306  000E8C  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2307  000E90  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2308  000E94  0E30               	movlw	48
  2309  000E96  6EDF               	movwf	indf2,c
  2310                           
  2311                           ; BSR set to: 0
  2312  000E98  0100               	movlb	0	; () banked
  2313  000E9A  0100               	movlb	0	; () banked
  2314  000E9C  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2315  000E9E  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;doprnt.c: 1022: prec--;
  2319  000EA0  0100               	movlb	0	; () banked
  2320  000EA2  0100               	movlb	0	; () banked
  2321  000EA4  07B4               	decf	sprintf@prec& (0+255),f,b
  2322  000EA6  A0D8               	btfss	status,0,c
  2323  000EA8  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  2324  000EAA                     l5111:
  2325                           
  2326                           ; BSR set to: 0
  2327  000EAA  0100               	movlb	0	; () banked
  2328  000EAC  0100               	movlb	0	; () banked
  2329  000EAE  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2330  000EB0  11B4               	iorwf	sprintf@prec& (0+255),w,b
  2331  000EB2  A4D8               	btfss	status,2,c
  2332  000EB4  D7EB               	goto	l5105
  2333  000EB6                     l5113:
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;doprnt.c: 1023: }
  2337                           ;doprnt.c: 1024: }
  2338                           ;doprnt.c: 1030: ((*sp++ = ('e')));
  2339  000EB6  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2340  000EBA  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2341  000EBE  0E65               	movlw	101
  2342  000EC0  6EDF               	movwf	indf2,c
  2343                           
  2344                           ; BSR set to: 0
  2345  000EC2  0100               	movlb	0	; () banked
  2346  000EC4  0100               	movlb	0	; () banked
  2347  000EC6  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2348  000EC8  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;doprnt.c: 1031: if(exp < 0) {
  2352  000ECA  0100               	movlb	0	; () banked
  2353  000ECC  0100               	movlb	0	; () banked
  2354  000ECE  AFB3               	btfss	(sprintf@exp+1)& (0+255),7,b
  2355  000ED0  D00D               	goto	l5125
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;doprnt.c: 1032: exp = -exp;
  2359  000ED2  0100               	movlb	0	; () banked
  2360  000ED4  0100               	movlb	0	; () banked
  2361  000ED6  6DB2               	negf	sprintf@exp& (0+255),b
  2362  000ED8  0100               	movlb	0	; () banked
  2363  000EDA  1FB3               	comf	(sprintf@exp+1)& (0+255),f,b
  2364  000EDC  B0D8               	btfsc	status,0,c
  2365  000EDE  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;doprnt.c: 1033: ((*sp++ = ('-')));
  2369  000EE0  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2370  000EE4  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2371  000EE8  0E2D               	movlw	45
  2372  000EEA  D005               	goto	L2
  2373  000EEC                     l5125:
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;doprnt.c: 1035: ((*sp++ = ('+')));
  2377  000EEC  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2378  000EF0  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2379  000EF4  0E2B               	movlw	43
  2380  000EF6                     L2:
  2381  000EF6  6EDF               	movwf	indf2,c
  2382                           
  2383                           ; BSR set to: 0
  2384  000EF8  0100               	movlb	0	; () banked
  2385  000EFA  0100               	movlb	0	; () banked
  2386  000EFC  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2387  000EFE  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;doprnt.c: 1048: ((*sp++ = (exp / 10 + '0')));
  2391                           
  2392                           ; BSR set to: 0
  2393  000F00  C0B2  F016         	movff	sprintf@exp,?___awdiv
  2394  000F04  C0B3  F017         	movff	sprintf@exp+1,?___awdiv+1
  2395  000F08  0E00               	movlw	0
  2396  000F0A  6E19               	movwf	?___awdiv+3,c
  2397  000F0C  0E0A               	movlw	10
  2398  000F0E  6E18               	movwf	?___awdiv+2,c
  2399  000F10  ECA6  F014         	call	___awdiv	;wreg free
  2400  000F14  5016               	movf	?___awdiv,w,c
  2401  000F16  0F30               	addlw	48
  2402  000F18  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2403  000F1C  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2404  000F20  6EDF               	movwf	indf2,c
  2405  000F22  0100               	movlb	0	; () banked
  2406  000F24  0100               	movlb	0	; () banked
  2407  000F26  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2408  000F28  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;doprnt.c: 1049: ((*sp++ = (exp % 10 + '0')));
  2412  000F2A  C0B2  F00F         	movff	sprintf@exp,?___awmod
  2413  000F2E  C0B3  F010         	movff	sprintf@exp+1,?___awmod+1
  2414  000F32  0E00               	movlw	0
  2415  000F34  6E12               	movwf	?___awmod+3,c
  2416  000F36  0E0A               	movlw	10
  2417  000F38  6E11               	movwf	?___awmod+2,c
  2418  000F3A  EC74  F015         	call	___awmod	;wreg free
  2419  000F3E  500F               	movf	?___awmod,w,c
  2420  000F40  0F30               	addlw	48
  2421  000F42  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2422  000F46  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2423  000F4A  D3C9               	goto	L3
  2424  000F4C                     l156:
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;doprnt.c: 1057: }
  2428                           ;doprnt.c: 1096: if(flag & 0x200) {
  2429  000F4C  0100               	movlb	0	; () banked
  2430  000F4E  0100               	movlb	0	; () banked
  2431  000F50  A3AC               	btfss	(sprintf@flag+1)& (0+255),1,b
  2432  000F52  D10F               	goto	l5173
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;doprnt.c: 1097: if(exp < 0)
  2436  000F54  0100               	movlb	0	; () banked
  2437  000F56  0100               	movlb	0	; () banked
  2438  000F58  AFB3               	btfss	(sprintf@exp+1)& (0+255),7,b
  2439  000F5A  D016               	goto	l5141
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;doprnt.c: 1098: prec -= (exp+1);
  2443  000F5C  0E01               	movlw	1
  2444  000F5E  0100               	movlb	0	; () banked
  2445  000F60  0100               	movlb	0	; () banked
  2446  000F62  25B2               	addwf	sprintf@exp& (0+255),w,b
  2447  000F64  0100               	movlb	0	; () banked
  2448  000F66  6F92               	movwf	??_sprintf& (0+255),b
  2449  000F68  0E00               	movlw	0
  2450  000F6A  0100               	movlb	0	; () banked
  2451  000F6C  0100               	movlb	0	; () banked
  2452  000F6E  21B3               	addwfc	(sprintf@exp+1)& (0+255),w,b
  2453  000F70  0100               	movlb	0	; () banked
  2454  000F72  6F93               	movwf	(??_sprintf+1)& (0+255),b
  2455  000F74  0100               	movlb	0	; () banked
  2456  000F76  5192               	movf	??_sprintf& (0+255),w,b
  2457  000F78  0100               	movlb	0	; () banked
  2458  000F7A  0100               	movlb	0	; () banked
  2459  000F7C  5FB4               	subwf	sprintf@prec& (0+255),f,b
  2460  000F7E  0100               	movlb	0	; () banked
  2461  000F80  5193               	movf	(??_sprintf+1)& (0+255),w,b
  2462  000F82  0100               	movlb	0	; () banked
  2463  000F84  0100               	movlb	0	; () banked
  2464  000F86  5BB5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2465  000F88                     l5141:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;doprnt.c: 1100: _val._val = (unsigned long)fval;
  2469  000F88  C0B6  F042         	movff	sprintf@fval,?___fttol
  2470  000F8C  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  2471  000F90  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  2472  000F94  EC86  F013         	call	___fttol	;wreg free
  2473  000F98  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  2474  000F9C  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  2475  000FA0  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  2476  000FA4  C042  F0AD         	movff	?___fttol,sprintf@_val
  2477                           
  2478                           ;doprnt.c: 1101: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2479  000FA8  0100               	movlb	0	; () banked
  2480  000FAA  6F92               	movwf	??_sprintf& (0+255),b
  2481  000FAC  0E00               	movlw	0
  2482  000FAE  0100               	movlb	0	; () banked
  2483  000FB0  0100               	movlb	0	; () banked
  2484  000FB2  6FB9               	movwf	sprintf@c& (0+255),b
  2485  000FB4  0100               	movlb	0	; () banked
  2486  000FB6  5192               	movf	??_sprintf& (0+255),w,b
  2487  000FB8                     
  2488                           ; BSR set to: 0
  2489  000FB8  0100               	movlb	0	; () banked
  2490  000FBA  0100               	movlb	0	; () banked
  2491  000FBC  51B9               	movf	sprintf@c& (0+255),w,b
  2492  000FBE  0A0A               	xorlw	10
  2493  000FC0  B4D8               	btfsc	status,2,c
  2494  000FC2  D021               	goto	l5157
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;doprnt.c: 1102: if(_val._val < dpowers[c])
  2498                           
  2499                           ; BSR set to: 0
  2500                           
  2501                           ; BSR set to: 0
  2502  000FC4  0100               	movlb	0	; () banked
  2503  000FC6  0100               	movlb	0	; () banked
  2504  000FC8  51B9               	movf	sprintf@c& (0+255),w,b
  2505  000FCA  0D04               	mullw	4
  2506  000FCC  0E00               	movlw	low _dpowers
  2507  000FCE  24F3               	addwf	prodl,w,c
  2508  000FD0  6EF6               	movwf	tblptrl,c
  2509  000FD2  0E06               	movlw	high _dpowers
  2510  000FD4  20F4               	addwfc	prodh,w,c
  2511  000FD6  6EF7               	movwf	tblptrh,c
  2512  000FD8  0009               	tblrd		*+
  2513  000FDA  50F5               	movf	tablat,w,c
  2514  000FDC  0100               	movlb	0	; () banked
  2515  000FDE  0100               	movlb	0	; () banked
  2516  000FE0  5DAD               	subwf	sprintf@_val& (0+255),w,b
  2517  000FE2  0009               	tblrd		*+
  2518  000FE4  50F5               	movf	tablat,w,c
  2519  000FE6  0100               	movlb	0	; () banked
  2520  000FE8  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2521  000FEA  0009               	tblrd		*+
  2522  000FEC  50F5               	movf	tablat,w,c
  2523  000FEE  0100               	movlb	0	; () banked
  2524  000FF0  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2525  000FF2  0009               	tblrd		*+
  2526  000FF4  50F5               	movf	tablat,w,c
  2527  000FF6  0100               	movlb	0	; () banked
  2528  000FF8  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2529  000FFA  A0D8               	btfss	status,0,c
  2530  000FFC  D004               	goto	l5157
  2531                           
  2532                           ; BSR set to: 0
  2533                           
  2534                           ; BSR set to: 0
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;doprnt.c: 1103: break;
  2538  000FFE  0100               	movlb	0	; () banked
  2539  001000  0100               	movlb	0	; () banked
  2540  001002  2BB9               	incf	sprintf@c& (0+255),f,b
  2541  001004  D7D9               	goto	L4
  2542  001006                     l5157:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;doprnt.c: 1104: prec -= c;
  2546  001006  0100               	movlb	0	; () banked
  2547  001008  0100               	movlb	0	; () banked
  2548  00100A  51B9               	movf	sprintf@c& (0+255),w,b
  2549  00100C  0100               	movlb	0	; () banked
  2550  00100E  0100               	movlb	0	; () banked
  2551  001010  5FB4               	subwf	sprintf@prec& (0+255),f,b
  2552  001012  0E00               	movlw	0
  2553  001014  0100               	movlb	0	; () banked
  2554  001016  BFB9               	btfsc	sprintf@c& (0+255),7,b
  2555  001018  0EFF               	movlw	255
  2556  00101A  0100               	movlb	0	; () banked
  2557  00101C  0100               	movlb	0	; () banked
  2558  00101E  5BB5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2559                           
  2560                           ;doprnt.c: 1105: if(prec <= 12)
  2561  001020  0100               	movlb	0	; () banked
  2562  001022  0100               	movlb	0	; () banked
  2563  001024  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2564  001026  0A80               	xorlw	128
  2565  001028  0F80               	addlw	-128
  2566  00102A  0E0D               	movlw	13
  2567  00102C  B4D8               	btfsc	status,2,c
  2568  00102E  5DB4               	subwf	sprintf@prec& (0+255),w,b
  2569  001030  B0D8               	btfsc	status,0,c
  2570  001032  D015               	goto	l5161
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;doprnt.c: 1106: fval += fround(prec);
  2574  001034  0100               	movlb	0	; () banked
  2575  001036  0E00               	movlw	high sprintf@fval
  2576  001038  0100               	movlb	0	; () banked
  2577  00103A  0100               	movlb	0	; () banked
  2578  00103C  6F81               	movwf	(?___asftadd+1)& (0+255),b
  2579  00103E  0100               	movlb	0	; () banked
  2580  001040  0EB6               	movlw	low sprintf@fval
  2581  001042  0100               	movlb	0	; () banked
  2582  001044  6F80               	movwf	?___asftadd& (0+255),b
  2583  001046  C0B4  F036         	movff	sprintf@prec,?_fround
  2584  00104A  ECB5  F00D         	call	_fround	;wreg free
  2585  00104E  C038  F084         	movff	?_fround+2,?___asftadd+4
  2586  001052  C037  F083         	movff	?_fround+1,?___asftadd+3
  2587  001056  C036  F082         	movff	?_fround,?___asftadd+2
  2588  00105A  ECEC  F016         	call	___asftadd	;wreg free
  2589  00105E                     l5161:
  2590                           
  2591                           ;doprnt.c: 1109: {
  2592                           ;doprnt.c: 1110: double temp;
  2593                           ;doprnt.c: 1111: temp = scale(prec);
  2594  00105E  C0B4  F036         	movff	sprintf@prec,?_scale
  2595  001062  EC8D  F00B         	call	_scale	;wreg free
  2596  001066  C038  F0A7         	movff	?_scale+2,sprintf@temp+2
  2597  00106A  C037  F0A6         	movff	?_scale+1,sprintf@temp+1
  2598  00106E  C036  F0A5         	movff	?_scale,sprintf@temp
  2599                           
  2600                           ;doprnt.c: 1112: temp *= fval - (double)_val._val;
  2601  001072  0100               	movlb	0	; () banked
  2602  001074  0E00               	movlw	high sprintf@temp
  2603  001076  0100               	movlb	0	; () banked
  2604  001078  0100               	movlb	0	; () banked
  2605  00107A  6F81               	movwf	(?___asftmul+1)& (0+255),b
  2606  00107C  0100               	movlb	0	; () banked
  2607  00107E  0EA5               	movlw	low sprintf@temp
  2608  001080  0100               	movlb	0	; () banked
  2609  001082  6F80               	movwf	?___asftmul& (0+255),b
  2610  001084  C0B6  F060         	movff	sprintf@fval,?___ftadd+3
  2611  001088  C0B7  F061         	movff	sprintf@fval+1,?___ftadd+4
  2612  00108C  C0B8  F062         	movff	sprintf@fval+2,?___ftadd+5
  2613  001090  C0AD  F051         	movff	sprintf@_val,?___lltoft
  2614  001094  C0AE  F052         	movff	sprintf@_val+1,?___lltoft+1
  2615  001098  C0AF  F053         	movff	sprintf@_val+2,?___lltoft+2
  2616  00109C  C0B0  F054         	movff	sprintf@_val+3,?___lltoft+3
  2617  0010A0  ECE7  F015         	call	___lltoft	;wreg free
  2618  0010A4  C053  F05C         	movff	?___lltoft+2,?___ftneg+2
  2619  0010A8  C052  F05B         	movff	?___lltoft+1,?___ftneg+1
  2620  0010AC  C051  F05A         	movff	?___lltoft,?___ftneg
  2621  0010B0  EC52  F017         	call	___ftneg	;wreg free
  2622  0010B4  C05C  F05F         	movff	?___ftneg+2,?___ftadd+2
  2623  0010B8  C05B  F05E         	movff	?___ftneg+1,?___ftadd+1
  2624  0010BC  C05A  F05D         	movff	?___ftneg,?___ftadd
  2625  0010C0  ECF5  F00E         	call	___ftadd	;wreg free
  2626  0010C4  C05F  F084         	movff	?___ftadd+2,?___asftmul+4
  2627  0010C8  C05E  F083         	movff	?___ftadd+1,?___asftmul+3
  2628  0010CC  C05D  F082         	movff	?___ftadd,?___asftmul+2
  2629  0010D0  ECB0  F016         	call	___asftmul	;wreg free
  2630                           
  2631                           ;doprnt.c: 1113: _val._val = (unsigned long)temp;
  2632  0010D4  C0A5  F042         	movff	sprintf@temp,?___fttol
  2633  0010D8  C0A6  F043         	movff	sprintf@temp+1,?___fttol+1
  2634  0010DC  C0A7  F044         	movff	sprintf@temp+2,?___fttol+2
  2635  0010E0  EC86  F013         	call	___fttol	;wreg free
  2636  0010E4  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  2637  0010E8  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  2638  0010EC  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  2639  0010F0  C042  F0AD         	movff	?___fttol,sprintf@_val
  2640                           
  2641                           ;doprnt.c: 1114: }
  2642                           ;doprnt.c: 1115: while(prec && _val._val % 10 == 0) {
  2643  0010F4  D01F               	goto	l5169
  2644  0010F6                     l5165:
  2645                           
  2646                           ;doprnt.c: 1116: _val._val /= 10;
  2647  0010F6  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  2648  0010FA  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  2649  0010FE  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  2650  001102  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  2651  001106  0E0A               	movlw	10
  2652  001108  6E13               	movwf	?___lldiv+4,c
  2653  00110A  0E00               	movlw	0
  2654  00110C  6E14               	movwf	?___lldiv+5,c
  2655  00110E  0E00               	movlw	0
  2656  001110  6E15               	movwf	?___lldiv+6,c
  2657  001112  0E00               	movlw	0
  2658  001114  6E16               	movwf	?___lldiv+7,c
  2659  001116  ECEE  F014         	call	___lldiv	;wreg free
  2660  00111A  C012  F0B0         	movff	?___lldiv+3,sprintf@_val+3
  2661  00111E  C011  F0AF         	movff	?___lldiv+2,sprintf@_val+2
  2662  001122  C010  F0AE         	movff	?___lldiv+1,sprintf@_val+1
  2663  001126  C00F  F0AD         	movff	?___lldiv,sprintf@_val
  2664                           
  2665                           ;doprnt.c: 1117: prec--;
  2666  00112A  0100               	movlb	0	; () banked
  2667  00112C  0100               	movlb	0	; () banked
  2668  00112E  07B4               	decf	sprintf@prec& (0+255),f,b
  2669  001130  A0D8               	btfss	status,0,c
  2670  001132  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  2671  001134                     l5169:
  2672  001134  0100               	movlb	0	; () banked
  2673  001136  0100               	movlb	0	; () banked
  2674  001138  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2675  00113A  11B4               	iorwf	sprintf@prec& (0+255),w,b
  2676  00113C  B4D8               	btfsc	status,2,c
  2677  00113E  D038               	goto	l5177
  2678                           
  2679                           ; BSR set to: 0
  2680  001140  C0AD  F00F         	movff	sprintf@_val,?___llmod
  2681  001144  C0AE  F010         	movff	sprintf@_val+1,?___llmod+1
  2682  001148  C0AF  F011         	movff	sprintf@_val+2,?___llmod+2
  2683  00114C  C0B0  F012         	movff	sprintf@_val+3,?___llmod+3
  2684  001150  0E0A               	movlw	10
  2685  001152  6E13               	movwf	?___llmod+4,c
  2686  001154  0E00               	movlw	0
  2687  001156  6E14               	movwf	?___llmod+5,c
  2688  001158  0E00               	movlw	0
  2689  00115A  6E15               	movwf	?___llmod+6,c
  2690  00115C  0E00               	movlw	0
  2691  00115E  6E16               	movwf	?___llmod+7,c
  2692  001160  ECB2  F015         	call	___llmod	;wreg free
  2693  001164  5012               	movf	?___llmod+3,w,c
  2694  001166  100F               	iorwf	?___llmod,w,c
  2695  001168  1010               	iorwf	?___llmod+1,w,c
  2696  00116A  1011               	iorwf	?___llmod+2,w,c
  2697  00116C  A4D8               	btfss	status,2,c
  2698  00116E  D020               	goto	l5177
  2699  001170  D7C2               	goto	l5165
  2700  001172                     l5173:
  2701                           
  2702                           ;doprnt.c: 1121: if(prec <= 12)
  2703  001172  0100               	movlb	0	; () banked
  2704  001174  0100               	movlb	0	; () banked
  2705  001176  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2706  001178  0A80               	xorlw	128
  2707  00117A  0F80               	addlw	-128
  2708  00117C  0E0D               	movlw	13
  2709  00117E  B4D8               	btfsc	status,2,c
  2710  001180  5DB4               	subwf	sprintf@prec& (0+255),w,b
  2711  001182  B0D8               	btfsc	status,0,c
  2712  001184  D015               	goto	l5177
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;doprnt.c: 1122: fval += fround(prec);
  2716  001186  0100               	movlb	0	; () banked
  2717  001188  0E00               	movlw	high sprintf@fval
  2718  00118A  0100               	movlb	0	; () banked
  2719  00118C  0100               	movlb	0	; () banked
  2720  00118E  6F81               	movwf	(?___asftadd+1)& (0+255),b
  2721  001190  0100               	movlb	0	; () banked
  2722  001192  0EB6               	movlw	low sprintf@fval
  2723  001194  0100               	movlb	0	; () banked
  2724  001196  6F80               	movwf	?___asftadd& (0+255),b
  2725  001198  C0B4  F036         	movff	sprintf@prec,?_fround
  2726  00119C  ECB5  F00D         	call	_fround	;wreg free
  2727  0011A0  C038  F084         	movff	?_fround+2,?___asftadd+4
  2728  0011A4  C037  F083         	movff	?_fround+1,?___asftadd+3
  2729  0011A8  C036  F082         	movff	?_fround,?___asftadd+2
  2730  0011AC  ECEC  F016         	call	___asftadd	;wreg free
  2731  0011B0                     l5177:
  2732                           
  2733                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2734  0011B0  0100               	movlb	0	; () banked
  2735  0011B2  0100               	movlb	0	; () banked
  2736  0011B4  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  2737  0011B6  0A80               	xorlw	128
  2738  0011B8  0F80               	addlw	-128
  2739  0011BA  0E0A               	movlw	10
  2740  0011BC  B4D8               	btfsc	status,2,c
  2741  0011BE  5DB2               	subwf	sprintf@exp& (0+255),w,b
  2742  0011C0  B0D8               	btfsc	status,0,c
  2743  0011C2  D022               	goto	l5185
  2744                           
  2745                           ; BSR set to: 0
  2746  0011C4  0E7F               	movlw	127
  2747  0011C6  0100               	movlb	0	; () banked
  2748  0011C8  0100               	movlb	0	; () banked
  2749  0011CA  15B8               	andwf	(sprintf@fval+2)& (0+255),w,b
  2750  0011CC  0100               	movlb	0	; () banked
  2751  0011CE  11B7               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2752  0011D0  0100               	movlb	0	; () banked
  2753  0011D2  11B6               	iorwf	sprintf@fval& (0+255),w,b
  2754  0011D4  B4D8               	btfsc	status,2,c
  2755  0011D6  D06D               	goto	l5201
  2756                           
  2757                           ; BSR set to: 0
  2758  0011D8  C0B6  F042         	movff	sprintf@fval,?___fttol
  2759  0011DC  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  2760  0011E0  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  2761  0011E4  EC86  F013         	call	___fttol	;wreg free
  2762  0011E8  5045               	movf	?___fttol+3,w,c
  2763  0011EA  1042               	iorwf	?___fttol,w,c
  2764  0011EC  1043               	iorwf	?___fttol+1,w,c
  2765  0011EE  1044               	iorwf	?___fttol+2,w,c
  2766  0011F0  A4D8               	btfss	status,2,c
  2767  0011F2  D05F               	goto	l5201
  2768  0011F4  0100               	movlb	0	; () banked
  2769  0011F6  0100               	movlb	0	; () banked
  2770  0011F8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  2771  0011FA  0A80               	xorlw	128
  2772  0011FC  0F80               	addlw	-128
  2773  0011FE  0E02               	movlw	2
  2774  001200  B4D8               	btfsc	status,2,c
  2775  001202  5DB2               	subwf	sprintf@exp& (0+255),w,b
  2776  001204  A0D8               	btfss	status,0,c
  2777  001206  D055               	goto	l5201
  2778  001208                     l5185:
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2782  001208  C0A8  F080         	movff	sprintf@integ,?___ftge
  2783  00120C  C0A9  F081         	movff	sprintf@integ+1,?___ftge+1
  2784  001210  C0AA  F082         	movff	sprintf@integ+2,?___ftge+2
  2785  001214  0E70               	movlw	112
  2786  001216  0100               	movlb	0	; () banked
  2787  001218  0100               	movlb	0	; () banked
  2788  00121A  6F83               	movwf	(?___ftge+3)& (0+255),b
  2789  00121C  0E89               	movlw	137
  2790  00121E  0100               	movlb	0	; () banked
  2791  001220  0100               	movlb	0	; () banked
  2792  001222  6F84               	movwf	(?___ftge+4)& (0+255),b
  2793  001224  0E40               	movlw	64
  2794  001226  0100               	movlb	0	; () banked
  2795  001228  0100               	movlb	0	; () banked
  2796  00122A  6F85               	movwf	(?___ftge+5)& (0+255),b
  2797  00122C  EC14  F013         	call	___ftge	;wreg free
  2798  001230  B0D8               	btfsc	status,0,c
  2799  001232  D003               	goto	l5189
  2800                           
  2801                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2802  001234  0100               	movlb	0	; () banked
  2803  001236  0EF7               	movlw	247
  2804  001238  D002               	goto	L5
  2805  00123A                     l5189:
  2806                           
  2807                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2808  00123A  0100               	movlb	0	; () banked
  2809  00123C  0EF8               	movlw	248
  2810  00123E                     L5:
  2811  00123E  0100               	movlb	0	; () banked
  2812  001240  27B2               	addwf	sprintf@exp& (0+255),f,b
  2813  001242  0EFF               	movlw	255
  2814  001244  0100               	movlb	0	; () banked
  2815  001246  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;doprnt.c: 1133: }
  2819                           ;doprnt.c: 1134: integ = scale(exp);
  2820                           
  2821                           ; BSR set to: 0
  2822  001248  C0B2  F036         	movff	sprintf@exp,?_scale
  2823  00124C  EC8D  F00B         	call	_scale	;wreg free
  2824  001250  C038  F0AA         	movff	?_scale+2,sprintf@integ+2
  2825  001254  C037  F0A9         	movff	?_scale+1,sprintf@integ+1
  2826  001258  C036  F0A8         	movff	?_scale,sprintf@integ
  2827                           
  2828                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2829  00125C  C0B6  F00F         	movff	sprintf@fval,?__tdiv_to_l_
  2830  001260  C0B7  F010         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  2831  001264  C0B8  F011         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  2832  001268  C0A8  F012         	movff	sprintf@integ,?__tdiv_to_l_+3
  2833  00126C  C0A9  F013         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  2834  001270  C0AA  F014         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  2835  001274  EC8A  F010         	call	__tdiv_to_l_	;wreg free
  2836  001278  C012  F09E         	movff	?__tdiv_to_l_+3,_sprintf$526+3
  2837  00127C  C011  F09D         	movff	?__tdiv_to_l_+2,_sprintf$526+2
  2838  001280  C010  F09C         	movff	?__tdiv_to_l_+1,_sprintf$526+1
  2839  001284  C00F  F09B         	movff	?__tdiv_to_l_,_sprintf$526
  2840  001288  C09B  F0AD         	movff	_sprintf$526,sprintf@_val
  2841  00128C  C09C  F0AE         	movff	_sprintf$526+1,sprintf@_val+1
  2842  001290  C09D  F0AF         	movff	_sprintf$526+2,sprintf@_val+2
  2843  001294  C09E  F0B0         	movff	_sprintf$526+3,sprintf@_val+3
  2844                           
  2845                           ;doprnt.c: 1138: fval = 0.0;
  2846  001298  0E00               	movlw	0
  2847  00129A  0100               	movlb	0	; () banked
  2848  00129C  0100               	movlb	0	; () banked
  2849  00129E  6FB6               	movwf	sprintf@fval& (0+255),b
  2850  0012A0  0E00               	movlw	0
  2851  0012A2  0100               	movlb	0	; () banked
  2852  0012A4  0100               	movlb	0	; () banked
  2853  0012A6  6FB7               	movwf	(sprintf@fval+1)& (0+255),b
  2854  0012A8  0E00               	movlw	0
  2855  0012AA  0100               	movlb	0	; () banked
  2856  0012AC  0100               	movlb	0	; () banked
  2857  0012AE  6FB8               	movwf	(sprintf@fval+2)& (0+255),b
  2858                           
  2859                           ;doprnt.c: 1139: } else {
  2860  0012B0  D032               	goto	l5207
  2861  0012B2                     l5201:
  2862                           
  2863                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2864  0012B2  C0B6  F042         	movff	sprintf@fval,?___fttol
  2865  0012B6  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  2866  0012BA  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  2867  0012BE  EC86  F013         	call	___fttol	;wreg free
  2868  0012C2  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  2869  0012C6  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  2870  0012CA  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  2871  0012CE  C042  F0AD         	movff	?___fttol,sprintf@_val
  2872                           
  2873                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2874  0012D2  0100               	movlb	0	; () banked
  2875  0012D4  0E00               	movlw	high sprintf@fval
  2876  0012D6  0100               	movlb	0	; () banked
  2877  0012D8  0100               	movlb	0	; () banked
  2878  0012DA  6F87               	movwf	(?___asftsub+1)& (0+255),b
  2879  0012DC  0100               	movlb	0	; () banked
  2880  0012DE  0EB6               	movlw	low sprintf@fval
  2881  0012E0  0100               	movlb	0	; () banked
  2882  0012E2  6F86               	movwf	?___asftsub& (0+255),b
  2883  0012E4  C0AD  F051         	movff	sprintf@_val,?___lltoft
  2884  0012E8  C0AE  F052         	movff	sprintf@_val+1,?___lltoft+1
  2885  0012EC  C0AF  F053         	movff	sprintf@_val+2,?___lltoft+2
  2886  0012F0  C0B0  F054         	movff	sprintf@_val+3,?___lltoft+3
  2887  0012F4  ECE7  F015         	call	___lltoft	;wreg free
  2888  0012F8  C053  F08A         	movff	?___lltoft+2,?___asftsub+4
  2889  0012FC  C052  F089         	movff	?___lltoft+1,?___asftsub+3
  2890  001300  C051  F088         	movff	?___lltoft,?___asftsub+2
  2891  001304  EC6E  F016         	call	___asftsub	;wreg free
  2892                           
  2893                           ;doprnt.c: 1142: exp = 0;
  2894  001308  0E00               	movlw	0
  2895  00130A  0100               	movlb	0	; () banked
  2896  00130C  0100               	movlb	0	; () banked
  2897  00130E  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  2898  001310  0E00               	movlw	0
  2899  001312  0100               	movlb	0	; () banked
  2900  001314  6FB2               	movwf	sprintf@exp& (0+255),b
  2901  001316                     l5207:
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;doprnt.c: 1143: }
  2905                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2906  001316  0100               	movlb	0	; () banked
  2907  001318  6F92               	movwf	??_sprintf& (0+255),b
  2908  00131A  0E01               	movlw	1
  2909  00131C  0100               	movlb	0	; () banked
  2910  00131E  0100               	movlb	0	; () banked
  2911  001320  6FB9               	movwf	sprintf@c& (0+255),b
  2912  001322  0100               	movlb	0	; () banked
  2913  001324  5192               	movf	??_sprintf& (0+255),w,b
  2914  001326                     
  2915                           ; BSR set to: 0
  2916  001326  0100               	movlb	0	; () banked
  2917  001328  0100               	movlb	0	; () banked
  2918  00132A  51B9               	movf	sprintf@c& (0+255),w,b
  2919  00132C  0A0A               	xorlw	10
  2920  00132E  B4D8               	btfsc	status,2,c
  2921  001330  D021               	goto	l5221
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2925                           
  2926                           ; BSR set to: 0
  2927                           
  2928                           ; BSR set to: 0
  2929  001332  0100               	movlb	0	; () banked
  2930  001334  0100               	movlb	0	; () banked
  2931  001336  51B9               	movf	sprintf@c& (0+255),w,b
  2932  001338  0D04               	mullw	4
  2933  00133A  0E00               	movlw	low _dpowers
  2934  00133C  24F3               	addwf	prodl,w,c
  2935  00133E  6EF6               	movwf	tblptrl,c
  2936  001340  0E06               	movlw	high _dpowers
  2937  001342  20F4               	addwfc	prodh,w,c
  2938  001344  6EF7               	movwf	tblptrh,c
  2939  001346  0009               	tblrd		*+
  2940  001348  50F5               	movf	tablat,w,c
  2941  00134A  0100               	movlb	0	; () banked
  2942  00134C  0100               	movlb	0	; () banked
  2943  00134E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  2944  001350  0009               	tblrd		*+
  2945  001352  50F5               	movf	tablat,w,c
  2946  001354  0100               	movlb	0	; () banked
  2947  001356  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2948  001358  0009               	tblrd		*+
  2949  00135A  50F5               	movf	tablat,w,c
  2950  00135C  0100               	movlb	0	; () banked
  2951  00135E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2952  001360  0009               	tblrd		*+
  2953  001362  50F5               	movf	tablat,w,c
  2954  001364  0100               	movlb	0	; () banked
  2955  001366  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2956  001368  A0D8               	btfss	status,0,c
  2957  00136A  D004               	goto	l5221
  2958                           
  2959                           ; BSR set to: 0
  2960                           
  2961                           ; BSR set to: 0
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;doprnt.c: 1147: break;
  2965  00136C  0100               	movlb	0	; () banked
  2966  00136E  0100               	movlb	0	; () banked
  2967  001370  2BB9               	incf	sprintf@c& (0+255),f,b
  2968  001372  D7D9               	goto	L6
  2969  001374                     l5221:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;doprnt.c: 1182: {
  2973                           ;doprnt.c: 1195: if(flag & 0x03)
  2974  001374  0E03               	movlw	3
  2975  001376  0100               	movlb	0	; () banked
  2976  001378  0100               	movlb	0	; () banked
  2977  00137A  15AB               	andwf	sprintf@flag& (0+255),w,b
  2978  00137C  0100               	movlb	0	; () banked
  2979  00137E  6F92               	movwf	??_sprintf& (0+255),b
  2980  001380  0E00               	movlw	0
  2981  001382  0100               	movlb	0	; () banked
  2982  001384  0100               	movlb	0	; () banked
  2983  001386  15AC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2984  001388  0100               	movlb	0	; () banked
  2985  00138A  6F93               	movwf	(??_sprintf+1)& (0+255),b
  2986  00138C  0100               	movlb	0	; () banked
  2987  00138E  5193               	movf	(??_sprintf+1)& (0+255),w,b
  2988  001390  1192               	iorwf	??_sprintf& (0+255),w,b
  2989  001392  B4D8               	btfsc	status,2,c
  2990  001394  D045               	goto	l5235
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  2994  001396  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2995  00139A  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2996  00139E  0E2D               	movlw	45
  2997  0013A0  D03A               	goto	L7
  2998  0013A2                     l5227:
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;doprnt.c: 1207: {
  3002                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  3003  0013A2  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  3004  0013A6  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  3005  0013AA  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  3006  0013AE  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  3007  0013B2  0100               	movlb	0	; () banked
  3008  0013B4  0100               	movlb	0	; () banked
  3009  0013B6  51B9               	movf	sprintf@c& (0+255),w,b
  3010  0013B8  0D04               	mullw	4
  3011  0013BA  0E00               	movlw	low _dpowers
  3012  0013BC  24F3               	addwf	prodl,w,c
  3013  0013BE  6EF6               	movwf	tblptrl,c
  3014  0013C0  0E06               	movlw	high _dpowers
  3015  0013C2  20F4               	addwfc	prodh,w,c
  3016  0013C4  6EF7               	movwf	tblptrh,c
  3017  0013C6  0009               	tblrd		*+
  3018  0013C8  CFF5 F013          	movff	tablat,?___lldiv+4
  3019  0013CC  0009               	tblrd		*+
  3020  0013CE  CFF5 F014          	movff	tablat,?___lldiv+5
  3021  0013D2  0009               	tblrd		*+
  3022  0013D4  CFF5 F015          	movff	tablat,?___lldiv+6
  3023  0013D8  000A               	tblrd		*-
  3024  0013DA  CFF5 F016          	movff	tablat,?___lldiv+7
  3025  0013DE  ECEE  F014         	call	___lldiv	;wreg free
  3026  0013E2  C00F  F0A1         	movff	?___lldiv,sprintf@vd
  3027  0013E6  C010  F0A2         	movff	?___lldiv+1,sprintf@vd+1
  3028                           
  3029                           ;doprnt.c: 1209: vd %= 10;
  3030  0013EA  C0A1  F00F         	movff	sprintf@vd,?___lwmod
  3031  0013EE  C0A2  F010         	movff	sprintf@vd+1,?___lwmod+1
  3032  0013F2  0E00               	movlw	0
  3033  0013F4  6E12               	movwf	?___lwmod+3,c
  3034  0013F6  0E0A               	movlw	10
  3035  0013F8  6E11               	movwf	?___lwmod+2,c
  3036  0013FA  EC4B  F016         	call	___lwmod	;wreg free
  3037  0013FE  C00F  F0A1         	movff	?___lwmod,sprintf@vd
  3038  001402  C010  F0A2         	movff	?___lwmod+1,sprintf@vd+1
  3039                           
  3040                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  3041  001406  0100               	movlb	0	; () banked
  3042  001408  0100               	movlb	0	; () banked
  3043  00140A  51A1               	movf	sprintf@vd& (0+255),w,b
  3044  00140C  0F30               	addlw	48
  3045  00140E  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3046  001412  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3047  001416                     L7:
  3048  001416  6EDF               	movwf	indf2,c
  3049                           
  3050                           ; BSR set to: 0
  3051  001418  0100               	movlb	0	; () banked
  3052  00141A  0100               	movlb	0	; () banked
  3053  00141C  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3054  00141E  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3055  001420                     l5235:
  3056                           
  3057                           ; BSR set to: 0
  3058  001420  0100               	movlb	0	; () banked
  3059  001422  0100               	movlb	0	; () banked
  3060  001424  07B9               	decf	sprintf@c& (0+255),f,b
  3061  001426  0100               	movlb	0	; () banked
  3062  001428  29B9               	incf	sprintf@c& (0+255),w,b
  3063  00142A  B4D8               	btfsc	status,2,c
  3064  00142C  D010               	goto	l5243
  3065  00142E  D7B9               	goto	l5227
  3066  001430                     l5237:
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  3070  001430  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3071  001434  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3072  001438  0E30               	movlw	48
  3073  00143A  6EDF               	movwf	indf2,c
  3074                           
  3075                           ; BSR set to: 0
  3076  00143C  0100               	movlb	0	; () banked
  3077  00143E  0100               	movlb	0	; () banked
  3078  001440  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3079  001442  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;doprnt.c: 1216: exp--;
  3083  001444  0100               	movlb	0	; () banked
  3084  001446  0100               	movlb	0	; () banked
  3085  001448  07B2               	decf	sprintf@exp& (0+255),f,b
  3086  00144A  A0D8               	btfss	status,0,c
  3087  00144C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  3088  00144E                     l5243:
  3089                           
  3090                           ; BSR set to: 0
  3091  00144E  0100               	movlb	0	; () banked
  3092  001450  0100               	movlb	0	; () banked
  3093  001452  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  3094  001454  0A80               	xorlw	128
  3095  001456  0F80               	addlw	-128
  3096  001458  0E01               	movlw	1
  3097  00145A  B4D8               	btfsc	status,2,c
  3098  00145C  5DB2               	subwf	sprintf@exp& (0+255),w,b
  3099  00145E  B0D8               	btfsc	status,0,c
  3100  001460  D7E7               	goto	l5237
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;doprnt.c: 1217: }
  3104                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3105                           
  3106                           ; BSR set to: 0
  3107  001462  0100               	movlb	0	; () banked
  3108  001464  0100               	movlb	0	; () banked
  3109  001466  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3110  001468  0A80               	xorlw	128
  3111  00146A  0F80               	addlw	-128
  3112  00146C  0E09               	movlw	9
  3113  00146E  B4D8               	btfsc	status,2,c
  3114  001470  5DB4               	subwf	sprintf@prec& (0+255),w,b
  3115  001472  A0D8               	btfss	status,0,c
  3116  001474  D009               	goto	l211
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3120  001476  0100               	movlb	0	; () banked
  3121  001478  6F92               	movwf	??_sprintf& (0+255),b
  3122  00147A  0E08               	movlw	8
  3123  00147C  0100               	movlb	0	; () banked
  3124  00147E  0100               	movlb	0	; () banked
  3125  001480  6FB9               	movwf	sprintf@c& (0+255),b
  3126  001482  0100               	movlb	0	; () banked
  3127  001484  5192               	movf	??_sprintf& (0+255),w,b
  3128  001486  D002               	goto	l5249
  3129  001488                     l211:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;doprnt.c: 1220: else
  3133                           ;doprnt.c: 1221: c = prec;
  3134  001488  C0B4  F0B9         	movff	sprintf@prec,sprintf@c
  3135  00148C                     l5249:
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;doprnt.c: 1222: prec -= c;
  3139  00148C  0100               	movlb	0	; () banked
  3140  00148E  0100               	movlb	0	; () banked
  3141  001490  51B9               	movf	sprintf@c& (0+255),w,b
  3142  001492  0100               	movlb	0	; () banked
  3143  001494  0100               	movlb	0	; () banked
  3144  001496  5FB4               	subwf	sprintf@prec& (0+255),f,b
  3145  001498  0E00               	movlw	0
  3146  00149A  0100               	movlb	0	; () banked
  3147  00149C  BFB9               	btfsc	sprintf@c& (0+255),7,b
  3148  00149E  0EFF               	movlw	255
  3149  0014A0  0100               	movlb	0	; () banked
  3150  0014A2  0100               	movlb	0	; () banked
  3151  0014A4  5BB5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;doprnt.c: 1226: if(c)
  3155  0014A6  0100               	movlb	0	; () banked
  3156  0014A8  0100               	movlb	0	; () banked
  3157  0014AA  51B9               	movf	sprintf@c& (0+255),w,b
  3158  0014AC  B4D8               	btfsc	status,2,c
  3159  0014AE  D00A               	goto	l5257
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  3163  0014B0  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3164  0014B4  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3165  0014B8  0E2E               	movlw	46
  3166  0014BA  6EDF               	movwf	indf2,c
  3167                           
  3168                           ; BSR set to: 0
  3169  0014BC  0100               	movlb	0	; () banked
  3170  0014BE  0100               	movlb	0	; () banked
  3171  0014C0  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3172  0014C2  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3173  0014C4                     l5257:
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  3177  0014C4  C0B9  F036         	movff	sprintf@c,?_scale
  3178  0014C8  EC8D  F00B         	call	_scale	;wreg free
  3179  0014CC  C038  F09A         	movff	?_scale+2,_sprintf$1138+2
  3180  0014D0  C037  F099         	movff	?_scale+1,_sprintf$1138+1
  3181  0014D4  C036  F098         	movff	?_scale,_sprintf$1138
  3182                           
  3183                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  3184  0014D8  C0B6  F028         	movff	sprintf@fval,?___ftmul+3
  3185  0014DC  C0B7  F029         	movff	sprintf@fval+1,?___ftmul+4
  3186  0014E0  C0B8  F02A         	movff	sprintf@fval+2,?___ftmul+5
  3187  0014E4  C098  F025         	movff	_sprintf$1138,?___ftmul
  3188  0014E8  C099  F026         	movff	_sprintf$1138+1,?___ftmul+1
  3189  0014EC  C09A  F027         	movff	_sprintf$1138+2,?___ftmul+2
  3190  0014F0  EC1B  F011         	call	___ftmul	;wreg free
  3191  0014F4  C027  F044         	movff	?___ftmul+2,?___fttol+2
  3192  0014F8  C026  F043         	movff	?___ftmul+1,?___fttol+1
  3193  0014FC  C025  F042         	movff	?___ftmul,?___fttol
  3194  001500  EC86  F013         	call	___fttol	;wreg free
  3195  001504  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  3196  001508  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  3197  00150C  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  3198  001510  C042  F0AD         	movff	?___fttol,sprintf@_val
  3199                           
  3200                           ;doprnt.c: 1235: while(c--) {
  3201  001514  D067               	goto	l5271
  3202  001516                     l5261:
  3203                           
  3204                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  3205  001516  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  3206  00151A  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  3207  00151E  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  3208  001522  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  3209  001526  0100               	movlb	0	; () banked
  3210  001528  0100               	movlb	0	; () banked
  3211  00152A  51B9               	movf	sprintf@c& (0+255),w,b
  3212  00152C  0D04               	mullw	4
  3213  00152E  0E00               	movlw	low _dpowers
  3214  001530  24F3               	addwf	prodl,w,c
  3215  001532  6EF6               	movwf	tblptrl,c
  3216  001534  0E06               	movlw	high _dpowers
  3217  001536  20F4               	addwfc	prodh,w,c
  3218  001538  6EF7               	movwf	tblptrh,c
  3219  00153A  0009               	tblrd		*+
  3220  00153C  CFF5 F013          	movff	tablat,?___lldiv+4
  3221  001540  0009               	tblrd		*+
  3222  001542  CFF5 F014          	movff	tablat,?___lldiv+5
  3223  001546  0009               	tblrd		*+
  3224  001548  CFF5 F015          	movff	tablat,?___lldiv+6
  3225  00154C  000A               	tblrd		*-
  3226  00154E  CFF5 F016          	movff	tablat,?___lldiv+7
  3227  001552  ECEE  F014         	call	___lldiv	;wreg free
  3228  001556  C00F  F0A3         	movff	?___lldiv,sprintf@vd_528
  3229  00155A  C010  F0A4         	movff	?___lldiv+1,sprintf@vd_528+1
  3230                           
  3231                           ;doprnt.c: 1237: vd %= 10;
  3232  00155E  C0A3  F00F         	movff	sprintf@vd_528,?___lwmod
  3233  001562  C0A4  F010         	movff	sprintf@vd_528+1,?___lwmod+1
  3234  001566  0E00               	movlw	0
  3235  001568  6E12               	movwf	?___lwmod+3,c
  3236  00156A  0E0A               	movlw	10
  3237  00156C  6E11               	movwf	?___lwmod+2,c
  3238  00156E  EC4B  F016         	call	___lwmod	;wreg free
  3239  001572  C00F  F0A3         	movff	?___lwmod,sprintf@vd_528
  3240  001576  C010  F0A4         	movff	?___lwmod+1,sprintf@vd_528+1
  3241                           
  3242                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  3243  00157A  0100               	movlb	0	; () banked
  3244  00157C  0100               	movlb	0	; () banked
  3245  00157E  51A3               	movf	sprintf@vd_528& (0+255),w,b
  3246  001580  0F30               	addlw	48
  3247  001582  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3248  001586  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3249  00158A  6EDF               	movwf	indf2,c
  3250                           
  3251                           ; BSR set to: 0
  3252  00158C  0100               	movlb	0	; () banked
  3253  00158E  0100               	movlb	0	; () banked
  3254  001590  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3255  001592  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  3259  001594  C0AD  F00F         	movff	sprintf@_val,?___llmod
  3260  001598  C0AE  F010         	movff	sprintf@_val+1,?___llmod+1
  3261  00159C  C0AF  F011         	movff	sprintf@_val+2,?___llmod+2
  3262  0015A0  C0B0  F012         	movff	sprintf@_val+3,?___llmod+3
  3263  0015A4  0100               	movlb	0	; () banked
  3264  0015A6  0100               	movlb	0	; () banked
  3265  0015A8  51B9               	movf	sprintf@c& (0+255),w,b
  3266  0015AA  0D04               	mullw	4
  3267  0015AC  0E00               	movlw	low _dpowers
  3268  0015AE  24F3               	addwf	prodl,w,c
  3269  0015B0  6EF6               	movwf	tblptrl,c
  3270  0015B2  0E06               	movlw	high _dpowers
  3271  0015B4  20F4               	addwfc	prodh,w,c
  3272  0015B6  6EF7               	movwf	tblptrh,c
  3273  0015B8  0009               	tblrd		*+
  3274  0015BA  CFF5 F013          	movff	tablat,?___llmod+4
  3275  0015BE  0009               	tblrd		*+
  3276  0015C0  CFF5 F014          	movff	tablat,?___llmod+5
  3277  0015C4  0009               	tblrd		*+
  3278  0015C6  CFF5 F015          	movff	tablat,?___llmod+6
  3279  0015CA  000A               	tblrd		*-
  3280  0015CC  CFF5 F016          	movff	tablat,?___llmod+7
  3281  0015D0  ECB2  F015         	call	___llmod	;wreg free
  3282  0015D4  C012  F0B0         	movff	?___llmod+3,sprintf@_val+3
  3283  0015D8  C011  F0AF         	movff	?___llmod+2,sprintf@_val+2
  3284  0015DC  C010  F0AE         	movff	?___llmod+1,sprintf@_val+1
  3285  0015E0  C00F  F0AD         	movff	?___llmod,sprintf@_val
  3286  0015E4                     l5271:
  3287  0015E4  0100               	movlb	0	; () banked
  3288  0015E6  0100               	movlb	0	; () banked
  3289  0015E8  07B9               	decf	sprintf@c& (0+255),f,b
  3290  0015EA  0100               	movlb	0	; () banked
  3291  0015EC  29B9               	incf	sprintf@c& (0+255),w,b
  3292  0015EE  B4D8               	btfsc	status,2,c
  3293  0015F0  D010               	goto	l5279
  3294  0015F2  D791               	goto	l5261
  3295  0015F4                     l5273:
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  3299  0015F4  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3300  0015F8  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3301  0015FC  0E30               	movlw	48
  3302  0015FE  6EDF               	movwf	indf2,c
  3303                           
  3304                           ; BSR set to: 0
  3305  001600  0100               	movlb	0	; () banked
  3306  001602  0100               	movlb	0	; () banked
  3307  001604  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3308  001606  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;doprnt.c: 1244: prec--;
  3312  001608  0100               	movlb	0	; () banked
  3313  00160A  0100               	movlb	0	; () banked
  3314  00160C  07B4               	decf	sprintf@prec& (0+255),f,b
  3315  00160E  A0D8               	btfss	status,0,c
  3316  001610  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  3317  001612                     l5279:
  3318                           
  3319                           ; BSR set to: 0
  3320  001612  0100               	movlb	0	; () banked
  3321  001614  0100               	movlb	0	; () banked
  3322  001616  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3323  001618  11B4               	iorwf	sprintf@prec& (0+255),w,b
  3324  00161A  B4D8               	btfsc	status,2,c
  3325  00161C  D065               	goto	l5301
  3326  00161E  D7EA               	goto	l5273
  3327  001620                     l5281:
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;doprnt.c: 1253: }
  3331                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  3332  001620  0100               	movlb	0	; () banked
  3333  001622  0100               	movlb	0	; () banked
  3334  001624  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3335  001626  11B4               	iorwf	sprintf@prec& (0+255),w,b
  3336  001628  A4D8               	btfss	status,2,c
  3337  00162A  D00C               	goto	l5287
  3338                           
  3339                           ; BSR set to: 0
  3340  00162C  0100               	movlb	0	; () banked
  3341  00162E  0100               	movlb	0	; () banked
  3342  001630  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  3343  001632  11AD               	iorwf	sprintf@_val& (0+255),w,b
  3344  001634  11AE               	iorwf	(sprintf@_val+1)& (0+255),w,b
  3345  001636  11AF               	iorwf	(sprintf@_val+2)& (0+255),w,b
  3346  001638  A4D8               	btfss	status,2,c
  3347  00163A  D004               	goto	l5287
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;doprnt.c: 1298: prec++;
  3351  00163C  0100               	movlb	0	; () banked
  3352  00163E  0100               	movlb	0	; () banked
  3353  001640  4BB4               	infsnz	sprintf@prec& (0+255),f,b
  3354  001642  2BB5               	incf	(sprintf@prec+1)& (0+255),f,b
  3355  001644                     l5287:
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;doprnt.c: 1346: if(c < prec)
  3359  001644  0E80               	movlw	128
  3360  001646  0100               	movlb	0	; () banked
  3361  001648  0100               	movlb	0	; () banked
  3362  00164A  BFB9               	btfsc	sprintf@c& (0+255),7,b
  3363  00164C  0E7F               	movlw	127
  3364  00164E  6F92               	movwf	??_sprintf& (0+255),b
  3365  001650  0100               	movlb	0	; () banked
  3366  001652  0100               	movlb	0	; () banked
  3367  001654  51B4               	movf	sprintf@prec& (0+255),w,b
  3368  001656  0100               	movlb	0	; () banked
  3369  001658  0100               	movlb	0	; () banked
  3370  00165A  5DB9               	subwf	sprintf@c& (0+255),w,b
  3371  00165C  0100               	movlb	0	; () banked
  3372  00165E  0100               	movlb	0	; () banked
  3373  001660  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3374  001662  0A80               	xorlw	128
  3375  001664  0100               	movlb	0	; () banked
  3376  001666  5992               	subwfb	??_sprintf& (0+255),w,b
  3377  001668  B0D8               	btfsc	status,0,c
  3378  00166A  D003               	goto	l5291
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;doprnt.c: 1347: c = prec;
  3382  00166C  C0B4  F0B9         	movff	sprintf@prec,sprintf@c
  3383  001670  D020               	goto	l5295
  3384  001672                     l5291:
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;doprnt.c: 1348: else if(prec < c)
  3388  001672  0100               	movlb	0	; () banked
  3389  001674  0100               	movlb	0	; () banked
  3390  001676  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3391  001678  0A80               	xorlw	128
  3392  00167A  0100               	movlb	0	; () banked
  3393  00167C  6F92               	movwf	??_sprintf& (0+255),b
  3394  00167E  0100               	movlb	0	; () banked
  3395  001680  0100               	movlb	0	; () banked
  3396  001682  51B9               	movf	sprintf@c& (0+255),w,b
  3397  001684  0100               	movlb	0	; () banked
  3398  001686  0100               	movlb	0	; () banked
  3399  001688  5DB4               	subwf	sprintf@prec& (0+255),w,b
  3400  00168A  0E80               	movlw	128
  3401  00168C  0100               	movlb	0	; () banked
  3402  00168E  0100               	movlb	0	; () banked
  3403  001690  BFB9               	btfsc	sprintf@c& (0+255),7,b
  3404  001692  0E7F               	movlw	127
  3405  001694  0100               	movlb	0	; () banked
  3406  001696  5992               	subwfb	??_sprintf& (0+255),w,b
  3407  001698  B0D8               	btfsc	status,0,c
  3408  00169A  D00B               	goto	l5295
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;doprnt.c: 1349: prec = c;
  3412  00169C  0100               	movlb	0	; () banked
  3413  00169E  0100               	movlb	0	; () banked
  3414  0016A0  51B9               	movf	sprintf@c& (0+255),w,b
  3415  0016A2  0100               	movlb	0	; () banked
  3416  0016A4  0100               	movlb	0	; () banked
  3417  0016A6  6FB4               	movwf	sprintf@prec& (0+255),b
  3418  0016A8  0100               	movlb	0	; () banked
  3419  0016AA  6BB5               	clrf	(sprintf@prec+1)& (0+255),b
  3420  0016AC  0100               	movlb	0	; () banked
  3421  0016AE  BFB4               	btfsc	sprintf@prec& (0+255),7,b
  3422  0016B0  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  3423  0016B2                     l5295:
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;doprnt.c: 1429: {
  3427                           ;doprnt.c: 1445: if(flag & 0x03)
  3428  0016B2  0E03               	movlw	3
  3429  0016B4  0100               	movlb	0	; () banked
  3430  0016B6  0100               	movlb	0	; () banked
  3431  0016B8  15AB               	andwf	sprintf@flag& (0+255),w,b
  3432  0016BA  0100               	movlb	0	; () banked
  3433  0016BC  6F92               	movwf	??_sprintf& (0+255),b
  3434  0016BE  0E00               	movlw	0
  3435  0016C0  0100               	movlb	0	; () banked
  3436  0016C2  0100               	movlb	0	; () banked
  3437  0016C4  15AC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3438  0016C6  0100               	movlb	0	; () banked
  3439  0016C8  6F93               	movwf	(??_sprintf+1)& (0+255),b
  3440  0016CA  0100               	movlb	0	; () banked
  3441  0016CC  5193               	movf	(??_sprintf+1)& (0+255),w,b
  3442  0016CE  1192               	iorwf	??_sprintf& (0+255),w,b
  3443  0016D0  B4D8               	btfsc	status,2,c
  3444  0016D2  D00A               	goto	l5301
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  3448  0016D4  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3449  0016D8  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3450  0016DC  0E2D               	movlw	45
  3451  0016DE                     L3:
  3452  0016DE  6EDF               	movwf	indf2,c
  3453  0016E0                     L8:
  3454                           
  3455                           ; BSR set to: 0
  3456  0016E0  0100               	movlb	0	; () banked
  3457  0016E2  0100               	movlb	0	; () banked
  3458  0016E4  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3459  0016E6  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3460  0016E8                     l5301:
  3461                           
  3462                           ; BSR set to: 0
  3463  0016E8  0100               	movlb	0	; () banked
  3464  0016EA  C08D  FFF6         	movff	sprintf@f,tblptrl
  3465  0016EE  0100               	movlb	0	; () banked
  3466  0016F0  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  3467  0016F4  0100               	movlb	0	; () banked
  3468  0016F6  0100               	movlb	0	; () banked
  3469  0016F8  4B8D               	infsnz	sprintf@f& (0+255),f,b
  3470  0016FA  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  3471  0016FC  0008               	tblrd		*
  3472  0016FE  0100               	movlb	0	; () banked
  3473  001700  CFF5 F0B9          	movff	tablat,sprintf@c
  3474  001704  0100               	movlb	0	; () banked
  3475  001706  67B9               	tstfsz	sprintf@c& (0+255),b
  3476  001708  EF52  F003         	goto	l4959
  3477  00170C                     l5303:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;doprnt.c: 1545: *sp = 0;
  3481  00170C  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3482  001710  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3483  001714  0E00               	movlw	0
  3484  001716  6EDF               	movwf	indf2,c
  3485                           
  3486                           ; BSR set to: 0
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;doprnt.c: 1547: return 0;
  3490                           ;	Return value of _sprintf is never used
  3491  001718  0012               	return	
  3492  00171A                     __end_of_sprintf:
  3493                           	opt stack 0
  3494                           tblptru	equ	0xFF8
  3495                           tblptrh	equ	0xFF7
  3496                           tblptrl	equ	0xFF6
  3497                           tablat	equ	0xFF5
  3498                           prodh	equ	0xFF4
  3499                           prodl	equ	0xFF3
  3500                           intcon	equ	0xFF2
  3501                           wreg	equ	0xFE8
  3502                           indf2	equ	0xFDF
  3503                           postinc2	equ	0xFDE
  3504                           postdec2	equ	0xFDD
  3505                           fsr2h	equ	0xFDA
  3506                           fsr2l	equ	0xFD9
  3507                           status	equ	0xFD8
  3508                           
  3509 ;; *************** function ___lwmod *****************
  3510 ;; Defined at:
  3511 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
  3512 ;; Parameters:    Size  Location     Type
  3513 ;;  dividend        2   14[COMRAM] unsigned int 
  3514 ;;  divisor         2   16[COMRAM] unsigned int 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  counter         1   19[COMRAM] unsigned char 
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  2   14[COMRAM] unsigned int 
  3519 ;; Registers used:
  3520 ;;		wreg, status,2, status,0
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3526 ;;      Params:         4       0       0       0       0       0       0
  3527 ;;      Locals:         1       0       0       0       0       0       0
  3528 ;;      Temps:          1       0       0       0       0       0       0
  3529 ;;      Totals:         6       0       0       0       0       0       0
  3530 ;;Total ram usage:        6 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    1
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_sprintf
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text3
  3541  002C96                     __ptext3:
  3542                           	opt stack 0
  3543  002C96                     ___lwmod:
  3544                           	opt stack 28
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;incstack = 0
  3548                           ;incstack = 0
  3549  002C96  5012               	movf	___lwmod@divisor+1,w,c
  3550  002C98  1011               	iorwf	___lwmod@divisor,w,c
  3551  002C9A  B4D8               	btfsc	status,2,c
  3552  002C9C  D01A               	goto	l781
  3553  002C9E  6E13               	movwf	??___lwmod& (0+255),c
  3554  002CA0  0E01               	movlw	1
  3555  002CA2  6E14               	movwf	___lwmod@counter,c
  3556  002CA4  5013               	movf	??___lwmod& (0+255),w,c
  3557  002CA6  D004               	goto	l4799
  3558  002CA8                     l4797:
  3559  002CA8  90D8               	bcf	status,0,c
  3560  002CAA  3611               	rlcf	___lwmod@divisor,f,c
  3561  002CAC  3612               	rlcf	___lwmod@divisor+1,f,c
  3562  002CAE  2A14               	incf	___lwmod@counter,f,c
  3563  002CB0                     l4799:
  3564  002CB0  AE12               	btfss	___lwmod@divisor+1,7,c
  3565  002CB2  D7FA               	goto	l4797
  3566  002CB4                     l4801:
  3567  002CB4  5011               	movf	___lwmod@divisor,w,c
  3568  002CB6  5C0F               	subwf	___lwmod@dividend,w,c
  3569  002CB8  5012               	movf	___lwmod@divisor+1,w,c
  3570  002CBA  5810               	subwfb	___lwmod@dividend+1,w,c
  3571  002CBC  A0D8               	btfss	status,0,c
  3572  002CBE  D004               	goto	l4805
  3573  002CC0  5011               	movf	___lwmod@divisor,w,c
  3574  002CC2  5E0F               	subwf	___lwmod@dividend,f,c
  3575  002CC4  5012               	movf	___lwmod@divisor+1,w,c
  3576  002CC6  5A10               	subwfb	___lwmod@dividend+1,f,c
  3577  002CC8                     l4805:
  3578  002CC8  90D8               	bcf	status,0,c
  3579  002CCA  3212               	rrcf	___lwmod@divisor+1,f,c
  3580  002CCC  3211               	rrcf	___lwmod@divisor,f,c
  3581  002CCE  2E14               	decfsz	___lwmod@counter,f,c
  3582  002CD0  D7F1               	goto	l4801
  3583  002CD2                     l781:
  3584  002CD2  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
  3585  002CD6  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
  3586  002CDA  0012               	return	
  3587  002CDC                     __end_of___lwmod:
  3588                           	opt stack 0
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           wreg	equ	0xFE8
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           postdec2	equ	0xFDD
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function ___lltoft *****************
  3605 ;; Defined at:
  3606 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lltoft.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  c               4   80[COMRAM] unsigned long 
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  exp             1   88[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  3   80[COMRAM] float 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3620 ;;      Params:         4       0       0       0       0       0       0
  3621 ;;      Locals:         1       0       0       0       0       0       0
  3622 ;;      Temps:          4       0       0       0       0       0       0
  3623 ;;      Totals:         9       0       0       0       0       0       0
  3624 ;;Total ram usage:        9 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    2
  3627 ;; This function calls:
  3628 ;;		___ftpack
  3629 ;; This function is called by:
  3630 ;;		_sprintf
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text4
  3635  002BCE                     __ptext4:
  3636                           	opt stack 0
  3637  002BCE                     ___lltoft:
  3638                           	opt stack 27
  3639                           
  3640                           ;incstack = 0
  3641                           ;incstack = 0
  3642  002BCE  6E55               	movwf	??___lltoft& (0+255),c
  3643  002BD0  0E8E               	movlw	142
  3644  002BD2  6E59               	movwf	___lltoft@exp,c
  3645  002BD4  5055               	movf	??___lltoft& (0+255),w,c
  3646  002BD6  D006               	goto	l4787
  3647  002BD8                     l4785:
  3648  002BD8  90D8               	bcf	status,0,c
  3649  002BDA  3254               	rrcf	___lltoft@c+3,f,c
  3650  002BDC  3253               	rrcf	___lltoft@c+2,f,c
  3651  002BDE  3252               	rrcf	___lltoft@c+1,f,c
  3652  002BE0  3251               	rrcf	___lltoft@c,f,c
  3653  002BE2  2A59               	incf	___lltoft@exp,f,c
  3654  002BE4                     l4787:
  3655  002BE4  0E00               	movlw	0
  3656  002BE6  1451               	andwf	___lltoft@c,w,c
  3657  002BE8  6E55               	movwf	??___lltoft& (0+255),c
  3658  002BEA  0E00               	movlw	0
  3659  002BEC  1452               	andwf	___lltoft@c+1,w,c
  3660  002BEE  6E56               	movwf	(??___lltoft+1)& (0+255),c
  3661  002BF0  0E00               	movlw	0
  3662  002BF2  1453               	andwf	___lltoft@c+2,w,c
  3663  002BF4  6E57               	movwf	(??___lltoft+2)& (0+255),c
  3664  002BF6  0EFF               	movlw	255
  3665  002BF8  1454               	andwf	___lltoft@c+3,w,c
  3666  002BFA  6E58               	movwf	(??___lltoft+3)& (0+255),c
  3667  002BFC  5058               	movf	??___lltoft+3,w,c
  3668  002BFE  1055               	iorwf	??___lltoft,w,c
  3669  002C00  1056               	iorwf	??___lltoft+1,w,c
  3670  002C02  1057               	iorwf	??___lltoft+2,w,c
  3671  002C04  A4D8               	btfss	status,2,c
  3672  002C06  D7E8               	goto	l4785
  3673  002C08  C051  F00F         	movff	___lltoft@c,?___ftpack
  3674  002C0C  C052  F010         	movff	___lltoft@c+1,?___ftpack+1
  3675  002C10  C053  F011         	movff	___lltoft@c+2,?___ftpack+2
  3676  002C14  C059  F012         	movff	___lltoft@exp,?___ftpack+3
  3677  002C18  6E55               	movwf	??___lltoft& (0+255),c
  3678  002C1A  0E00               	movlw	0
  3679  002C1C  6E13               	movwf	?___ftpack+4,c
  3680  002C1E  5055               	movf	??___lltoft& (0+255),w,c
  3681  002C20  ECF6  F013         	call	___ftpack	;wreg free
  3682  002C24  C011  F053         	movff	?___ftpack+2,?___lltoft+2
  3683  002C28  C010  F052         	movff	?___ftpack+1,?___lltoft+1
  3684  002C2C  C00F  F051         	movff	?___ftpack,?___lltoft
  3685  002C30  0012               	return	
  3686  002C32                     __end_of___lltoft:
  3687                           	opt stack 0
  3688                           tblptru	equ	0xFF8
  3689                           tblptrh	equ	0xFF7
  3690                           tblptrl	equ	0xFF6
  3691                           tablat	equ	0xFF5
  3692                           prodh	equ	0xFF4
  3693                           prodl	equ	0xFF3
  3694                           intcon	equ	0xFF2
  3695                           wreg	equ	0xFE8
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           postdec2	equ	0xFDD
  3699                           fsr2h	equ	0xFDA
  3700                           fsr2l	equ	0xFD9
  3701                           status	equ	0xFD8
  3702                           
  3703 ;; *************** function ___llmod *****************
  3704 ;; Defined at:
  3705 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;  dividend        4   14[COMRAM] unsigned long 
  3708 ;;  divisor         4   18[COMRAM] unsigned long 
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;  counter         1   23[COMRAM] unsigned char 
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  4   14[COMRAM] unsigned long 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2, status,0
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3720 ;;      Params:         8       0       0       0       0       0       0
  3721 ;;      Locals:         1       0       0       0       0       0       0
  3722 ;;      Temps:          1       0       0       0       0       0       0
  3723 ;;      Totals:        10       0       0       0       0       0       0
  3724 ;;Total ram usage:       10 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    1
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_sprintf
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text5
  3735  002B64                     __ptext5:
  3736                           	opt stack 0
  3737  002B64                     ___llmod:
  3738                           	opt stack 28
  3739                           
  3740                           ;incstack = 0
  3741                           ;incstack = 0
  3742  002B64  5016               	movf	___llmod@divisor+3,w,c
  3743  002B66  1013               	iorwf	___llmod@divisor,w,c
  3744  002B68  1014               	iorwf	___llmod@divisor+1,w,c
  3745  002B6A  1015               	iorwf	___llmod@divisor+2,w,c
  3746  002B6C  B4D8               	btfsc	status,2,c
  3747  002B6E  D026               	goto	l712
  3748  002B70  6E17               	movwf	??___llmod& (0+255),c
  3749  002B72  0E01               	movlw	1
  3750  002B74  6E18               	movwf	___llmod@counter,c
  3751  002B76  5017               	movf	??___llmod& (0+255),w,c
  3752  002B78  D006               	goto	l4773
  3753  002B7A                     l4771:
  3754  002B7A  90D8               	bcf	status,0,c
  3755  002B7C  3613               	rlcf	___llmod@divisor,f,c
  3756  002B7E  3614               	rlcf	___llmod@divisor+1,f,c
  3757  002B80  3615               	rlcf	___llmod@divisor+2,f,c
  3758  002B82  3616               	rlcf	___llmod@divisor+3,f,c
  3759  002B84  2A18               	incf	___llmod@counter,f,c
  3760  002B86                     l4773:
  3761  002B86  AE16               	btfss	___llmod@divisor+3,7,c
  3762  002B88  D7F8               	goto	l4771
  3763  002B8A                     l4775:
  3764  002B8A  5013               	movf	___llmod@divisor,w,c
  3765  002B8C  5C0F               	subwf	___llmod@dividend,w,c
  3766  002B8E  5014               	movf	___llmod@divisor+1,w,c
  3767  002B90  5810               	subwfb	___llmod@dividend+1,w,c
  3768  002B92  5015               	movf	___llmod@divisor+2,w,c
  3769  002B94  5811               	subwfb	___llmod@dividend+2,w,c
  3770  002B96  5016               	movf	___llmod@divisor+3,w,c
  3771  002B98  5812               	subwfb	___llmod@dividend+3,w,c
  3772  002B9A  A0D8               	btfss	status,0,c
  3773  002B9C  D008               	goto	l4779
  3774  002B9E  5013               	movf	___llmod@divisor,w,c
  3775  002BA0  5E0F               	subwf	___llmod@dividend,f,c
  3776  002BA2  5014               	movf	___llmod@divisor+1,w,c
  3777  002BA4  5A10               	subwfb	___llmod@dividend+1,f,c
  3778  002BA6  5015               	movf	___llmod@divisor+2,w,c
  3779  002BA8  5A11               	subwfb	___llmod@dividend+2,f,c
  3780  002BAA  5016               	movf	___llmod@divisor+3,w,c
  3781  002BAC  5A12               	subwfb	___llmod@dividend+3,f,c
  3782  002BAE                     l4779:
  3783  002BAE  90D8               	bcf	status,0,c
  3784  002BB0  3216               	rrcf	___llmod@divisor+3,f,c
  3785  002BB2  3215               	rrcf	___llmod@divisor+2,f,c
  3786  002BB4  3214               	rrcf	___llmod@divisor+1,f,c
  3787  002BB6  3213               	rrcf	___llmod@divisor,f,c
  3788  002BB8  2E18               	decfsz	___llmod@counter,f,c
  3789  002BBA  D7E7               	goto	l4775
  3790  002BBC                     l712:
  3791  002BBC  C00F  F00F         	movff	___llmod@dividend,?___llmod
  3792  002BC0  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
  3793  002BC4  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
  3794  002BC8  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
  3795  002BCC  0012               	return	
  3796  002BCE                     __end_of___llmod:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           prodh	equ	0xFF4
  3803                           prodl	equ	0xFF3
  3804                           intcon	equ	0xFF2
  3805                           wreg	equ	0xFE8
  3806                           indf2	equ	0xFDF
  3807                           postinc2	equ	0xFDE
  3808                           postdec2	equ	0xFDD
  3809                           fsr2h	equ	0xFDA
  3810                           fsr2l	equ	0xFD9
  3811                           status	equ	0xFD8
  3812                           
  3813 ;; *************** function ___lldiv *****************
  3814 ;; Defined at:
  3815 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  dividend        4   14[COMRAM] unsigned long 
  3818 ;;  divisor         4   18[COMRAM] unsigned long 
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;  quotient        4   23[COMRAM] unsigned long 
  3821 ;;  counter         1   27[COMRAM] unsigned char 
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  4   14[COMRAM] unsigned long 
  3824 ;; Registers used:
  3825 ;;		wreg, status,2, status,0
  3826 ;; Tracked objects:
  3827 ;;		On entry : 0/0
  3828 ;;		On exit  : 0/0
  3829 ;;		Unchanged: 0/0
  3830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3831 ;;      Params:         8       0       0       0       0       0       0
  3832 ;;      Locals:         5       0       0       0       0       0       0
  3833 ;;      Temps:          1       0       0       0       0       0       0
  3834 ;;      Totals:        14       0       0       0       0       0       0
  3835 ;;Total ram usage:       14 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    1
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_sprintf
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text6
  3846  0029DC                     __ptext6:
  3847                           	opt stack 0
  3848  0029DC                     ___lldiv:
  3849                           	opt stack 28
  3850                           
  3851                           ;incstack = 0
  3852                           ;incstack = 0
  3853  0029DC  0E00               	movlw	0
  3854  0029DE  6E18               	movwf	___lldiv@quotient,c
  3855  0029E0  0E00               	movlw	0
  3856  0029E2  6E19               	movwf	___lldiv@quotient+1,c
  3857  0029E4  0E00               	movlw	0
  3858  0029E6  6E1A               	movwf	___lldiv@quotient+2,c
  3859  0029E8  0E00               	movlw	0
  3860  0029EA  6E1B               	movwf	___lldiv@quotient+3,c
  3861  0029EC  5016               	movf	___lldiv@divisor+3,w,c
  3862  0029EE  1013               	iorwf	___lldiv@divisor,w,c
  3863  0029F0  1014               	iorwf	___lldiv@divisor+1,w,c
  3864  0029F2  1015               	iorwf	___lldiv@divisor+2,w,c
  3865  0029F4  B4D8               	btfsc	status,2,c
  3866  0029F6  D02C               	goto	l702
  3867  0029F8  6E17               	movwf	??___lldiv& (0+255),c
  3868  0029FA  0E01               	movlw	1
  3869  0029FC  6E1C               	movwf	___lldiv@counter,c
  3870  0029FE  5017               	movf	??___lldiv& (0+255),w,c
  3871  002A00  D006               	goto	l4753
  3872  002A02                     l4751:
  3873  002A02  90D8               	bcf	status,0,c
  3874  002A04  3613               	rlcf	___lldiv@divisor,f,c
  3875  002A06  3614               	rlcf	___lldiv@divisor+1,f,c
  3876  002A08  3615               	rlcf	___lldiv@divisor+2,f,c
  3877  002A0A  3616               	rlcf	___lldiv@divisor+3,f,c
  3878  002A0C  2A1C               	incf	___lldiv@counter,f,c
  3879  002A0E                     l4753:
  3880  002A0E  AE16               	btfss	___lldiv@divisor+3,7,c
  3881  002A10  D7F8               	goto	l4751
  3882  002A12                     l4755:
  3883  002A12  90D8               	bcf	status,0,c
  3884  002A14  3618               	rlcf	___lldiv@quotient,f,c
  3885  002A16  3619               	rlcf	___lldiv@quotient+1,f,c
  3886  002A18  361A               	rlcf	___lldiv@quotient+2,f,c
  3887  002A1A  361B               	rlcf	___lldiv@quotient+3,f,c
  3888  002A1C  5013               	movf	___lldiv@divisor,w,c
  3889  002A1E  5C0F               	subwf	___lldiv@dividend,w,c
  3890  002A20  5014               	movf	___lldiv@divisor+1,w,c
  3891  002A22  5810               	subwfb	___lldiv@dividend+1,w,c
  3892  002A24  5015               	movf	___lldiv@divisor+2,w,c
  3893  002A26  5811               	subwfb	___lldiv@dividend+2,w,c
  3894  002A28  5016               	movf	___lldiv@divisor+3,w,c
  3895  002A2A  5812               	subwfb	___lldiv@dividend+3,w,c
  3896  002A2C  A0D8               	btfss	status,0,c
  3897  002A2E  D009               	goto	l4763
  3898  002A30  5013               	movf	___lldiv@divisor,w,c
  3899  002A32  5E0F               	subwf	___lldiv@dividend,f,c
  3900  002A34  5014               	movf	___lldiv@divisor+1,w,c
  3901  002A36  5A10               	subwfb	___lldiv@dividend+1,f,c
  3902  002A38  5015               	movf	___lldiv@divisor+2,w,c
  3903  002A3A  5A11               	subwfb	___lldiv@dividend+2,f,c
  3904  002A3C  5016               	movf	___lldiv@divisor+3,w,c
  3905  002A3E  5A12               	subwfb	___lldiv@dividend+3,f,c
  3906  002A40  8018               	bsf	___lldiv@quotient,0,c
  3907  002A42                     l4763:
  3908  002A42  90D8               	bcf	status,0,c
  3909  002A44  3216               	rrcf	___lldiv@divisor+3,f,c
  3910  002A46  3215               	rrcf	___lldiv@divisor+2,f,c
  3911  002A48  3214               	rrcf	___lldiv@divisor+1,f,c
  3912  002A4A  3213               	rrcf	___lldiv@divisor,f,c
  3913  002A4C  2E1C               	decfsz	___lldiv@counter,f,c
  3914  002A4E  D7E1               	goto	l4755
  3915  002A50                     l702:
  3916  002A50  C018  F00F         	movff	___lldiv@quotient,?___lldiv
  3917  002A54  C019  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  3918  002A58  C01A  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  3919  002A5C  C01B  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  3920  002A60  0012               	return	
  3921  002A62                     __end_of___lldiv:
  3922                           	opt stack 0
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           prodh	equ	0xFF4
  3928                           prodl	equ	0xFF3
  3929                           intcon	equ	0xFF2
  3930                           wreg	equ	0xFE8
  3931                           indf2	equ	0xFDF
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function ___fttol *****************
  3939 ;; Defined at:
  3940 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fttol.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  f1              3   65[COMRAM] float 
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;  lval            4   75[COMRAM] unsigned long 
  3945 ;;  exp1            1   79[COMRAM] unsigned char 
  3946 ;;  sign1           1   74[COMRAM] unsigned char 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  4   65[COMRAM] long 
  3949 ;; Registers used:
  3950 ;;		wreg, status,2, status,0
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3956 ;;      Params:         4       0       0       0       0       0       0
  3957 ;;      Locals:         6       0       0       0       0       0       0
  3958 ;;      Temps:          5       0       0       0       0       0       0
  3959 ;;      Totals:        15       0       0       0       0       0       0
  3960 ;;Total ram usage:       15 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    1
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_sprintf
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text7
  3971  00270C                     __ptext7:
  3972                           	opt stack 0
  3973  00270C                     ___fttol:
  3974                           	opt stack 28
  3975                           
  3976                           ;incstack = 0
  3977                           ;incstack = 0
  3978  00270C  0E0F               	movlw	15
  3979  00270E  6E46               	movwf	??___fttol& (0+255),c
  3980  002710  C042  F047         	movff	___fttol@f1,??___fttol+1
  3981  002714  C043  F048         	movff	___fttol@f1+1,??___fttol+2
  3982  002718  C044  F049         	movff	___fttol@f1+2,??___fttol+3
  3983  00271C  2846               	incf	??___fttol,w,c
  3984  00271E  6E4A               	movwf	(??___fttol+4)& (0+255),c
  3985  002720  D004               	goto	u3190
  3986  002722                     u3195:
  3987  002722  90D8               	bcf	status,0,c
  3988  002724  3249               	rrcf	??___fttol+3,f,c
  3989  002726  3248               	rrcf	??___fttol+2,f,c
  3990  002728  3247               	rrcf	??___fttol+1,f,c
  3991  00272A                     u3190:
  3992  00272A  2E4A               	decfsz	(??___fttol+4)& (0+255),f,c
  3993  00272C  D7FA               	goto	u3195
  3994  00272E  5047               	movf	??___fttol+1,w,c
  3995  002730  6E50               	movwf	___fttol@exp1,c
  3996  002732  6650               	tstfsz	___fttol@exp1& (0+255),c
  3997  002734  D001               	goto	l4705
  3998  002736  D035               	goto	u3240
  3999  002738                     l4705:
  4000  002738  0E17               	movlw	23
  4001  00273A  6E46               	movwf	??___fttol& (0+255),c
  4002  00273C  C042  F047         	movff	___fttol@f1,??___fttol+1
  4003  002740  C043  F048         	movff	___fttol@f1+1,??___fttol+2
  4004  002744  C044  F049         	movff	___fttol@f1+2,??___fttol+3
  4005  002748  2846               	incf	??___fttol,w,c
  4006  00274A  6E4A               	movwf	(??___fttol+4)& (0+255),c
  4007  00274C  D004               	goto	u3210
  4008  00274E                     u3215:
  4009  00274E  90D8               	bcf	status,0,c
  4010  002750  3249               	rrcf	??___fttol+3,f,c
  4011  002752  3248               	rrcf	??___fttol+2,f,c
  4012  002754  3247               	rrcf	??___fttol+1,f,c
  4013  002756                     u3210:
  4014  002756  2E4A               	decfsz	(??___fttol+4)& (0+255),f,c
  4015  002758  D7FA               	goto	u3215
  4016  00275A  5047               	movf	??___fttol+1,w,c
  4017  00275C  6E4B               	movwf	___fttol@sign1,c
  4018  00275E  8E43               	bsf	___fttol@f1+1,7,c
  4019  002760  0EFF               	movlw	255
  4020  002762  1642               	andwf	___fttol@f1,f,c
  4021  002764  0EFF               	movlw	255
  4022  002766  1643               	andwf	___fttol@f1+1,f,c
  4023  002768  0E00               	movlw	0
  4024  00276A  1644               	andwf	___fttol@f1+2,f,c
  4025  00276C  5042               	movf	___fttol@f1,w,c
  4026  00276E  6E4C               	movwf	___fttol@lval,c
  4027  002770  5043               	movf	___fttol@f1+1,w,c
  4028  002772  6E4D               	movwf	___fttol@lval+1,c
  4029  002774  5044               	movf	___fttol@f1+2,w,c
  4030  002776  6E4E               	movwf	___fttol@lval+2,c
  4031  002778  6A4F               	clrf	___fttol@lval+3,c
  4032  00277A  0E8E               	movlw	142
  4033  00277C  5E50               	subwf	___fttol@exp1,f,c
  4034  00277E  AE50               	btfss	___fttol@exp1,7,c
  4035  002780  D00D               	goto	l4727
  4036  002782  5050               	movf	___fttol@exp1,w,c
  4037  002784  0A80               	xorlw	128
  4038  002786  0F8F               	addlw	143
  4039  002788  A0D8               	btfss	status,0,c
  4040  00278A  D00B               	goto	u3240
  4041  00278C                     l4723:
  4042  00278C  90D8               	bcf	status,0,c
  4043  00278E  324F               	rrcf	___fttol@lval+3,f,c
  4044  002790  324E               	rrcf	___fttol@lval+2,f,c
  4045  002792  324D               	rrcf	___fttol@lval+1,f,c
  4046  002794  324C               	rrcf	___fttol@lval,f,c
  4047  002796  3E50               	incfsz	___fttol@exp1,f,c
  4048  002798  D7F9               	goto	l4723
  4049  00279A  D014               	goto	l4737
  4050  00279C                     l4727:
  4051  00279C  0E17               	movlw	23
  4052  00279E  6450               	cpfsgt	___fttol@exp1,c
  4053  0027A0  D00F               	goto	l4735
  4054  0027A2                     u3240:
  4055  0027A2  0E00               	movlw	0
  4056  0027A4  6E42               	movwf	?___fttol,c
  4057  0027A6  0E00               	movlw	0
  4058  0027A8  6E43               	movwf	?___fttol+1,c
  4059  0027AA  0E00               	movlw	0
  4060  0027AC  6E44               	movwf	?___fttol+2,c
  4061  0027AE  0E00               	movlw	0
  4062  0027B0  6E45               	movwf	?___fttol+3,c
  4063  0027B2  D01B               	goto	l658
  4064  0027B4                     l4733:
  4065  0027B4  90D8               	bcf	status,0,c
  4066  0027B6  364C               	rlcf	___fttol@lval,f,c
  4067  0027B8  364D               	rlcf	___fttol@lval+1,f,c
  4068  0027BA  364E               	rlcf	___fttol@lval+2,f,c
  4069  0027BC  364F               	rlcf	___fttol@lval+3,f,c
  4070  0027BE  0650               	decf	___fttol@exp1,f,c
  4071  0027C0                     l4735:
  4072  0027C0  6650               	tstfsz	___fttol@exp1,c
  4073  0027C2  D7F8               	goto	l4733
  4074  0027C4                     l4737:
  4075  0027C4  504B               	movf	___fttol@sign1,w,c
  4076  0027C6  B4D8               	btfsc	status,2,c
  4077  0027C8  D008               	goto	l4741
  4078  0027CA  1E4F               	comf	___fttol@lval+3,f,c
  4079  0027CC  1E4E               	comf	___fttol@lval+2,f,c
  4080  0027CE  1E4D               	comf	___fttol@lval+1,f,c
  4081  0027D0  6C4C               	negf	___fttol@lval,c
  4082  0027D2  0E00               	movlw	0
  4083  0027D4  224D               	addwfc	___fttol@lval+1,f,c
  4084  0027D6  224E               	addwfc	___fttol@lval+2,f,c
  4085  0027D8  224F               	addwfc	___fttol@lval+3,f,c
  4086  0027DA                     l4741:
  4087  0027DA  C04C  F042         	movff	___fttol@lval,?___fttol
  4088  0027DE  C04D  F043         	movff	___fttol@lval+1,?___fttol+1
  4089  0027E2  C04E  F044         	movff	___fttol@lval+2,?___fttol+2
  4090  0027E6  C04F  F045         	movff	___fttol@lval+3,?___fttol+3
  4091  0027EA                     l658:
  4092  0027EA  0012               	return	
  4093  0027EC                     __end_of___fttol:
  4094                           	opt stack 0
  4095                           tblptru	equ	0xFF8
  4096                           tblptrh	equ	0xFF7
  4097                           tblptrl	equ	0xFF6
  4098                           tablat	equ	0xFF5
  4099                           prodh	equ	0xFF4
  4100                           prodl	equ	0xFF3
  4101                           intcon	equ	0xFF2
  4102                           wreg	equ	0xFE8
  4103                           indf2	equ	0xFDF
  4104                           postinc2	equ	0xFDE
  4105                           postdec2	equ	0xFDD
  4106                           fsr2h	equ	0xFDA
  4107                           fsr2l	equ	0xFD9
  4108                           status	equ	0xFD8
  4109                           
  4110 ;; *************** function ___ftneg *****************
  4111 ;; Defined at:
  4112 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftneg.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  f1              3   89[COMRAM] float 
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;		None
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  3   89[COMRAM] float 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2, status,0
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4126 ;;      Params:         3       0       0       0       0       0       0
  4127 ;;      Locals:         0       0       0       0       0       0       0
  4128 ;;      Temps:          0       0       0       0       0       0       0
  4129 ;;      Totals:         3       0       0       0       0       0       0
  4130 ;;Total ram usage:        3 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    1
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_sprintf
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text8
  4141  002EA4                     __ptext8:
  4142                           	opt stack 0
  4143  002EA4                     ___ftneg:
  4144                           	opt stack 28
  4145                           
  4146                           ;incstack = 0
  4147                           ;incstack = 0
  4148  002EA4  0E7F               	movlw	127
  4149  002EA6  145C               	andwf	___ftneg@f1+2,w,c
  4150  002EA8  105B               	iorwf	___ftneg@f1+1,w,c
  4151  002EAA  105A               	iorwf	___ftneg@f1,w,c
  4152  002EAC  B4D8               	btfsc	status,2,c
  4153  002EAE  D006               	goto	l648
  4154  002EB0  0E00               	movlw	0
  4155  002EB2  1A5A               	xorwf	___ftneg@f1,f,c
  4156  002EB4  0E00               	movlw	0
  4157  002EB6  1A5B               	xorwf	___ftneg@f1+1,f,c
  4158  002EB8  0E80               	movlw	128
  4159  002EBA  1A5C               	xorwf	___ftneg@f1+2,f,c
  4160  002EBC                     l648:
  4161  002EBC  C05A  F05A         	movff	___ftneg@f1,?___ftneg
  4162  002EC0  C05B  F05B         	movff	___ftneg@f1+1,?___ftneg+1
  4163  002EC4  C05C  F05C         	movff	___ftneg@f1+2,?___ftneg+2
  4164  002EC8  0012               	return	
  4165  002ECA                     __end_of___ftneg:
  4166                           	opt stack 0
  4167                           tblptru	equ	0xFF8
  4168                           tblptrh	equ	0xFF7
  4169                           tblptrl	equ	0xFF6
  4170                           tablat	equ	0xFF5
  4171                           prodh	equ	0xFF4
  4172                           prodl	equ	0xFF3
  4173                           intcon	equ	0xFF2
  4174                           wreg	equ	0xFE8
  4175                           indf2	equ	0xFDF
  4176                           postinc2	equ	0xFDE
  4177                           postdec2	equ	0xFDD
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function ___ftge *****************
  4183 ;; Defined at:
  4184 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftge.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;  ff1             3    0[BANK0 ] float 
  4187 ;;  ff2             3    3[BANK0 ] float 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;		None               void
  4192 ;; Registers used:
  4193 ;;		wreg, status,2, status,0
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4199 ;;      Params:         0       6       0       0       0       0       0
  4200 ;;      Locals:         0       0       0       0       0       0       0
  4201 ;;      Temps:          3       0       0       0       0       0       0
  4202 ;;      Totals:         3       6       0       0       0       0       0
  4203 ;;Total ram usage:        9 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    1
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_sprintf
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text9
  4214  002628                     __ptext9:
  4215                           	opt stack 0
  4216  002628                     ___ftge:
  4217                           	opt stack 28
  4218                           
  4219                           ;incstack = 0
  4220                           ;incstack = 0
  4221  002628  0100               	movlb	0	; () banked
  4222  00262A  0100               	movlb	0	; () banked
  4223  00262C  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  4224  00262E  D01D               	goto	l5329
  4225                           
  4226                           ; BSR set to: 0
  4227  002630  0100               	movlb	0	; () banked
  4228  002632  C080  F06B         	movff	___ftge@ff1,??___ftge
  4229  002636  0100               	movlb	0	; () banked
  4230  002638  C081  F06C         	movff	___ftge@ff1+1,??___ftge+1
  4231  00263C  0100               	movlb	0	; () banked
  4232  00263E  C082  F06D         	movff	___ftge@ff1+2,??___ftge+2
  4233  002642  1E6B               	comf	??___ftge,f,c
  4234  002644  1E6C               	comf	??___ftge+1,f,c
  4235  002646  1E6D               	comf	??___ftge+2,f,c
  4236  002648  2A6B               	incf	??___ftge,f,c
  4237  00264A  0E00               	movlw	0
  4238  00264C  226C               	addwfc	??___ftge+1,f,c
  4239  00264E  226D               	addwfc	??___ftge+2,f,c
  4240  002650  0E00               	movlw	0
  4241  002652  246B               	addwf	??___ftge,w,c
  4242  002654  0100               	movlb	0	; () banked
  4243  002656  0100               	movlb	0	; () banked
  4244  002658  6F80               	movwf	___ftge@ff1& (0+255),b
  4245  00265A  0E00               	movlw	0
  4246  00265C  206C               	addwfc	??___ftge+1,w,c
  4247  00265E  0100               	movlb	0	; () banked
  4248  002660  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  4249  002662  0E80               	movlw	128
  4250  002664  206D               	addwfc	??___ftge+2,w,c
  4251  002666  0100               	movlb	0	; () banked
  4252  002668  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  4253  00266A                     l5329:
  4254                           
  4255                           ; BSR set to: 0
  4256  00266A  0100               	movlb	0	; () banked
  4257  00266C  0100               	movlb	0	; () banked
  4258  00266E  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  4259  002670  D01D               	goto	l5333
  4260                           
  4261                           ; BSR set to: 0
  4262  002672  0100               	movlb	0	; () banked
  4263  002674  C083  F06B         	movff	___ftge@ff2,??___ftge
  4264  002678  0100               	movlb	0	; () banked
  4265  00267A  C084  F06C         	movff	___ftge@ff2+1,??___ftge+1
  4266  00267E  0100               	movlb	0	; () banked
  4267  002680  C085  F06D         	movff	___ftge@ff2+2,??___ftge+2
  4268  002684  1E6B               	comf	??___ftge,f,c
  4269  002686  1E6C               	comf	??___ftge+1,f,c
  4270  002688  1E6D               	comf	??___ftge+2,f,c
  4271  00268A  2A6B               	incf	??___ftge,f,c
  4272  00268C  0E00               	movlw	0
  4273  00268E  226C               	addwfc	??___ftge+1,f,c
  4274  002690  226D               	addwfc	??___ftge+2,f,c
  4275  002692  0E00               	movlw	0
  4276  002694  246B               	addwf	??___ftge,w,c
  4277  002696  0100               	movlb	0	; () banked
  4278  002698  0100               	movlb	0	; () banked
  4279  00269A  6F83               	movwf	___ftge@ff2& (0+255),b
  4280  00269C  0E00               	movlw	0
  4281  00269E  206C               	addwfc	??___ftge+1,w,c
  4282  0026A0  0100               	movlb	0	; () banked
  4283  0026A2  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  4284  0026A4  0E80               	movlw	128
  4285  0026A6  206D               	addwfc	??___ftge+2,w,c
  4286  0026A8  0100               	movlb	0	; () banked
  4287  0026AA  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  4288  0026AC                     l5333:
  4289                           
  4290                           ; BSR set to: 0
  4291  0026AC  0E00               	movlw	0
  4292  0026AE  0100               	movlb	0	; () banked
  4293  0026B0  0100               	movlb	0	; () banked
  4294  0026B2  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  4295  0026B4  0E00               	movlw	0
  4296  0026B6  0100               	movlb	0	; () banked
  4297  0026B8  0100               	movlb	0	; () banked
  4298  0026BA  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  4299  0026BC  0E80               	movlw	128
  4300  0026BE  0100               	movlb	0	; () banked
  4301  0026C0  0100               	movlb	0	; () banked
  4302  0026C2  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  4303                           
  4304                           ; BSR set to: 0
  4305  0026C4  0E00               	movlw	0
  4306  0026C6  0100               	movlb	0	; () banked
  4307  0026C8  0100               	movlb	0	; () banked
  4308  0026CA  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  4309  0026CC  0E00               	movlw	0
  4310  0026CE  0100               	movlb	0	; () banked
  4311  0026D0  0100               	movlb	0	; () banked
  4312  0026D2  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  4313  0026D4  0E80               	movlw	128
  4314  0026D6  0100               	movlb	0	; () banked
  4315  0026D8  0100               	movlb	0	; () banked
  4316  0026DA  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  4317  0026DC  0100               	movlb	0	; () banked
  4318  0026DE  0100               	movlb	0	; () banked
  4319  0026E0  5183               	movf	___ftge@ff2& (0+255),w,b
  4320  0026E2  0100               	movlb	0	; () banked
  4321  0026E4  0100               	movlb	0	; () banked
  4322  0026E6  5D80               	subwf	___ftge@ff1& (0+255),w,b
  4323  0026E8  0100               	movlb	0	; () banked
  4324  0026EA  0100               	movlb	0	; () banked
  4325  0026EC  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  4326  0026EE  0100               	movlb	0	; () banked
  4327  0026F0  0100               	movlb	0	; () banked
  4328  0026F2  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  4329  0026F4  0100               	movlb	0	; () banked
  4330  0026F6  0100               	movlb	0	; () banked
  4331  0026F8  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  4332  0026FA  0100               	movlb	0	; () banked
  4333  0026FC  0100               	movlb	0	; () banked
  4334  0026FE  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  4335  002700  B0D8               	btfsc	status,0,c
  4336  002702  D002               	goto	l5339
  4337                           
  4338                           ; BSR set to: 0
  4339  002704  90D8               	bcf	status,0,c
  4340  002706  D001               	goto	l632
  4341  002708                     l5339:
  4342                           
  4343                           ; BSR set to: 0
  4344  002708  80D8               	bsf	status,0,c
  4345  00270A                     l632:
  4346                           
  4347                           ; BSR set to: 0
  4348  00270A  0012               	return	
  4349  00270C                     __end_of___ftge:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           intcon	equ	0xFF2
  4358                           wreg	equ	0xFE8
  4359                           indf2	equ	0xFDF
  4360                           postinc2	equ	0xFDE
  4361                           postdec2	equ	0xFDD
  4362                           fsr2h	equ	0xFDA
  4363                           fsr2l	equ	0xFD9
  4364                           status	equ	0xFD8
  4365                           
  4366 ;; *************** function ___asftsub *****************
  4367 ;; Defined at:
  4368 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftsub.c"
  4369 ;; Parameters:    Size  Location     Type
  4370 ;;  f1p             2    6[BANK0 ] PTR float 
  4371 ;;		 -> sprintf@fval(3), 
  4372 ;;  f2              3    8[BANK0 ] float 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  3    6[BANK0 ] float 
  4377 ;; Registers used:
  4378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4384 ;;      Params:         0       5       0       0       0       0       0
  4385 ;;      Locals:         0       0       0       0       0       0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0
  4387 ;;      Totals:         0       5       0       0       0       0       0
  4388 ;;Total ram usage:        5 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    4
  4391 ;; This function calls:
  4392 ;;		___ftsub
  4393 ;; This function is called by:
  4394 ;;		_sprintf
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           	psect	text10
  4399  002CDC                     __ptext10:
  4400                           	opt stack 0
  4401  002CDC                     ___asftsub:
  4402                           	opt stack 25
  4403                           
  4404                           ;	Return value of ___asftsub is never used
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;incstack = 0
  4408                           ;incstack = 0
  4409  002CDC  C086  FFD9         	movff	___asftsub@f1p,fsr2l
  4410  002CE0  C087  FFDA         	movff	___asftsub@f1p+1,fsr2h
  4411  002CE4  0100               	movlb	0	; () banked
  4412  002CE6  CFDE F080          	movff	postinc2,?___ftsub
  4413  002CEA  0100               	movlb	0	; () banked
  4414  002CEC  CFDE F081          	movff	postinc2,?___ftsub+1
  4415  002CF0  0100               	movlb	0	; () banked
  4416  002CF2  CFDD F082          	movff	postdec2,?___ftsub+2
  4417  002CF6  C088  F083         	movff	___asftsub@f2,?___ftsub+3
  4418  002CFA  C089  F084         	movff	___asftsub@f2+1,?___ftsub+4
  4419  002CFE  C08A  F085         	movff	___asftsub@f2+2,?___ftsub+5
  4420  002D02  EC8F  F016         	call	___ftsub	;wreg free
  4421  002D06  C086  FFD9         	movff	___asftsub@f1p,fsr2l
  4422  002D0A  C087  FFDA         	movff	___asftsub@f1p+1,fsr2h
  4423  002D0E  C080  FFDE         	movff	?___ftsub,postinc2
  4424  002D12  C081  FFDE         	movff	?___ftsub+1,postinc2
  4425  002D16  C082  FFDD         	movff	?___ftsub+2,postdec2
  4426  002D1A  52DD               	movf	postdec2,f,c
  4427  002D1C  0012               	return	
  4428  002D1E                     __end_of___asftsub:
  4429                           	opt stack 0
  4430                           tblptru	equ	0xFF8
  4431                           tblptrh	equ	0xFF7
  4432                           tblptrl	equ	0xFF6
  4433                           tablat	equ	0xFF5
  4434                           prodh	equ	0xFF4
  4435                           prodl	equ	0xFF3
  4436                           intcon	equ	0xFF2
  4437                           wreg	equ	0xFE8
  4438                           indf2	equ	0xFDF
  4439                           postinc2	equ	0xFDE
  4440                           postdec2	equ	0xFDD
  4441                           fsr2h	equ	0xFDA
  4442                           fsr2l	equ	0xFD9
  4443                           status	equ	0xFD8
  4444                           
  4445 ;; *************** function ___ftsub *****************
  4446 ;; Defined at:
  4447 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftsub.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  f1              3    0[BANK0 ] float 
  4450 ;;  f2              3    3[BANK0 ] float 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;		None
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  3    0[BANK0 ] float 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4462 ;;      Params:         0       6       0       0       0       0       0
  4463 ;;      Locals:         0       0       0       0       0       0       0
  4464 ;;      Temps:          0       0       0       0       0       0       0
  4465 ;;      Totals:         0       6       0       0       0       0       0
  4466 ;;Total ram usage:        6 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    3
  4469 ;; This function calls:
  4470 ;;		___ftadd
  4471 ;; This function is called by:
  4472 ;;		___asftsub
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text11
  4477  002D1E                     __ptext11:
  4478                           	opt stack 0
  4479  002D1E                     ___ftsub:
  4480                           	opt stack 25
  4481                           
  4482                           ;incstack = 0
  4483                           ;incstack = 0
  4484  002D1E  0E00               	movlw	0
  4485  002D20  0100               	movlb	0	; () banked
  4486  002D22  0100               	movlb	0	; () banked
  4487  002D24  1B83               	xorwf	___ftsub@f2& (0+255),f,b
  4488  002D26  0E00               	movlw	0
  4489  002D28  0100               	movlb	0	; () banked
  4490  002D2A  0100               	movlb	0	; () banked
  4491  002D2C  1B84               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4492  002D2E  0E80               	movlw	128
  4493  002D30  0100               	movlb	0	; () banked
  4494  002D32  0100               	movlb	0	; () banked
  4495  002D34  1B85               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4496                           
  4497                           ; BSR set to: 0
  4498  002D36  C080  F05D         	movff	___ftsub@f1,?___ftadd
  4499  002D3A  C081  F05E         	movff	___ftsub@f1+1,?___ftadd+1
  4500  002D3E  C082  F05F         	movff	___ftsub@f1+2,?___ftadd+2
  4501  002D42  C083  F060         	movff	___ftsub@f2,?___ftadd+3
  4502  002D46  C084  F061         	movff	___ftsub@f2+1,?___ftadd+4
  4503  002D4A  C085  F062         	movff	___ftsub@f2+2,?___ftadd+5
  4504  002D4E  ECF5  F00E         	call	___ftadd	;wreg free
  4505  002D52  C05F  F082         	movff	?___ftadd+2,?___ftsub+2
  4506  002D56  C05E  F081         	movff	?___ftadd+1,?___ftsub+1
  4507  002D5A  C05D  F080         	movff	?___ftadd,?___ftsub
  4508  002D5E  0012               	return	
  4509  002D60                     __end_of___ftsub:
  4510                           	opt stack 0
  4511                           tblptru	equ	0xFF8
  4512                           tblptrh	equ	0xFF7
  4513                           tblptrl	equ	0xFF6
  4514                           tablat	equ	0xFF5
  4515                           prodh	equ	0xFF4
  4516                           prodl	equ	0xFF3
  4517                           intcon	equ	0xFF2
  4518                           wreg	equ	0xFE8
  4519                           indf2	equ	0xFDF
  4520                           postinc2	equ	0xFDE
  4521                           postdec2	equ	0xFDD
  4522                           fsr2h	equ	0xFDA
  4523                           fsr2l	equ	0xFD9
  4524                           status	equ	0xFD8
  4525                           
  4526 ;; *************** function ___ftadd *****************
  4527 ;; Defined at:
  4528 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftadd.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;  f1              3   92[COMRAM] float 
  4531 ;;  f2              3   95[COMRAM] float 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  exp1            1  105[COMRAM] unsigned char 
  4534 ;;  exp2            1  104[COMRAM] unsigned char 
  4535 ;;  sign            1  103[COMRAM] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  3   92[COMRAM] float 
  4538 ;; Registers used:
  4539 ;;		wreg, status,2, status,0, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4545 ;;      Params:         6       0       0       0       0       0       0
  4546 ;;      Locals:         3       0       0       0       0       0       0
  4547 ;;      Temps:          5       0       0       0       0       0       0
  4548 ;;      Totals:        14       0       0       0       0       0       0
  4549 ;;Total ram usage:       14 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:    2
  4552 ;; This function calls:
  4553 ;;		___ftpack
  4554 ;; This function is called by:
  4555 ;;		_sprintf
  4556 ;;		___asftadd
  4557 ;;		___ftsub
  4558 ;; This function uses a non-reentrant model
  4559 ;;
  4560                           
  4561                           	psect	text12
  4562  001DEA                     __ptext12:
  4563                           	opt stack 0
  4564  001DEA                     ___ftadd:
  4565                           	opt stack 25
  4566                           
  4567                           ;incstack = 0
  4568                           ;incstack = 0
  4569  001DEA  0E0F               	movlw	15
  4570  001DEC  6E63               	movwf	??___ftadd& (0+255),c
  4571  001DEE  C05D  F064         	movff	___ftadd@f1,??___ftadd+1
  4572  001DF2  C05E  F065         	movff	___ftadd@f1+1,??___ftadd+2
  4573  001DF6  C05F  F066         	movff	___ftadd@f1+2,??___ftadd+3
  4574  001DFA  2863               	incf	??___ftadd,w,c
  4575  001DFC  6E67               	movwf	(??___ftadd+4)& (0+255),c
  4576  001DFE  D004               	goto	u2710
  4577  001E00                     u2715:
  4578  001E00  90D8               	bcf	status,0,c
  4579  001E02  3266               	rrcf	??___ftadd+3,f,c
  4580  001E04  3265               	rrcf	??___ftadd+2,f,c
  4581  001E06  3264               	rrcf	??___ftadd+1,f,c
  4582  001E08                     u2710:
  4583  001E08  2E67               	decfsz	(??___ftadd+4)& (0+255),f,c
  4584  001E0A  D7FA               	goto	u2715
  4585  001E0C  5064               	movf	??___ftadd+1,w,c
  4586  001E0E  6E6A               	movwf	___ftadd@exp1,c
  4587  001E10  0E0F               	movlw	15
  4588  001E12  6E63               	movwf	??___ftadd& (0+255),c
  4589  001E14  C060  F064         	movff	___ftadd@f2,??___ftadd+1
  4590  001E18  C061  F065         	movff	___ftadd@f2+1,??___ftadd+2
  4591  001E1C  C062  F066         	movff	___ftadd@f2+2,??___ftadd+3
  4592  001E20  2863               	incf	??___ftadd,w,c
  4593  001E22  6E67               	movwf	(??___ftadd+4)& (0+255),c
  4594  001E24  D004               	goto	u2720
  4595  001E26                     u2725:
  4596  001E26  90D8               	bcf	status,0,c
  4597  001E28  3266               	rrcf	??___ftadd+3,f,c
  4598  001E2A  3265               	rrcf	??___ftadd+2,f,c
  4599  001E2C  3264               	rrcf	??___ftadd+1,f,c
  4600  001E2E                     u2720:
  4601  001E2E  2E67               	decfsz	(??___ftadd+4)& (0+255),f,c
  4602  001E30  D7FA               	goto	u2725
  4603  001E32  5064               	movf	??___ftadd+1,w,c
  4604  001E34  6E69               	movwf	___ftadd@exp2,c
  4605  001E36  506A               	movf	___ftadd@exp1,w,c
  4606  001E38  B4D8               	btfsc	status,2,c
  4607  001E3A  D00B               	goto	l574
  4608  001E3C  5069               	movf	___ftadd@exp2,w,c
  4609  001E3E  606A               	cpfslt	___ftadd@exp1,c
  4610  001E40  D00F               	goto	l4425
  4611  001E42  506A               	movf	___ftadd@exp1,w,c
  4612  001E44  0800               	sublw	0
  4613  001E46  2469               	addwf	___ftadd@exp2,w,c
  4614  001E48  6E63               	movwf	??___ftadd& (0+255),c
  4615  001E4A  0E19               	movlw	25
  4616  001E4C  5C63               	subwf	??___ftadd,w,c
  4617  001E4E  A0D8               	btfss	status,0,c
  4618  001E50  D007               	goto	l4425
  4619  001E52                     l574:
  4620  001E52  C060  F05D         	movff	___ftadd@f2,?___ftadd
  4621  001E56  C061  F05E         	movff	___ftadd@f2+1,?___ftadd+1
  4622  001E5A  C062  F05F         	movff	___ftadd@f2+2,?___ftadd+2
  4623  001E5E  D0AA               	goto	l575
  4624  001E60                     l4425:
  4625  001E60  5069               	movf	___ftadd@exp2,w,c
  4626  001E62  B4D8               	btfsc	status,2,c
  4627  001E64  D00B               	goto	l578
  4628  001E66  506A               	movf	___ftadd@exp1,w,c
  4629  001E68  6069               	cpfslt	___ftadd@exp2,c
  4630  001E6A  D00F               	goto	l4431
  4631  001E6C  5069               	movf	___ftadd@exp2,w,c
  4632  001E6E  0800               	sublw	0
  4633  001E70  246A               	addwf	___ftadd@exp1,w,c
  4634  001E72  6E63               	movwf	??___ftadd& (0+255),c
  4635  001E74  0E19               	movlw	25
  4636  001E76  5C63               	subwf	??___ftadd,w,c
  4637  001E78  A0D8               	btfss	status,0,c
  4638  001E7A  D007               	goto	l4431
  4639  001E7C                     l578:
  4640  001E7C  C05D  F05D         	movff	___ftadd@f1,?___ftadd
  4641  001E80  C05E  F05E         	movff	___ftadd@f1+1,?___ftadd+1
  4642  001E84  C05F  F05F         	movff	___ftadd@f1+2,?___ftadd+2
  4643  001E88  D095               	goto	l575
  4644  001E8A                     l4431:
  4645  001E8A  6E63               	movwf	??___ftadd& (0+255),c
  4646  001E8C  0E06               	movlw	6
  4647  001E8E  6E68               	movwf	___ftadd@sign,c
  4648  001E90  5063               	movf	??___ftadd& (0+255),w,c
  4649  001E92  BE5F               	btfsc	___ftadd@f1+2,7,c
  4650  001E94  8E68               	bsf	___ftadd@sign,7,c
  4651  001E96  BE62               	btfsc	___ftadd@f2+2,7,c
  4652  001E98  8C68               	bsf	___ftadd@sign,6,c
  4653  001E9A  8E5E               	bsf	___ftadd@f1+1,7,c
  4654  001E9C  0EFF               	movlw	255
  4655  001E9E  165D               	andwf	___ftadd@f1,f,c
  4656  001EA0  0EFF               	movlw	255
  4657  001EA2  165E               	andwf	___ftadd@f1+1,f,c
  4658  001EA4  0E00               	movlw	0
  4659  001EA6  165F               	andwf	___ftadd@f1+2,f,c
  4660  001EA8  8E61               	bsf	___ftadd@f2+1,7,c
  4661  001EAA  0EFF               	movlw	255
  4662  001EAC  1660               	andwf	___ftadd@f2,f,c
  4663  001EAE  0EFF               	movlw	255
  4664  001EB0  1661               	andwf	___ftadd@f2+1,f,c
  4665  001EB2  0E00               	movlw	0
  4666  001EB4  1662               	andwf	___ftadd@f2+2,f,c
  4667  001EB6  5069               	movf	___ftadd@exp2,w,c
  4668  001EB8  606A               	cpfslt	___ftadd@exp1,c
  4669  001EBA  D018               	goto	l4457
  4670  001EBC                     l4447:
  4671  001EBC  90D8               	bcf	status,0,c
  4672  001EBE  3660               	rlcf	___ftadd@f2,f,c
  4673  001EC0  3661               	rlcf	___ftadd@f2+1,f,c
  4674  001EC2  3662               	rlcf	___ftadd@f2+2,f,c
  4675  001EC4  0669               	decf	___ftadd@exp2,f,c
  4676  001EC6  5069               	movf	___ftadd@exp2,w,c
  4677  001EC8  186A               	xorwf	___ftadd@exp1,w,c
  4678  001ECA  B4D8               	btfsc	status,2,c
  4679  001ECC  D00B               	goto	l4455
  4680  001ECE  0668               	decf	___ftadd@sign,f,c
  4681  001ED0  5068               	movf	___ftadd@sign& (0+255),w,c
  4682  001ED2  0B07               	andlw	7
  4683  001ED4  B4D8               	btfsc	status,2,c
  4684  001ED6  D006               	goto	l4455
  4685  001ED8  D7F1               	goto	l4447
  4686  001EDA                     l4453:
  4687  001EDA  90D8               	bcf	status,0,c
  4688  001EDC  325F               	rrcf	___ftadd@f1+2,f,c
  4689  001EDE  325E               	rrcf	___ftadd@f1+1,f,c
  4690  001EE0  325D               	rrcf	___ftadd@f1,f,c
  4691  001EE2  2A6A               	incf	___ftadd@exp1,f,c
  4692  001EE4                     l4455:
  4693  001EE4  5069               	movf	___ftadd@exp2,w,c
  4694  001EE6  626A               	cpfseq	___ftadd@exp1,c
  4695  001EE8  D7F8               	goto	l4453
  4696  001EEA  D01A               	goto	l589
  4697  001EEC                     l4457:
  4698  001EEC  506A               	movf	___ftadd@exp1,w,c
  4699  001EEE  6069               	cpfslt	___ftadd@exp2,c
  4700  001EF0  D017               	goto	l589
  4701  001EF2                     l4459:
  4702  001EF2  90D8               	bcf	status,0,c
  4703  001EF4  365D               	rlcf	___ftadd@f1,f,c
  4704  001EF6  365E               	rlcf	___ftadd@f1+1,f,c
  4705  001EF8  365F               	rlcf	___ftadd@f1+2,f,c
  4706  001EFA  066A               	decf	___ftadd@exp1,f,c
  4707  001EFC  5069               	movf	___ftadd@exp2,w,c
  4708  001EFE  186A               	xorwf	___ftadd@exp1,w,c
  4709  001F00  B4D8               	btfsc	status,2,c
  4710  001F02  D00B               	goto	l4467
  4711  001F04  0668               	decf	___ftadd@sign,f,c
  4712  001F06  5068               	movf	___ftadd@sign& (0+255),w,c
  4713  001F08  0B07               	andlw	7
  4714  001F0A  B4D8               	btfsc	status,2,c
  4715  001F0C  D006               	goto	l4467
  4716  001F0E  D7F1               	goto	l4459
  4717  001F10                     l4465:
  4718  001F10  90D8               	bcf	status,0,c
  4719  001F12  3262               	rrcf	___ftadd@f2+2,f,c
  4720  001F14  3261               	rrcf	___ftadd@f2+1,f,c
  4721  001F16  3260               	rrcf	___ftadd@f2,f,c
  4722  001F18  2A69               	incf	___ftadd@exp2,f,c
  4723  001F1A                     l4467:
  4724  001F1A  5069               	movf	___ftadd@exp2,w,c
  4725  001F1C  626A               	cpfseq	___ftadd@exp1,c
  4726  001F1E  D7F8               	goto	l4465
  4727  001F20                     l589:
  4728  001F20  AE68               	btfss	___ftadd@sign,7,c
  4729  001F22  D00C               	goto	l598
  4730  001F24  0EFF               	movlw	255
  4731  001F26  1A5D               	xorwf	___ftadd@f1,f,c
  4732  001F28  0EFF               	movlw	255
  4733  001F2A  1A5E               	xorwf	___ftadd@f1+1,f,c
  4734  001F2C  0EFF               	movlw	255
  4735  001F2E  1A5F               	xorwf	___ftadd@f1+2,f,c
  4736  001F30  0E01               	movlw	1
  4737  001F32  265D               	addwf	___ftadd@f1,f,c
  4738  001F34  0E00               	movlw	0
  4739  001F36  225E               	addwfc	___ftadd@f1+1,f,c
  4740  001F38  0E00               	movlw	0
  4741  001F3A  225F               	addwfc	___ftadd@f1+2,f,c
  4742  001F3C                     l598:
  4743  001F3C  AC68               	btfss	___ftadd@sign,6,c
  4744  001F3E  D00C               	goto	l4473
  4745  001F40  0EFF               	movlw	255
  4746  001F42  1A60               	xorwf	___ftadd@f2,f,c
  4747  001F44  0EFF               	movlw	255
  4748  001F46  1A61               	xorwf	___ftadd@f2+1,f,c
  4749  001F48  0EFF               	movlw	255
  4750  001F4A  1A62               	xorwf	___ftadd@f2+2,f,c
  4751  001F4C  0E01               	movlw	1
  4752  001F4E  2660               	addwf	___ftadd@f2,f,c
  4753  001F50  0E00               	movlw	0
  4754  001F52  2261               	addwfc	___ftadd@f2+1,f,c
  4755  001F54  0E00               	movlw	0
  4756  001F56  2262               	addwfc	___ftadd@f2+2,f,c
  4757  001F58                     l4473:
  4758  001F58  6E63               	movwf	??___ftadd& (0+255),c
  4759  001F5A  0E00               	movlw	0
  4760  001F5C  6E68               	movwf	___ftadd@sign,c
  4761  001F5E  5063               	movf	??___ftadd& (0+255),w,c
  4762  001F60  505D               	movf	___ftadd@f1,w,c
  4763  001F62  2660               	addwf	___ftadd@f2,f,c
  4764  001F64  505E               	movf	___ftadd@f1+1,w,c
  4765  001F66  2261               	addwfc	___ftadd@f2+1,f,c
  4766  001F68  505F               	movf	___ftadd@f1+2,w,c
  4767  001F6A  2262               	addwfc	___ftadd@f2+2,f,c
  4768  001F6C  AE62               	btfss	___ftadd@f2+2,7,c
  4769  001F6E  D010               	goto	l4483
  4770  001F70  0EFF               	movlw	255
  4771  001F72  1A60               	xorwf	___ftadd@f2,f,c
  4772  001F74  0EFF               	movlw	255
  4773  001F76  1A61               	xorwf	___ftadd@f2+1,f,c
  4774  001F78  0EFF               	movlw	255
  4775  001F7A  1A62               	xorwf	___ftadd@f2+2,f,c
  4776  001F7C  0E01               	movlw	1
  4777  001F7E  2660               	addwf	___ftadd@f2,f,c
  4778  001F80  0E00               	movlw	0
  4779  001F82  2261               	addwfc	___ftadd@f2+1,f,c
  4780  001F84  0E00               	movlw	0
  4781  001F86  2262               	addwfc	___ftadd@f2+2,f,c
  4782  001F88  6E63               	movwf	??___ftadd& (0+255),c
  4783  001F8A  0E01               	movlw	1
  4784  001F8C  6E68               	movwf	___ftadd@sign,c
  4785  001F8E  5063               	movf	??___ftadd& (0+255),w,c
  4786  001F90                     l4483:
  4787  001F90  C060  F00F         	movff	___ftadd@f2,?___ftpack
  4788  001F94  C061  F010         	movff	___ftadd@f2+1,?___ftpack+1
  4789  001F98  C062  F011         	movff	___ftadd@f2+2,?___ftpack+2
  4790  001F9C  C06A  F012         	movff	___ftadd@exp1,?___ftpack+3
  4791  001FA0  C068  F013         	movff	___ftadd@sign,?___ftpack+4
  4792  001FA4  ECF6  F013         	call	___ftpack	;wreg free
  4793  001FA8  C011  F05F         	movff	?___ftpack+2,?___ftadd+2
  4794  001FAC  C010  F05E         	movff	?___ftpack+1,?___ftadd+1
  4795  001FB0  C00F  F05D         	movff	?___ftpack,?___ftadd
  4796  001FB4                     l575:
  4797  001FB4  0012               	return	
  4798  001FB6                     __end_of___ftadd:
  4799                           	opt stack 0
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           intcon	equ	0xFF2
  4807                           wreg	equ	0xFE8
  4808                           indf2	equ	0xFDF
  4809                           postinc2	equ	0xFDE
  4810                           postdec2	equ	0xFDD
  4811                           fsr2h	equ	0xFDA
  4812                           fsr2l	equ	0xFD9
  4813                           status	equ	0xFD8
  4814                           
  4815 ;; *************** function ___asftmul *****************
  4816 ;; Defined at:
  4817 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftmul.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  f1p             2    0[BANK0 ] PTR float 
  4820 ;;		 -> sprintf@temp(3), sprintf@integ(3), sprintf@fval(3), 
  4821 ;;  f2              3    2[BANK0 ] float 
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;		None
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  3    0[BANK0 ] float 
  4826 ;; Registers used:
  4827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4833 ;;      Params:         0       5       0       0       0       0       0
  4834 ;;      Locals:         0       0       0       0       0       0       0
  4835 ;;      Temps:          0       0       0       0       0       0       0
  4836 ;;      Totals:         0       5       0       0       0       0       0
  4837 ;;Total ram usage:        5 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    3
  4840 ;; This function calls:
  4841 ;;		___ftmul
  4842 ;; This function is called by:
  4843 ;;		_sprintf
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text13
  4848  002D60                     __ptext13:
  4849                           	opt stack 0
  4850  002D60                     ___asftmul:
  4851                           	opt stack 26
  4852                           
  4853                           ;	Return value of ___asftmul is never used
  4854                           
  4855                           ;incstack = 0
  4856                           ;incstack = 0
  4857  002D60  C080  FFD9         	movff	___asftmul@f1p,fsr2l
  4858  002D64  C081  FFDA         	movff	___asftmul@f1p+1,fsr2h
  4859  002D68  CFDE F025          	movff	postinc2,?___ftmul
  4860  002D6C  CFDE F026          	movff	postinc2,?___ftmul+1
  4861  002D70  CFDD F027          	movff	postdec2,?___ftmul+2
  4862  002D74  C082  F028         	movff	___asftmul@f2,?___ftmul+3
  4863  002D78  C083  F029         	movff	___asftmul@f2+1,?___ftmul+4
  4864  002D7C  C084  F02A         	movff	___asftmul@f2+2,?___ftmul+5
  4865  002D80  EC1B  F011         	call	___ftmul	;wreg free
  4866  002D84  C080  FFD9         	movff	___asftmul@f1p,fsr2l
  4867  002D88  C081  FFDA         	movff	___asftmul@f1p+1,fsr2h
  4868  002D8C  C025  FFDE         	movff	?___ftmul,postinc2
  4869  002D90  C026  FFDE         	movff	?___ftmul+1,postinc2
  4870  002D94  C027  FFDD         	movff	?___ftmul+2,postdec2
  4871  002D98  52DD               	movf	postdec2,f,c
  4872  002D9A  0012               	return	
  4873  002D9C                     __end_of___asftmul:
  4874                           	opt stack 0
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           intcon	equ	0xFF2
  4882                           wreg	equ	0xFE8
  4883                           indf2	equ	0xFDF
  4884                           postinc2	equ	0xFDE
  4885                           postdec2	equ	0xFDD
  4886                           fsr2h	equ	0xFDA
  4887                           fsr2l	equ	0xFD9
  4888                           status	equ	0xFD8
  4889                           
  4890 ;; *************** function ___asftdiv *****************
  4891 ;; Defined at:
  4892 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftdiv.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;  f1p             2   70[COMRAM] PTR float 
  4895 ;;		 -> sprintf@fval(3), 
  4896 ;;  f2              3   72[COMRAM] float 
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  3   70[COMRAM] float 
  4901 ;; Registers used:
  4902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4908 ;;      Params:         5       0       0       0       0       0       0
  4909 ;;      Locals:         0       0       0       0       0       0       0
  4910 ;;      Temps:          0       0       0       0       0       0       0
  4911 ;;      Totals:         5       0       0       0       0       0       0
  4912 ;;Total ram usage:        5 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:    3
  4915 ;; This function calls:
  4916 ;;		___ftdiv
  4917 ;; This function is called by:
  4918 ;;		_sprintf
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text14
  4923  002D9C                     __ptext14:
  4924                           	opt stack 0
  4925  002D9C                     ___asftdiv:
  4926                           	opt stack 26
  4927                           
  4928                           ;	Return value of ___asftdiv is never used
  4929                           
  4930                           ;incstack = 0
  4931                           ;incstack = 0
  4932  002D9C  C047  FFD9         	movff	___asftdiv@f1p,fsr2l
  4933  002DA0  C048  FFDA         	movff	___asftdiv@f1p+1,fsr2h
  4934  002DA4  CFDE F036          	movff	postinc2,?___ftdiv
  4935  002DA8  CFDE F037          	movff	postinc2,?___ftdiv+1
  4936  002DAC  CFDD F038          	movff	postdec2,?___ftdiv+2
  4937  002DB0  C049  F039         	movff	___asftdiv@f2,?___ftdiv+3
  4938  002DB4  C04A  F03A         	movff	___asftdiv@f2+1,?___ftdiv+4
  4939  002DB8  C04B  F03B         	movff	___asftdiv@f2+2,?___ftdiv+5
  4940  002DBC  ECA3  F011         	call	___ftdiv	;wreg free
  4941  002DC0  C047  FFD9         	movff	___asftdiv@f1p,fsr2l
  4942  002DC4  C048  FFDA         	movff	___asftdiv@f1p+1,fsr2h
  4943  002DC8  C036  FFDE         	movff	?___ftdiv,postinc2
  4944  002DCC  C037  FFDE         	movff	?___ftdiv+1,postinc2
  4945  002DD0  C038  FFDD         	movff	?___ftdiv+2,postdec2
  4946  002DD4  52DD               	movf	postdec2,f,c
  4947  002DD6  0012               	return	
  4948  002DD8                     __end_of___asftdiv:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           wreg	equ	0xFE8
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function ___ftdiv *****************
  4966 ;; Defined at:
  4967 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftdiv.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  f1              3   53[COMRAM] float 
  4970 ;;  f2              3   56[COMRAM] float 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  f3              3   65[COMRAM] float 
  4973 ;;  sign            1   69[COMRAM] unsigned char 
  4974 ;;  exp             1   68[COMRAM] unsigned char 
  4975 ;;  cntr            1   64[COMRAM] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  3   53[COMRAM] float 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4985 ;;      Params:         6       0       0       0       0       0       0
  4986 ;;      Locals:         6       0       0       0       0       0       0
  4987 ;;      Temps:          5       0       0       0       0       0       0
  4988 ;;      Totals:        17       0       0       0       0       0       0
  4989 ;;Total ram usage:       17 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    2
  4992 ;; This function calls:
  4993 ;;		___ftpack
  4994 ;; This function is called by:
  4995 ;;		_main
  4996 ;;		___asftdiv
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text15
  5001  002346                     __ptext15:
  5002                           	opt stack 0
  5003  002346                     ___ftdiv:
  5004                           	opt stack 28
  5005                           
  5006                           ;incstack = 0
  5007                           ;incstack = 0
  5008  002346  0E0F               	movlw	15
  5009  002348  6E3C               	movwf	??___ftdiv& (0+255),c
  5010  00234A  C036  F03D         	movff	___ftdiv@f1,??___ftdiv+1
  5011  00234E  C037  F03E         	movff	___ftdiv@f1+1,??___ftdiv+2
  5012  002352  C038  F03F         	movff	___ftdiv@f1+2,??___ftdiv+3
  5013  002356  283C               	incf	??___ftdiv,w,c
  5014  002358  6E40               	movwf	(??___ftdiv+4)& (0+255),c
  5015  00235A  D004               	goto	u2920
  5016  00235C                     u2925:
  5017  00235C  90D8               	bcf	status,0,c
  5018  00235E  323F               	rrcf	??___ftdiv+3,f,c
  5019  002360  323E               	rrcf	??___ftdiv+2,f,c
  5020  002362  323D               	rrcf	??___ftdiv+1,f,c
  5021  002364                     u2920:
  5022  002364  2E40               	decfsz	(??___ftdiv+4)& (0+255),f,c
  5023  002366  D7FA               	goto	u2925
  5024  002368  503D               	movf	??___ftdiv+1,w,c
  5025  00236A  6E45               	movwf	___ftdiv@exp,c
  5026  00236C  6645               	tstfsz	___ftdiv@exp& (0+255),c
  5027  00236E  D001               	goto	l4497
  5028  002370  D015               	goto	u2950
  5029  002372                     l4497:
  5030  002372  0E0F               	movlw	15
  5031  002374  6E3C               	movwf	??___ftdiv& (0+255),c
  5032  002376  C039  F03D         	movff	___ftdiv@f2,??___ftdiv+1
  5033  00237A  C03A  F03E         	movff	___ftdiv@f2+1,??___ftdiv+2
  5034  00237E  C03B  F03F         	movff	___ftdiv@f2+2,??___ftdiv+3
  5035  002382  283C               	incf	??___ftdiv,w,c
  5036  002384  6E40               	movwf	(??___ftdiv+4)& (0+255),c
  5037  002386  D004               	goto	u2940
  5038  002388                     u2945:
  5039  002388  90D8               	bcf	status,0,c
  5040  00238A  323F               	rrcf	??___ftdiv+3,f,c
  5041  00238C  323E               	rrcf	??___ftdiv+2,f,c
  5042  00238E  323D               	rrcf	??___ftdiv+1,f,c
  5043  002390                     u2940:
  5044  002390  2E40               	decfsz	(??___ftdiv+4)& (0+255),f,c
  5045  002392  D7FA               	goto	u2945
  5046  002394  503D               	movf	??___ftdiv+1,w,c
  5047  002396  6E46               	movwf	___ftdiv@sign,c
  5048  002398  6646               	tstfsz	___ftdiv@sign& (0+255),c
  5049  00239A  D007               	goto	l4503
  5050  00239C                     u2950:
  5051  00239C  0E00               	movlw	0
  5052  00239E  6E36               	movwf	?___ftdiv,c
  5053  0023A0  0E00               	movlw	0
  5054  0023A2  6E37               	movwf	?___ftdiv+1,c
  5055  0023A4  0E00               	movlw	0
  5056  0023A6  6E38               	movwf	?___ftdiv+2,c
  5057  0023A8  D04C               	goto	l606
  5058  0023AA                     l4503:
  5059  0023AA  0E00               	movlw	0
  5060  0023AC  6E42               	movwf	___ftdiv@f3,c
  5061  0023AE  0E00               	movlw	0
  5062  0023B0  6E43               	movwf	___ftdiv@f3+1,c
  5063  0023B2  0E00               	movlw	0
  5064  0023B4  6E44               	movwf	___ftdiv@f3+2,c
  5065  0023B6  5046               	movf	___ftdiv@sign,w,c
  5066  0023B8  0F89               	addlw	137
  5067  0023BA  5E45               	subwf	___ftdiv@exp,f,c
  5068  0023BC  C038  F046         	movff	___ftdiv@f1+2,___ftdiv@sign
  5069  0023C0  503B               	movf	(___ftdiv@f2+2)& (0+255),w,c
  5070  0023C2  1A46               	xorwf	___ftdiv@sign,f,c
  5071  0023C4  0E80               	movlw	128
  5072  0023C6  1646               	andwf	___ftdiv@sign,f,c
  5073  0023C8  8E37               	bsf	___ftdiv@f1+1,7,c
  5074  0023CA  0EFF               	movlw	255
  5075  0023CC  1636               	andwf	___ftdiv@f1,f,c
  5076  0023CE  0EFF               	movlw	255
  5077  0023D0  1637               	andwf	___ftdiv@f1+1,f,c
  5078  0023D2  0E00               	movlw	0
  5079  0023D4  1638               	andwf	___ftdiv@f1+2,f,c
  5080  0023D6  8E3A               	bsf	___ftdiv@f2+1,7,c
  5081  0023D8  0EFF               	movlw	255
  5082  0023DA  1639               	andwf	___ftdiv@f2,f,c
  5083  0023DC  0EFF               	movlw	255
  5084  0023DE  163A               	andwf	___ftdiv@f2+1,f,c
  5085  0023E0  0E00               	movlw	0
  5086  0023E2  163B               	andwf	___ftdiv@f2+2,f,c
  5087  0023E4  6E3C               	movwf	??___ftdiv& (0+255),c
  5088  0023E6  0E18               	movlw	24
  5089  0023E8  6E41               	movwf	___ftdiv@cntr,c
  5090  0023EA  503C               	movf	??___ftdiv& (0+255),w,c
  5091  0023EC                     l608:
  5092  0023EC  90D8               	bcf	status,0,c
  5093  0023EE  3642               	rlcf	___ftdiv@f3,f,c
  5094  0023F0  3643               	rlcf	___ftdiv@f3+1,f,c
  5095  0023F2  3644               	rlcf	___ftdiv@f3+2,f,c
  5096  0023F4  5039               	movf	___ftdiv@f2,w,c
  5097  0023F6  5C36               	subwf	___ftdiv@f1,w,c
  5098  0023F8  503A               	movf	___ftdiv@f2+1,w,c
  5099  0023FA  5837               	subwfb	___ftdiv@f1+1,w,c
  5100  0023FC  503B               	movf	___ftdiv@f2+2,w,c
  5101  0023FE  5838               	subwfb	___ftdiv@f1+2,w,c
  5102  002400  A0D8               	btfss	status,0,c
  5103  002402  D007               	goto	l609
  5104  002404  5039               	movf	___ftdiv@f2,w,c
  5105  002406  5E36               	subwf	___ftdiv@f1,f,c
  5106  002408  503A               	movf	___ftdiv@f2+1,w,c
  5107  00240A  5A37               	subwfb	___ftdiv@f1+1,f,c
  5108  00240C  503B               	movf	___ftdiv@f2+2,w,c
  5109  00240E  5A38               	subwfb	___ftdiv@f1+2,f,c
  5110  002410  8042               	bsf	___ftdiv@f3,0,c
  5111  002412                     l609:
  5112  002412  90D8               	bcf	status,0,c
  5113  002414  3636               	rlcf	___ftdiv@f1,f,c
  5114  002416  3637               	rlcf	___ftdiv@f1+1,f,c
  5115  002418  3638               	rlcf	___ftdiv@f1+2,f,c
  5116  00241A  2E41               	decfsz	___ftdiv@cntr,f,c
  5117  00241C  D7E7               	goto	l608
  5118  00241E  C042  F00F         	movff	___ftdiv@f3,?___ftpack
  5119  002422  C043  F010         	movff	___ftdiv@f3+1,?___ftpack+1
  5120  002426  C044  F011         	movff	___ftdiv@f3+2,?___ftpack+2
  5121  00242A  C045  F012         	movff	___ftdiv@exp,?___ftpack+3
  5122  00242E  C046  F013         	movff	___ftdiv@sign,?___ftpack+4
  5123  002432  ECF6  F013         	call	___ftpack	;wreg free
  5124  002436  C011  F038         	movff	?___ftpack+2,?___ftdiv+2
  5125  00243A  C010  F037         	movff	?___ftpack+1,?___ftdiv+1
  5126  00243E  C00F  F036         	movff	?___ftpack,?___ftdiv
  5127  002442                     l606:
  5128  002442  0012               	return	
  5129  002444                     __end_of___ftdiv:
  5130                           	opt stack 0
  5131                           tblptru	equ	0xFF8
  5132                           tblptrh	equ	0xFF7
  5133                           tblptrl	equ	0xFF6
  5134                           tablat	equ	0xFF5
  5135                           prodh	equ	0xFF4
  5136                           prodl	equ	0xFF3
  5137                           intcon	equ	0xFF2
  5138                           wreg	equ	0xFE8
  5139                           indf2	equ	0xFDF
  5140                           postinc2	equ	0xFDE
  5141                           postdec2	equ	0xFDD
  5142                           fsr2h	equ	0xFDA
  5143                           fsr2l	equ	0xFD9
  5144                           status	equ	0xFD8
  5145                           
  5146 ;; *************** function ___asftadd *****************
  5147 ;; Defined at:
  5148 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftadd.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  f1p             2    0[BANK0 ] PTR float 
  5151 ;;		 -> sprintf@fval(3), 
  5152 ;;  f2              3    2[BANK0 ] float 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;		None
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  3    0[BANK0 ] float 
  5157 ;; Registers used:
  5158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5164 ;;      Params:         0       5       0       0       0       0       0
  5165 ;;      Locals:         0       0       0       0       0       0       0
  5166 ;;      Temps:          0       0       0       0       0       0       0
  5167 ;;      Totals:         0       5       0       0       0       0       0
  5168 ;;Total ram usage:        5 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    3
  5171 ;; This function calls:
  5172 ;;		___ftadd
  5173 ;; This function is called by:
  5174 ;;		_sprintf
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           	psect	text16
  5179  002DD8                     __ptext16:
  5180                           	opt stack 0
  5181  002DD8                     ___asftadd:
  5182                           	opt stack 26
  5183                           
  5184                           ;	Return value of ___asftadd is never used
  5185                           
  5186                           ;incstack = 0
  5187                           ;incstack = 0
  5188  002DD8  C080  FFD9         	movff	___asftadd@f1p,fsr2l
  5189  002DDC  C081  FFDA         	movff	___asftadd@f1p+1,fsr2h
  5190  002DE0  CFDE F05D          	movff	postinc2,?___ftadd
  5191  002DE4  CFDE F05E          	movff	postinc2,?___ftadd+1
  5192  002DE8  CFDD F05F          	movff	postdec2,?___ftadd+2
  5193  002DEC  C082  F060         	movff	___asftadd@f2,?___ftadd+3
  5194  002DF0  C083  F061         	movff	___asftadd@f2+1,?___ftadd+4
  5195  002DF4  C084  F062         	movff	___asftadd@f2+2,?___ftadd+5
  5196  002DF8  ECF5  F00E         	call	___ftadd	;wreg free
  5197  002DFC  C080  FFD9         	movff	___asftadd@f1p,fsr2l
  5198  002E00  C081  FFDA         	movff	___asftadd@f1p+1,fsr2h
  5199  002E04  C05D  FFDE         	movff	?___ftadd,postinc2
  5200  002E08  C05E  FFDE         	movff	?___ftadd+1,postinc2
  5201  002E0C  C05F  FFDD         	movff	?___ftadd+2,postdec2
  5202  002E10  52DD               	movf	postdec2,f,c
  5203  002E12  0012               	return	
  5204  002E14                     __end_of___asftadd:
  5205                           	opt stack 0
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           prodh	equ	0xFF4
  5211                           prodl	equ	0xFF3
  5212                           intcon	equ	0xFF2
  5213                           wreg	equ	0xFE8
  5214                           indf2	equ	0xFDF
  5215                           postinc2	equ	0xFDE
  5216                           postdec2	equ	0xFDD
  5217                           fsr2h	equ	0xFDA
  5218                           fsr2l	equ	0xFD9
  5219                           status	equ	0xFD8
  5220                           
  5221 ;; *************** function __div_to_l_ *****************
  5222 ;; Defined at:
  5223 ;;		line 61 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldivl.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  f1              3   14[COMRAM] float 
  5226 ;;  f2              3   17[COMRAM] float 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  quot            4   21[COMRAM] unsigned long 
  5229 ;;  exp1            1   26[COMRAM] unsigned char 
  5230 ;;  cntr            1   25[COMRAM] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  4   14[COMRAM] unsigned long 
  5233 ;; Registers used:
  5234 ;;		wreg, status,2, status,0
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5240 ;;      Params:         6       0       0       0       0       0       0
  5241 ;;      Locals:         6       0       0       0       0       0       0
  5242 ;;      Temps:          1       0       0       0       0       0       0
  5243 ;;      Totals:        13       0       0       0       0       0       0
  5244 ;;Total ram usage:       13 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    1
  5247 ;; This function calls:
  5248 ;;		Nothing
  5249 ;; This function is called by:
  5250 ;;		_sprintf
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           	psect	text17
  5255  002444                     __ptext17:
  5256                           	opt stack 0
  5257  002444                     __div_to_l_:
  5258                           	opt stack 28
  5259                           
  5260                           ;incstack = 0
  5261                           ;incstack = 0
  5262  002444  3411               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
  5263  002446  3412               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
  5264  002448  6E1B               	movwf	__div_to_l_@exp1,c
  5265  00244A  661B               	tstfsz	__div_to_l_@exp1& (0+255),c
  5266  00244C  D001               	goto	l4329
  5267  00244E  D05A               	goto	u2620
  5268  002450                     l4329:
  5269  002450  3414               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
  5270  002452  3415               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
  5271  002454  6E1A               	movwf	__div_to_l_@cntr,c
  5272  002456  661A               	tstfsz	__div_to_l_@cntr& (0+255),c
  5273  002458  D001               	goto	l4335
  5274  00245A  D054               	goto	u2620
  5275  00245C                     l4335:
  5276  00245C  8E11               	bsf	__div_to_l_@f1+2,7,c
  5277  00245E  0EFF               	movlw	255
  5278  002460  160F               	andwf	__div_to_l_@f1,f,c
  5279  002462  0EFF               	movlw	255
  5280  002464  1610               	andwf	__div_to_l_@f1+1,f,c
  5281  002466  0EFF               	movlw	255
  5282  002468  1611               	andwf	__div_to_l_@f1+2,f,c
  5283  00246A  0E00               	movlw	0
  5284  00246C  1612               	andwf	__div_to_l_@f1+3,f,c
  5285  00246E  8E14               	bsf	__div_to_l_@f2+2,7,c
  5286  002470  0EFF               	movlw	255
  5287  002472  1612               	andwf	__div_to_l_@f2,f,c
  5288  002474  0EFF               	movlw	255
  5289  002476  1613               	andwf	__div_to_l_@f2+1,f,c
  5290  002478  0EFF               	movlw	255
  5291  00247A  1614               	andwf	__div_to_l_@f2+2,f,c
  5292  00247C  0E00               	movlw	0
  5293  00247E  1615               	andwf	__div_to_l_@f2+3,f,c
  5294  002480  0E00               	movlw	0
  5295  002482  6E16               	movwf	__div_to_l_@quot,c
  5296  002484  0E00               	movlw	0
  5297  002486  6E17               	movwf	__div_to_l_@quot+1,c
  5298  002488  0E00               	movlw	0
  5299  00248A  6E18               	movwf	__div_to_l_@quot+2,c
  5300  00248C  0E00               	movlw	0
  5301  00248E  6E19               	movwf	__div_to_l_@quot+3,c
  5302  002490  0E7F               	movlw	127
  5303  002492  5E1B               	subwf	__div_to_l_@exp1,f,c
  5304  002494  501A               	movf	__div_to_l_@cntr,w,c
  5305  002496  0FA0               	addlw	160
  5306  002498  5E1B               	subwf	__div_to_l_@exp1,f,c
  5307  00249A  6E15               	movwf	??__div_to_l_& (0+255),c
  5308  00249C  0E20               	movlw	32
  5309  00249E  6E1A               	movwf	__div_to_l_@cntr,c
  5310  0024A0  5015               	movf	??__div_to_l_& (0+255),w,c
  5311  0024A2                     l498:
  5312  0024A2  90D8               	bcf	status,0,c
  5313  0024A4  3616               	rlcf	__div_to_l_@quot,f,c
  5314  0024A6  3617               	rlcf	__div_to_l_@quot+1,f,c
  5315  0024A8  3618               	rlcf	__div_to_l_@quot+2,f,c
  5316  0024AA  3619               	rlcf	__div_to_l_@quot+3,f,c
  5317  0024AC  5012               	movf	__div_to_l_@f2,w,c
  5318  0024AE  5C0F               	subwf	__div_to_l_@f1,w,c
  5319  0024B0  5013               	movf	__div_to_l_@f2+1,w,c
  5320  0024B2  5810               	subwfb	__div_to_l_@f1+1,w,c
  5321  0024B4  5014               	movf	__div_to_l_@f2+2,w,c
  5322  0024B6  5811               	subwfb	__div_to_l_@f1+2,w,c
  5323  0024B8  5015               	movf	__div_to_l_@f2+3,w,c
  5324  0024BA  5812               	subwfb	__div_to_l_@f1+3,w,c
  5325  0024BC  A0D8               	btfss	status,0,c
  5326  0024BE  D009               	goto	l4355
  5327  0024C0  5012               	movf	__div_to_l_@f2,w,c
  5328  0024C2  5E0F               	subwf	__div_to_l_@f1,f,c
  5329  0024C4  5013               	movf	__div_to_l_@f2+1,w,c
  5330  0024C6  5A10               	subwfb	__div_to_l_@f1+1,f,c
  5331  0024C8  5014               	movf	__div_to_l_@f2+2,w,c
  5332  0024CA  5A11               	subwfb	__div_to_l_@f1+2,f,c
  5333  0024CC  5015               	movf	__div_to_l_@f2+3,w,c
  5334  0024CE  5A12               	subwfb	__div_to_l_@f1+3,f,c
  5335  0024D0  8016               	bsf	__div_to_l_@quot,0,c
  5336  0024D2                     l4355:
  5337  0024D2  90D8               	bcf	status,0,c
  5338  0024D4  360F               	rlcf	__div_to_l_@f1,f,c
  5339  0024D6  3610               	rlcf	__div_to_l_@f1+1,f,c
  5340  0024D8  3611               	rlcf	__div_to_l_@f1+2,f,c
  5341  0024DA  3612               	rlcf	__div_to_l_@f1+3,f,c
  5342  0024DC  2E1A               	decfsz	__div_to_l_@cntr,f,c
  5343  0024DE  D7E1               	goto	l498
  5344  0024E0  AE1B               	btfss	__div_to_l_@exp1,7,c
  5345  0024E2  D00D               	goto	l4369
  5346  0024E4  501B               	movf	__div_to_l_@exp1,w,c
  5347  0024E6  0A80               	xorlw	128
  5348  0024E8  0F9F               	addlw	159
  5349  0024EA  A0D8               	btfss	status,0,c
  5350  0024EC  D00B               	goto	u2620
  5351  0024EE                     l4365:
  5352  0024EE  90D8               	bcf	status,0,c
  5353  0024F0  3219               	rrcf	__div_to_l_@quot+3,f,c
  5354  0024F2  3218               	rrcf	__div_to_l_@quot+2,f,c
  5355  0024F4  3217               	rrcf	__div_to_l_@quot+1,f,c
  5356  0024F6  3216               	rrcf	__div_to_l_@quot,f,c
  5357  0024F8  3E1B               	incfsz	__div_to_l_@exp1,f,c
  5358  0024FA  D7F9               	goto	l4365
  5359  0024FC  D014               	goto	l505
  5360  0024FE                     l4369:
  5361  0024FE  0E1F               	movlw	31
  5362  002500  641B               	cpfsgt	__div_to_l_@exp1,c
  5363  002502  D00F               	goto	l4377
  5364  002504                     u2620:
  5365  002504  0E00               	movlw	0
  5366  002506  6E0F               	movwf	?__div_to_l_,c
  5367  002508  0E00               	movlw	0
  5368  00250A  6E10               	movwf	?__div_to_l_+1,c
  5369  00250C  0E00               	movlw	0
  5370  00250E  6E11               	movwf	?__div_to_l_+2,c
  5371  002510  0E00               	movlw	0
  5372  002512  6E12               	movwf	?__div_to_l_+3,c
  5373  002514  D010               	goto	l496
  5374  002516                     l4375:
  5375  002516  90D8               	bcf	status,0,c
  5376  002518  3616               	rlcf	__div_to_l_@quot,f,c
  5377  00251A  3617               	rlcf	__div_to_l_@quot+1,f,c
  5378  00251C  3618               	rlcf	__div_to_l_@quot+2,f,c
  5379  00251E  3619               	rlcf	__div_to_l_@quot+3,f,c
  5380  002520  061B               	decf	__div_to_l_@exp1,f,c
  5381  002522                     l4377:
  5382  002522  661B               	tstfsz	__div_to_l_@exp1,c
  5383  002524  D7F8               	goto	l4375
  5384  002526                     l505:
  5385  002526  C016  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  5386  00252A  C017  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5387  00252E  C018  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5388  002532  C019  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5389  002536                     l496:
  5390  002536  0012               	return	
  5391  002538                     __end_of__div_to_l_:
  5392                           	opt stack 0
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           prodh	equ	0xFF4
  5398                           prodl	equ	0xFF3
  5399                           intcon	equ	0xFF2
  5400                           wreg	equ	0xFE8
  5401                           indf2	equ	0xFDF
  5402                           postinc2	equ	0xFDE
  5403                           postdec2	equ	0xFDD
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408 ;; *************** function __tdiv_to_l_ *****************
  5409 ;; Defined at:
  5410 ;;		line 61 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftdivl.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  f1              3   14[COMRAM] float 
  5413 ;;  f2              3   17[COMRAM] float 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  quot            4   25[COMRAM] unsigned long 
  5416 ;;  exp1            1   30[COMRAM] unsigned char 
  5417 ;;  cntr            1   29[COMRAM] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;                  4   14[COMRAM] unsigned long 
  5420 ;; Registers used:
  5421 ;;		wreg, status,2, status,0
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5427 ;;      Params:         6       0       0       0       0       0       0
  5428 ;;      Locals:         6       0       0       0       0       0       0
  5429 ;;      Temps:          5       0       0       0       0       0       0
  5430 ;;      Totals:        17       0       0       0       0       0       0
  5431 ;;Total ram usage:       17 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:    1
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_sprintf
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           	psect	text18
  5442  002114                     __ptext18:
  5443                           	opt stack 0
  5444  002114                     __tdiv_to_l_:
  5445                           	opt stack 28
  5446                           
  5447                           ;incstack = 0
  5448                           ;incstack = 0
  5449  002114  0E0F               	movlw	15
  5450  002116  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  5451  002118  C00F  F016         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
  5452  00211C  C010  F017         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
  5453  002120  C011  F018         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
  5454  002124  2815               	incf	??__tdiv_to_l_,w,c
  5455  002126  6E19               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  5456  002128  D004               	goto	u2480
  5457  00212A                     u2485:
  5458  00212A  90D8               	bcf	status,0,c
  5459  00212C  3218               	rrcf	??__tdiv_to_l_+3,f,c
  5460  00212E  3217               	rrcf	??__tdiv_to_l_+2,f,c
  5461  002130  3216               	rrcf	??__tdiv_to_l_+1,f,c
  5462  002132                     u2480:
  5463  002132  2E19               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  5464  002134  D7FA               	goto	u2485
  5465  002136  5016               	movf	??__tdiv_to_l_+1,w,c
  5466  002138  6E1F               	movwf	__tdiv_to_l_@exp1,c
  5467  00213A  661F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  5468  00213C  D001               	goto	l4273
  5469  00213E  D061               	goto	u2550
  5470  002140                     l4273:
  5471  002140  0E0F               	movlw	15
  5472  002142  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  5473  002144  C012  F016         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
  5474  002148  C013  F017         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
  5475  00214C  C014  F018         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
  5476  002150  2815               	incf	??__tdiv_to_l_,w,c
  5477  002152  6E19               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  5478  002154  D004               	goto	u2500
  5479  002156                     u2505:
  5480  002156  90D8               	bcf	status,0,c
  5481  002158  3218               	rrcf	??__tdiv_to_l_+3,f,c
  5482  00215A  3217               	rrcf	??__tdiv_to_l_+2,f,c
  5483  00215C  3216               	rrcf	??__tdiv_to_l_+1,f,c
  5484  00215E                     u2500:
  5485  00215E  2E19               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  5486  002160  D7FA               	goto	u2505
  5487  002162  5016               	movf	??__tdiv_to_l_+1,w,c
  5488  002164  6E1E               	movwf	__tdiv_to_l_@cntr,c
  5489  002166  661E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  5490  002168  D001               	goto	l4279
  5491  00216A  D04B               	goto	u2550
  5492  00216C                     l4279:
  5493  00216C  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  5494  00216E  0EFF               	movlw	255
  5495  002170  160F               	andwf	__tdiv_to_l_@f1,f,c
  5496  002172  0EFF               	movlw	255
  5497  002174  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  5498  002176  0E00               	movlw	0
  5499  002178  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  5500  00217A  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  5501  00217C  0EFF               	movlw	255
  5502  00217E  1612               	andwf	__tdiv_to_l_@f2,f,c
  5503  002180  0EFF               	movlw	255
  5504  002182  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  5505  002184  0E00               	movlw	0
  5506  002186  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  5507  002188  0E00               	movlw	0
  5508  00218A  6E1A               	movwf	__tdiv_to_l_@quot,c
  5509  00218C  0E00               	movlw	0
  5510  00218E  6E1B               	movwf	__tdiv_to_l_@quot+1,c
  5511  002190  0E00               	movlw	0
  5512  002192  6E1C               	movwf	__tdiv_to_l_@quot+2,c
  5513  002194  0E00               	movlw	0
  5514  002196  6E1D               	movwf	__tdiv_to_l_@quot+3,c
  5515  002198  0E7F               	movlw	127
  5516  00219A  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
  5517  00219C  501E               	movf	__tdiv_to_l_@cntr,w,c
  5518  00219E  0F98               	addlw	152
  5519  0021A0  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
  5520  0021A2  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  5521  0021A4  0E18               	movlw	24
  5522  0021A6  6E1E               	movwf	__tdiv_to_l_@cntr,c
  5523  0021A8  5015               	movf	??__tdiv_to_l_& (0+255),w,c
  5524  0021AA                     l4293:
  5525  0021AA  90D8               	bcf	status,0,c
  5526  0021AC  361A               	rlcf	__tdiv_to_l_@quot,f,c
  5527  0021AE  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5528  0021B0  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5529  0021B2  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5530  0021B4  5012               	movf	__tdiv_to_l_@f2,w,c
  5531  0021B6  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  5532  0021B8  5013               	movf	__tdiv_to_l_@f2+1,w,c
  5533  0021BA  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  5534  0021BC  5014               	movf	__tdiv_to_l_@f2+2,w,c
  5535  0021BE  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  5536  0021C0  A0D8               	btfss	status,0,c
  5537  0021C2  D007               	goto	l617
  5538  0021C4  5012               	movf	__tdiv_to_l_@f2,w,c
  5539  0021C6  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  5540  0021C8  5013               	movf	__tdiv_to_l_@f2+1,w,c
  5541  0021CA  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  5542  0021CC  5014               	movf	__tdiv_to_l_@f2+2,w,c
  5543  0021CE  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  5544  0021D0  801A               	bsf	__tdiv_to_l_@quot,0,c
  5545  0021D2                     l617:
  5546  0021D2  90D8               	bcf	status,0,c
  5547  0021D4  360F               	rlcf	__tdiv_to_l_@f1,f,c
  5548  0021D6  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  5549  0021D8  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  5550  0021DA  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
  5551  0021DC  D7E6               	goto	l4293
  5552  0021DE  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
  5553  0021E0  D00D               	goto	l4313
  5554  0021E2  501F               	movf	__tdiv_to_l_@exp1,w,c
  5555  0021E4  0A80               	xorlw	128
  5556  0021E6  0F97               	addlw	151
  5557  0021E8  A0D8               	btfss	status,0,c
  5558  0021EA  D00B               	goto	u2550
  5559  0021EC                     l4309:
  5560  0021EC  90D8               	bcf	status,0,c
  5561  0021EE  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5562  0021F0  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5563  0021F2  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5564  0021F4  321A               	rrcf	__tdiv_to_l_@quot,f,c
  5565  0021F6  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
  5566  0021F8  D7F9               	goto	l4309
  5567  0021FA  D014               	goto	l623
  5568  0021FC                     l4313:
  5569  0021FC  0E17               	movlw	23
  5570  0021FE  641F               	cpfsgt	__tdiv_to_l_@exp1,c
  5571  002200  D00F               	goto	l4321
  5572  002202                     u2550:
  5573  002202  0E00               	movlw	0
  5574  002204  6E0F               	movwf	?__tdiv_to_l_,c
  5575  002206  0E00               	movlw	0
  5576  002208  6E10               	movwf	?__tdiv_to_l_+1,c
  5577  00220A  0E00               	movlw	0
  5578  00220C  6E11               	movwf	?__tdiv_to_l_+2,c
  5579  00220E  0E00               	movlw	0
  5580  002210  6E12               	movwf	?__tdiv_to_l_+3,c
  5581  002212  D010               	goto	l614
  5582  002214                     l4319:
  5583  002214  90D8               	bcf	status,0,c
  5584  002216  361A               	rlcf	__tdiv_to_l_@quot,f,c
  5585  002218  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5586  00221A  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5587  00221C  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5588  00221E  061F               	decf	__tdiv_to_l_@exp1,f,c
  5589  002220                     l4321:
  5590  002220  661F               	tstfsz	__tdiv_to_l_@exp1,c
  5591  002222  D7F8               	goto	l4319
  5592  002224                     l623:
  5593  002224  C01A  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5594  002228  C01B  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5595  00222C  C01C  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5596  002230  C01D  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5597  002234                     l614:
  5598  002234  0012               	return	
  5599  002236                     __end_of__tdiv_to_l_:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           wreg	equ	0xFE8
  5609                           indf2	equ	0xFDF
  5610                           postinc2	equ	0xFDE
  5611                           postdec2	equ	0xFDD
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _isdigit *****************
  5617 ;; Defined at:
  5618 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  c               1   14[COMRAM] unsigned char 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;		None
  5623 ;; Return value:  Size  Location     Type
  5624 ;;		None               void
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5632 ;;      Params:         1       0       0       0       0       0       0
  5633 ;;      Locals:         1       0       0       0       0       0       0
  5634 ;;      Temps:          1       0       0       0       0       0       0
  5635 ;;      Totals:         3       0       0       0       0       0       0
  5636 ;;Total ram usage:        3 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    1
  5639 ;; This function calls:
  5640 ;;		Nothing
  5641 ;; This function is called by:
  5642 ;;		_sprintf
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text19
  5647  002ECA                     __ptext19:
  5648                           	opt stack 0
  5649  002ECA                     _isdigit:
  5650                           	opt stack 28
  5651                           
  5652                           ;incstack = 0
  5653                           ;incstack = 0
  5654  002ECA  6E10               	movwf	??_isdigit& (0+255),c
  5655  002ECC  0E00               	movlw	0
  5656  002ECE  6E11               	movwf	_isdigit$801,c
  5657  002ED0  5010               	movf	??_isdigit& (0+255),w,c
  5658  002ED2  0E3A               	movlw	58
  5659  002ED4  600F               	cpfslt	isdigit@c,c
  5660  002ED6  D007               	goto	l4263
  5661  002ED8  0E2F               	movlw	47
  5662  002EDA  640F               	cpfsgt	isdigit@c,c
  5663  002EDC  D004               	goto	l4263
  5664  002EDE  6E10               	movwf	??_isdigit& (0+255),c
  5665  002EE0  0E01               	movlw	1
  5666  002EE2  6E11               	movwf	_isdigit$801,c
  5667  002EE4  5010               	movf	??_isdigit& (0+255),w,c
  5668  002EE6                     l4263:
  5669  002EE6  C011  F010         	movff	_isdigit$801,??_isdigit
  5670  002EEA  3010               	rrcf	??_isdigit,w,c
  5671  002EEC  0012               	return	
  5672  002EEE                     __end_of_isdigit:
  5673                           	opt stack 0
  5674                           tblptru	equ	0xFF8
  5675                           tblptrh	equ	0xFF7
  5676                           tblptrl	equ	0xFF6
  5677                           tablat	equ	0xFF5
  5678                           prodh	equ	0xFF4
  5679                           prodl	equ	0xFF3
  5680                           intcon	equ	0xFF2
  5681                           wreg	equ	0xFE8
  5682                           indf2	equ	0xFDF
  5683                           postinc2	equ	0xFDE
  5684                           postdec2	equ	0xFDD
  5685                           fsr2h	equ	0xFDA
  5686                           fsr2l	equ	0xFD9
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function _scale *****************
  5690 ;; Defined at:
  5691 ;;		line 426 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;  scl             1   53[COMRAM] char 
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;		None
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  3   53[COMRAM] char 
  5698 ;; Registers used:
  5699 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5705 ;;      Params:         3       0       0       0       0       0       0
  5706 ;;      Locals:         3       0       0       0       0       0       0
  5707 ;;      Temps:          6       0       0       0       0       0       0
  5708 ;;      Totals:        12       0       0       0       0       0       0
  5709 ;;Total ram usage:       12 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:    3
  5712 ;; This function calls:
  5713 ;;		___ftmul
  5714 ;;		___awdiv
  5715 ;;		___awmod
  5716 ;;		___wmul
  5717 ;; This function is called by:
  5718 ;;		_sprintf
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text20
  5723  00171A                     __ptext20:
  5724                           	opt stack 0
  5725  00171A                     _scale:
  5726                           	opt stack 26
  5727                           
  5728                           ;doprnt.c: 428: if(scl < 0) {
  5729                           
  5730                           ;incstack = 0
  5731                           ;incstack = 0
  5732  00171A  AE36               	btfss	scale@scl,7,c
  5733  00171C  D108               	goto	l4237
  5734                           
  5735                           ;doprnt.c: 429: scl = -scl;
  5736  00171E  6C36               	negf	scale@scl,c
  5737                           
  5738                           ;doprnt.c: 430: if(scl>=110)
  5739  001720  5036               	movf	scale@scl,w,c
  5740  001722  0A80               	xorlw	128
  5741  001724  0F12               	addlw	-238
  5742  001726  A0D8               	btfss	status,0,c
  5743  001728  D09D               	goto	l4227
  5744                           
  5745                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5746  00172A  0E00               	movlw	0
  5747  00172C  6E22               	movwf	?___wmul+3,c
  5748  00172E  0E03               	movlw	3
  5749  001730  6E21               	movwf	?___wmul+2,c
  5750  001732  0E00               	movlw	0
  5751  001734  6E19               	movwf	?___awdiv+3,c
  5752  001736  0E0A               	movlw	10
  5753  001738  6E18               	movwf	?___awdiv+2,c
  5754  00173A  0E00               	movlw	0
  5755  00173C  6E12               	movwf	?___awmod+3,c
  5756  00173E  0E64               	movlw	100
  5757  001740  6E11               	movwf	?___awmod+2,c
  5758  001742  5036               	movf	scale@scl,w,c
  5759  001744  6E0F               	movwf	?___awmod,c
  5760  001746  6A10               	clrf	?___awmod+1,c
  5761  001748  BE0F               	btfsc	?___awmod,7,c
  5762  00174A  0610               	decf	?___awmod+1,f,c
  5763  00174C  EC74  F015         	call	___awmod	;wreg free
  5764  001750  C00F  F016         	movff	?___awmod,?___awdiv
  5765  001754  C010  F017         	movff	?___awmod+1,?___awdiv+1
  5766  001758  ECA6  F014         	call	___awdiv	;wreg free
  5767  00175C  0E09               	movlw	9
  5768  00175E  2416               	addwf	?___awdiv,w,c
  5769  001760  6E1F               	movwf	?___wmul,c
  5770  001762  0E00               	movlw	0
  5771  001764  2017               	addwfc	?___awdiv+1,w,c
  5772  001766  6E20               	movwf	?___wmul+1,c
  5773  001768  EC0A  F017         	call	___wmul	;wreg free
  5774  00176C  0E28               	movlw	low __npowers_
  5775  00176E  241F               	addwf	?___wmul,w,c
  5776  001770  6EF6               	movwf	tblptrl,c
  5777  001772  0E06               	movlw	high __npowers_
  5778  001774  2020               	addwfc	?___wmul+1,w,c
  5779  001776  6EF7               	movwf	tblptrh,c
  5780  001778  0009               	tblrd		*+
  5781  00177A  CFF5 F039          	movff	tablat,??_scale
  5782  00177E  0009               	tblrd		*+
  5783  001780  CFF5 F03A          	movff	tablat,??_scale+1
  5784  001784  0009               	tblrd		*+
  5785  001786  CFF5 F03B          	movff	tablat,??_scale+2
  5786  00178A  C03B  F02A         	movff	??_scale+2,?___ftmul+5
  5787  00178E  C03A  F029         	movff	??_scale+1,?___ftmul+4
  5788  001792  C039  F028         	movff	??_scale,?___ftmul+3
  5789  001796  0E00               	movlw	0
  5790  001798  6E22               	movwf	?___wmul+3,c
  5791  00179A  0E03               	movlw	3
  5792  00179C  6E21               	movwf	?___wmul+2,c
  5793  00179E  0E00               	movlw	0
  5794  0017A0  6E19               	movwf	?___awdiv+3,c
  5795  0017A2  0E64               	movlw	100
  5796  0017A4  6E18               	movwf	?___awdiv+2,c
  5797  0017A6  5036               	movf	scale@scl,w,c
  5798  0017A8  6E16               	movwf	?___awdiv,c
  5799  0017AA  6A17               	clrf	?___awdiv+1,c
  5800  0017AC  BE16               	btfsc	?___awdiv,7,c
  5801  0017AE  0617               	decf	?___awdiv+1,f,c
  5802  0017B0  ECA6  F014         	call	___awdiv	;wreg free
  5803  0017B4  0E12               	movlw	18
  5804  0017B6  2416               	addwf	?___awdiv,w,c
  5805  0017B8  6E1F               	movwf	?___wmul,c
  5806  0017BA  0E00               	movlw	0
  5807  0017BC  2017               	addwfc	?___awdiv+1,w,c
  5808  0017BE  6E20               	movwf	?___wmul+1,c
  5809  0017C0  EC0A  F017         	call	___wmul	;wreg free
  5810  0017C4  0E28               	movlw	low __npowers_
  5811  0017C6  241F               	addwf	?___wmul,w,c
  5812  0017C8  6EF6               	movwf	tblptrl,c
  5813  0017CA  0E06               	movlw	high __npowers_
  5814  0017CC  2020               	addwfc	?___wmul+1,w,c
  5815  0017CE  6EF7               	movwf	tblptrh,c
  5816  0017D0  0009               	tblrd		*+
  5817  0017D2  CFF5 F03C          	movff	tablat,??_scale+3
  5818  0017D6  0009               	tblrd		*+
  5819  0017D8  CFF5 F03D          	movff	tablat,??_scale+4
  5820  0017DC  0009               	tblrd		*+
  5821  0017DE  CFF5 F03E          	movff	tablat,??_scale+5
  5822  0017E2  C03E  F027         	movff	??_scale+5,?___ftmul+2
  5823  0017E6  C03D  F026         	movff	??_scale+4,?___ftmul+1
  5824  0017EA  C03C  F025         	movff	??_scale+3,?___ftmul
  5825  0017EE  EC1B  F011         	call	___ftmul	;wreg free
  5826  0017F2  C027  F041         	movff	?___ftmul+2,_scale$1137+2
  5827  0017F6  C026  F040         	movff	?___ftmul+1,_scale$1137+1
  5828  0017FA  C025  F03F         	movff	?___ftmul,_scale$1137
  5829                           
  5830                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5831  0017FE  C03F  F025         	movff	_scale$1137,?___ftmul
  5832  001802  C040  F026         	movff	_scale$1137+1,?___ftmul+1
  5833  001806  C041  F027         	movff	_scale$1137+2,?___ftmul+2
  5834  00180A  0E00               	movlw	0
  5835  00180C  6E22               	movwf	?___wmul+3,c
  5836  00180E  0E03               	movlw	3
  5837  001810  6E21               	movwf	?___wmul+2,c
  5838  001812  0E00               	movlw	0
  5839  001814  6E12               	movwf	?___awmod+3,c
  5840  001816  0E0A               	movlw	10
  5841  001818  6E11               	movwf	?___awmod+2,c
  5842  00181A  5036               	movf	scale@scl,w,c
  5843  00181C  6E0F               	movwf	?___awmod,c
  5844  00181E  6A10               	clrf	?___awmod+1,c
  5845  001820  BE0F               	btfsc	?___awmod,7,c
  5846  001822  0610               	decf	?___awmod+1,f,c
  5847  001824  EC74  F015         	call	___awmod	;wreg free
  5848  001828  C00F  F01F         	movff	?___awmod,?___wmul
  5849  00182C  C010  F020         	movff	?___awmod+1,?___wmul+1
  5850  001830  EC0A  F017         	call	___wmul	;wreg free
  5851  001834  0E28               	movlw	low __npowers_
  5852  001836  241F               	addwf	?___wmul,w,c
  5853  001838  6EF6               	movwf	tblptrl,c
  5854  00183A  0E06               	movlw	high __npowers_
  5855  00183C  2020               	addwfc	?___wmul+1,w,c
  5856  00183E  6EF7               	movwf	tblptrh,c
  5857  001840  0009               	tblrd		*+
  5858  001842  CFF5 F039          	movff	tablat,??_scale
  5859  001846  0009               	tblrd		*+
  5860  001848  CFF5 F03A          	movff	tablat,??_scale+1
  5861  00184C  0009               	tblrd		*+
  5862  00184E  CFF5 F03B          	movff	tablat,??_scale+2
  5863  001852  C03B  F02A         	movff	??_scale+2,?___ftmul+5
  5864  001856  C03A  F029         	movff	??_scale+1,?___ftmul+4
  5865  00185A  C039  F028         	movff	??_scale,?___ftmul+3
  5866  00185E  EC1B  F011         	call	___ftmul	;wreg free
  5867  001862  D164               	goto	L13
  5868  001864                     l4227:
  5869                           
  5870                           ;doprnt.c: 432: else if(scl > 10)
  5871  001864  5036               	movf	scale@scl,w,c
  5872  001866  0A80               	xorlw	128
  5873  001868  0F75               	addlw	-139
  5874  00186A  A0D8               	btfss	status,0,c
  5875  00186C  D059               	goto	l4233
  5876                           
  5877                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5878  00186E  0E00               	movlw	0
  5879  001870  6E22               	movwf	?___wmul+3,c
  5880  001872  0E03               	movlw	3
  5881  001874  6E21               	movwf	?___wmul+2,c
  5882  001876  0E00               	movlw	0
  5883  001878  6E19               	movwf	?___awdiv+3,c
  5884  00187A  0E0A               	movlw	10
  5885  00187C  6E18               	movwf	?___awdiv+2,c
  5886  00187E  5036               	movf	scale@scl,w,c
  5887  001880  6E16               	movwf	?___awdiv,c
  5888  001882  6A17               	clrf	?___awdiv+1,c
  5889  001884  BE16               	btfsc	?___awdiv,7,c
  5890  001886  0617               	decf	?___awdiv+1,f,c
  5891  001888  ECA6  F014         	call	___awdiv	;wreg free
  5892  00188C  0E09               	movlw	9
  5893  00188E  2416               	addwf	?___awdiv,w,c
  5894  001890  6E1F               	movwf	?___wmul,c
  5895  001892  0E00               	movlw	0
  5896  001894  2017               	addwfc	?___awdiv+1,w,c
  5897  001896  6E20               	movwf	?___wmul+1,c
  5898  001898  EC0A  F017         	call	___wmul	;wreg free
  5899  00189C  0E28               	movlw	low __npowers_
  5900  00189E  241F               	addwf	?___wmul,w,c
  5901  0018A0  6EF6               	movwf	tblptrl,c
  5902  0018A2  0E06               	movlw	high __npowers_
  5903  0018A4  2020               	addwfc	?___wmul+1,w,c
  5904  0018A6  6EF7               	movwf	tblptrh,c
  5905  0018A8  0009               	tblrd		*+
  5906  0018AA  CFF5 F039          	movff	tablat,??_scale
  5907  0018AE  0009               	tblrd		*+
  5908  0018B0  CFF5 F03A          	movff	tablat,??_scale+1
  5909  0018B4  0009               	tblrd		*+
  5910  0018B6  CFF5 F03B          	movff	tablat,??_scale+2
  5911  0018BA  C03B  F027         	movff	??_scale+2,?___ftmul+2
  5912  0018BE  C03A  F026         	movff	??_scale+1,?___ftmul+1
  5913  0018C2  C039  F025         	movff	??_scale,?___ftmul
  5914  0018C6  0E00               	movlw	0
  5915  0018C8  6E22               	movwf	?___wmul+3,c
  5916  0018CA  0E03               	movlw	3
  5917  0018CC  6E21               	movwf	?___wmul+2,c
  5918  0018CE  0E00               	movlw	0
  5919  0018D0  6E12               	movwf	?___awmod+3,c
  5920  0018D2  0E0A               	movlw	10
  5921  0018D4  6E11               	movwf	?___awmod+2,c
  5922  0018D6  5036               	movf	scale@scl,w,c
  5923  0018D8  6E0F               	movwf	?___awmod,c
  5924  0018DA  6A10               	clrf	?___awmod+1,c
  5925  0018DC  BE0F               	btfsc	?___awmod,7,c
  5926  0018DE  0610               	decf	?___awmod+1,f,c
  5927  0018E0  EC74  F015         	call	___awmod	;wreg free
  5928  0018E4  C00F  F01F         	movff	?___awmod,?___wmul
  5929  0018E8  C010  F020         	movff	?___awmod+1,?___wmul+1
  5930  0018EC  EC0A  F017         	call	___wmul	;wreg free
  5931  0018F0  0E28               	movlw	low __npowers_
  5932  0018F2  241F               	addwf	?___wmul,w,c
  5933  0018F4  6EF6               	movwf	tblptrl,c
  5934  0018F6  0E06               	movlw	high __npowers_
  5935  0018F8  2020               	addwfc	?___wmul+1,w,c
  5936  0018FA  6EF7               	movwf	tblptrh,c
  5937  0018FC  0009               	tblrd		*+
  5938  0018FE  CFF5 F03C          	movff	tablat,??_scale+3
  5939  001902  0009               	tblrd		*+
  5940  001904  CFF5 F03D          	movff	tablat,??_scale+4
  5941  001908  0009               	tblrd		*+
  5942  00190A  CFF5 F03E          	movff	tablat,??_scale+5
  5943  00190E  C03E  F02A         	movff	??_scale+5,?___ftmul+5
  5944  001912  C03D  F029         	movff	??_scale+4,?___ftmul+4
  5945  001916  C03C  F028         	movff	??_scale+3,?___ftmul+3
  5946  00191A  EC1B  F011         	call	___ftmul	;wreg free
  5947  00191E  D106               	goto	L13
  5948  001920                     l4233:
  5949                           
  5950                           ;doprnt.c: 434: return _npowers_[scl];
  5951  001920  5036               	movf	scale@scl,w,c
  5952  001922  0D03               	mullw	3
  5953  001924  0E28               	movlw	low __npowers_
  5954  001926  24F3               	addwf	prodl,w,c
  5955  001928  6EF6               	movwf	tblptrl,c
  5956  00192A  0E06               	movlw	high __npowers_
  5957  00192C  D10C               	goto	L12
  5958  00192E                     l4237:
  5959                           
  5960                           ;doprnt.c: 435: }
  5961                           ;doprnt.c: 436: if(scl>=110)
  5962  00192E  5036               	movf	scale@scl,w,c
  5963  001930  0A80               	xorlw	128
  5964  001932  0F12               	addlw	-238
  5965  001934  A0D8               	btfss	status,0,c
  5966  001936  D09D               	goto	l4245
  5967                           
  5968                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5969  001938  0E00               	movlw	0
  5970  00193A  6E22               	movwf	?___wmul+3,c
  5971  00193C  0E03               	movlw	3
  5972  00193E  6E21               	movwf	?___wmul+2,c
  5973  001940  0E00               	movlw	0
  5974  001942  6E19               	movwf	?___awdiv+3,c
  5975  001944  0E0A               	movlw	10
  5976  001946  6E18               	movwf	?___awdiv+2,c
  5977  001948  0E00               	movlw	0
  5978  00194A  6E12               	movwf	?___awmod+3,c
  5979  00194C  0E64               	movlw	100
  5980  00194E  6E11               	movwf	?___awmod+2,c
  5981  001950  5036               	movf	scale@scl,w,c
  5982  001952  6E0F               	movwf	?___awmod,c
  5983  001954  6A10               	clrf	?___awmod+1,c
  5984  001956  BE0F               	btfsc	?___awmod,7,c
  5985  001958  0610               	decf	?___awmod+1,f,c
  5986  00195A  EC74  F015         	call	___awmod	;wreg free
  5987  00195E  C00F  F016         	movff	?___awmod,?___awdiv
  5988  001962  C010  F017         	movff	?___awmod+1,?___awdiv+1
  5989  001966  ECA6  F014         	call	___awdiv	;wreg free
  5990  00196A  0E09               	movlw	9
  5991  00196C  2416               	addwf	?___awdiv,w,c
  5992  00196E  6E1F               	movwf	?___wmul,c
  5993  001970  0E00               	movlw	0
  5994  001972  2017               	addwfc	?___awdiv+1,w,c
  5995  001974  6E20               	movwf	?___wmul+1,c
  5996  001976  EC0A  F017         	call	___wmul	;wreg free
  5997  00197A  0E4F               	movlw	low __powers_
  5998  00197C  241F               	addwf	?___wmul,w,c
  5999  00197E  6EF6               	movwf	tblptrl,c
  6000  001980  0E06               	movlw	high __powers_
  6001  001982  2020               	addwfc	?___wmul+1,w,c
  6002  001984  6EF7               	movwf	tblptrh,c
  6003  001986  0009               	tblrd		*+
  6004  001988  CFF5 F039          	movff	tablat,??_scale
  6005  00198C  0009               	tblrd		*+
  6006  00198E  CFF5 F03A          	movff	tablat,??_scale+1
  6007  001992  0009               	tblrd		*+
  6008  001994  CFF5 F03B          	movff	tablat,??_scale+2
  6009  001998  C03B  F02A         	movff	??_scale+2,?___ftmul+5
  6010  00199C  C03A  F029         	movff	??_scale+1,?___ftmul+4
  6011  0019A0  C039  F028         	movff	??_scale,?___ftmul+3
  6012  0019A4  0E00               	movlw	0
  6013  0019A6  6E22               	movwf	?___wmul+3,c
  6014  0019A8  0E03               	movlw	3
  6015  0019AA  6E21               	movwf	?___wmul+2,c
  6016  0019AC  0E00               	movlw	0
  6017  0019AE  6E19               	movwf	?___awdiv+3,c
  6018  0019B0  0E64               	movlw	100
  6019  0019B2  6E18               	movwf	?___awdiv+2,c
  6020  0019B4  5036               	movf	scale@scl,w,c
  6021  0019B6  6E16               	movwf	?___awdiv,c
  6022  0019B8  6A17               	clrf	?___awdiv+1,c
  6023  0019BA  BE16               	btfsc	?___awdiv,7,c
  6024  0019BC  0617               	decf	?___awdiv+1,f,c
  6025  0019BE  ECA6  F014         	call	___awdiv	;wreg free
  6026  0019C2  0E12               	movlw	18
  6027  0019C4  2416               	addwf	?___awdiv,w,c
  6028  0019C6  6E1F               	movwf	?___wmul,c
  6029  0019C8  0E00               	movlw	0
  6030  0019CA  2017               	addwfc	?___awdiv+1,w,c
  6031  0019CC  6E20               	movwf	?___wmul+1,c
  6032  0019CE  EC0A  F017         	call	___wmul	;wreg free
  6033  0019D2  0E4F               	movlw	low __powers_
  6034  0019D4  241F               	addwf	?___wmul,w,c
  6035  0019D6  6EF6               	movwf	tblptrl,c
  6036  0019D8  0E06               	movlw	high __powers_
  6037  0019DA  2020               	addwfc	?___wmul+1,w,c
  6038  0019DC  6EF7               	movwf	tblptrh,c
  6039  0019DE  0009               	tblrd		*+
  6040  0019E0  CFF5 F03C          	movff	tablat,??_scale+3
  6041  0019E4  0009               	tblrd		*+
  6042  0019E6  CFF5 F03D          	movff	tablat,??_scale+4
  6043  0019EA  0009               	tblrd		*+
  6044  0019EC  CFF5 F03E          	movff	tablat,??_scale+5
  6045  0019F0  C03E  F027         	movff	??_scale+5,?___ftmul+2
  6046  0019F4  C03D  F026         	movff	??_scale+4,?___ftmul+1
  6047  0019F8  C03C  F025         	movff	??_scale+3,?___ftmul
  6048  0019FC  EC1B  F011         	call	___ftmul	;wreg free
  6049  001A00  C027  F041         	movff	?___ftmul+2,_scale$1137+2
  6050  001A04  C026  F040         	movff	?___ftmul+1,_scale$1137+1
  6051  001A08  C025  F03F         	movff	?___ftmul,_scale$1137
  6052                           
  6053                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6054  001A0C  C03F  F025         	movff	_scale$1137,?___ftmul
  6055  001A10  C040  F026         	movff	_scale$1137+1,?___ftmul+1
  6056  001A14  C041  F027         	movff	_scale$1137+2,?___ftmul+2
  6057  001A18  0E00               	movlw	0
  6058  001A1A  6E22               	movwf	?___wmul+3,c
  6059  001A1C  0E03               	movlw	3
  6060  001A1E  6E21               	movwf	?___wmul+2,c
  6061  001A20  0E00               	movlw	0
  6062  001A22  6E12               	movwf	?___awmod+3,c
  6063  001A24  0E0A               	movlw	10
  6064  001A26  6E11               	movwf	?___awmod+2,c
  6065  001A28  5036               	movf	scale@scl,w,c
  6066  001A2A  6E0F               	movwf	?___awmod,c
  6067  001A2C  6A10               	clrf	?___awmod+1,c
  6068  001A2E  BE0F               	btfsc	?___awmod,7,c
  6069  001A30  0610               	decf	?___awmod+1,f,c
  6070  001A32  EC74  F015         	call	___awmod	;wreg free
  6071  001A36  C00F  F01F         	movff	?___awmod,?___wmul
  6072  001A3A  C010  F020         	movff	?___awmod+1,?___wmul+1
  6073  001A3E  EC0A  F017         	call	___wmul	;wreg free
  6074  001A42  0E4F               	movlw	low __powers_
  6075  001A44  241F               	addwf	?___wmul,w,c
  6076  001A46  6EF6               	movwf	tblptrl,c
  6077  001A48  0E06               	movlw	high __powers_
  6078  001A4A  2020               	addwfc	?___wmul+1,w,c
  6079  001A4C  6EF7               	movwf	tblptrh,c
  6080  001A4E  0009               	tblrd		*+
  6081  001A50  CFF5 F039          	movff	tablat,??_scale
  6082  001A54  0009               	tblrd		*+
  6083  001A56  CFF5 F03A          	movff	tablat,??_scale+1
  6084  001A5A  0009               	tblrd		*+
  6085  001A5C  CFF5 F03B          	movff	tablat,??_scale+2
  6086  001A60  C03B  F02A         	movff	??_scale+2,?___ftmul+5
  6087  001A64  C03A  F029         	movff	??_scale+1,?___ftmul+4
  6088  001A68  C039  F028         	movff	??_scale,?___ftmul+3
  6089  001A6C  EC1B  F011         	call	___ftmul	;wreg free
  6090  001A70  D05D               	goto	L13
  6091  001A72                     l4245:
  6092                           
  6093                           ;doprnt.c: 438: else if(scl > 10)
  6094  001A72  5036               	movf	scale@scl,w,c
  6095  001A74  0A80               	xorlw	128
  6096  001A76  0F75               	addlw	-139
  6097  001A78  A0D8               	btfss	status,0,c
  6098  001A7A  D05F               	goto	l4251
  6099                           
  6100                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6101  001A7C  0E00               	movlw	0
  6102  001A7E  6E22               	movwf	?___wmul+3,c
  6103  001A80  0E03               	movlw	3
  6104  001A82  6E21               	movwf	?___wmul+2,c
  6105  001A84  0E00               	movlw	0
  6106  001A86  6E19               	movwf	?___awdiv+3,c
  6107  001A88  0E0A               	movlw	10
  6108  001A8A  6E18               	movwf	?___awdiv+2,c
  6109  001A8C  5036               	movf	scale@scl,w,c
  6110  001A8E  6E16               	movwf	?___awdiv,c
  6111  001A90  6A17               	clrf	?___awdiv+1,c
  6112  001A92  BE16               	btfsc	?___awdiv,7,c
  6113  001A94  0617               	decf	?___awdiv+1,f,c
  6114  001A96  ECA6  F014         	call	___awdiv	;wreg free
  6115  001A9A  0E09               	movlw	9
  6116  001A9C  2416               	addwf	?___awdiv,w,c
  6117  001A9E  6E1F               	movwf	?___wmul,c
  6118  001AA0  0E00               	movlw	0
  6119  001AA2  2017               	addwfc	?___awdiv+1,w,c
  6120  001AA4  6E20               	movwf	?___wmul+1,c
  6121  001AA6  EC0A  F017         	call	___wmul	;wreg free
  6122  001AAA  0E4F               	movlw	low __powers_
  6123  001AAC  241F               	addwf	?___wmul,w,c
  6124  001AAE  6EF6               	movwf	tblptrl,c
  6125  001AB0  0E06               	movlw	high __powers_
  6126  001AB2  2020               	addwfc	?___wmul+1,w,c
  6127  001AB4  6EF7               	movwf	tblptrh,c
  6128  001AB6  0009               	tblrd		*+
  6129  001AB8  CFF5 F039          	movff	tablat,??_scale
  6130  001ABC  0009               	tblrd		*+
  6131  001ABE  CFF5 F03A          	movff	tablat,??_scale+1
  6132  001AC2  0009               	tblrd		*+
  6133  001AC4  CFF5 F03B          	movff	tablat,??_scale+2
  6134  001AC8  C03B  F027         	movff	??_scale+2,?___ftmul+2
  6135  001ACC  C03A  F026         	movff	??_scale+1,?___ftmul+1
  6136  001AD0  C039  F025         	movff	??_scale,?___ftmul
  6137  001AD4  0E00               	movlw	0
  6138  001AD6  6E22               	movwf	?___wmul+3,c
  6139  001AD8  0E03               	movlw	3
  6140  001ADA  6E21               	movwf	?___wmul+2,c
  6141  001ADC  0E00               	movlw	0
  6142  001ADE  6E12               	movwf	?___awmod+3,c
  6143  001AE0  0E0A               	movlw	10
  6144  001AE2  6E11               	movwf	?___awmod+2,c
  6145  001AE4  5036               	movf	scale@scl,w,c
  6146  001AE6  6E0F               	movwf	?___awmod,c
  6147  001AE8  6A10               	clrf	?___awmod+1,c
  6148  001AEA  BE0F               	btfsc	?___awmod,7,c
  6149  001AEC  0610               	decf	?___awmod+1,f,c
  6150  001AEE  EC74  F015         	call	___awmod	;wreg free
  6151  001AF2  C00F  F01F         	movff	?___awmod,?___wmul
  6152  001AF6  C010  F020         	movff	?___awmod+1,?___wmul+1
  6153  001AFA  EC0A  F017         	call	___wmul	;wreg free
  6154  001AFE  0E4F               	movlw	low __powers_
  6155  001B00  241F               	addwf	?___wmul,w,c
  6156  001B02  6EF6               	movwf	tblptrl,c
  6157  001B04  0E06               	movlw	high __powers_
  6158  001B06  2020               	addwfc	?___wmul+1,w,c
  6159  001B08  6EF7               	movwf	tblptrh,c
  6160  001B0A  0009               	tblrd		*+
  6161  001B0C  CFF5 F03C          	movff	tablat,??_scale+3
  6162  001B10  0009               	tblrd		*+
  6163  001B12  CFF5 F03D          	movff	tablat,??_scale+4
  6164  001B16  0009               	tblrd		*+
  6165  001B18  CFF5 F03E          	movff	tablat,??_scale+5
  6166  001B1C  C03E  F02A         	movff	??_scale+5,?___ftmul+5
  6167  001B20  C03D  F029         	movff	??_scale+4,?___ftmul+4
  6168  001B24  C03C  F028         	movff	??_scale+3,?___ftmul+3
  6169  001B28  EC1B  F011         	call	___ftmul	;wreg free
  6170  001B2C                     L13:
  6171  001B2C  C027  F038         	movff	?___ftmul+2,?_scale+2
  6172  001B30  C026  F037         	movff	?___ftmul+1,?_scale+1
  6173  001B34  C025  F036         	movff	?___ftmul,?_scale
  6174  001B38  D017               	goto	l124
  6175  001B3A                     l4251:
  6176                           
  6177                           ;doprnt.c: 440: return _powers_[scl];
  6178  001B3A  5036               	movf	scale@scl,w,c
  6179  001B3C  0D03               	mullw	3
  6180  001B3E  0E4F               	movlw	low __powers_
  6181  001B40  24F3               	addwf	prodl,w,c
  6182  001B42  6EF6               	movwf	tblptrl,c
  6183  001B44  0E06               	movlw	high __powers_
  6184  001B46                     L12:
  6185  001B46  20F4               	addwfc	prodh,w,c
  6186  001B48  6EF7               	movwf	tblptrh,c
  6187  001B4A  0009               	tblrd		*+
  6188  001B4C  CFF5 F039          	movff	tablat,??_scale
  6189  001B50  0009               	tblrd		*+
  6190  001B52  CFF5 F03A          	movff	tablat,??_scale+1
  6191  001B56  0009               	tblrd		*+
  6192  001B58  CFF5 F03B          	movff	tablat,??_scale+2
  6193  001B5C  C03B  F038         	movff	??_scale+2,?_scale+2
  6194  001B60  C03A  F037         	movff	??_scale+1,?_scale+1
  6195  001B64  C039  F036         	movff	??_scale,?_scale
  6196  001B68                     l124:
  6197  001B68  0012               	return	
  6198  001B6A                     __end_of_scale:
  6199                           	opt stack 0
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           wreg	equ	0xFE8
  6208                           indf2	equ	0xFDF
  6209                           postinc2	equ	0xFDE
  6210                           postdec2	equ	0xFDD
  6211                           fsr2h	equ	0xFDA
  6212                           fsr2l	equ	0xFD9
  6213                           status	equ	0xFD8
  6214                           
  6215 ;; *************** function _fround *****************
  6216 ;; Defined at:
  6217 ;;		line 410 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  prec            1   53[COMRAM] unsigned char 
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;		None
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  3   53[COMRAM] unsigned char 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6231 ;;      Params:         3       0       0       0       0       0       0
  6232 ;;      Locals:         6       0       0       0       0       0       0
  6233 ;;      Temps:          6       0       0       0       0       0       0
  6234 ;;      Totals:        15       0       0       0       0       0       0
  6235 ;;Total ram usage:       15 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    3
  6238 ;; This function calls:
  6239 ;;		___ftmul
  6240 ;;		___awdiv
  6241 ;;		___awmod
  6242 ;;		___wmul
  6243 ;; This function is called by:
  6244 ;;		_sprintf
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text21
  6249  001B6A                     __ptext21:
  6250                           	opt stack 0
  6251  001B6A                     _fround:
  6252                           	opt stack 26
  6253                           
  6254                           ;doprnt.c: 413: if(prec>=110)
  6255                           
  6256                           ;incstack = 0
  6257                           ;incstack = 0
  6258  001B6A  0E6D               	movlw	109
  6259  001B6C  6436               	cpfsgt	fround@prec,c
  6260  001B6E  D0AB               	goto	l4203
  6261                           
  6262                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6263  001B70  0E00               	movlw	0
  6264  001B72  6E22               	movwf	?___wmul+3,c
  6265  001B74  0E03               	movlw	3
  6266  001B76  6E21               	movwf	?___wmul+2,c
  6267  001B78  0E00               	movlw	0
  6268  001B7A  6E19               	movwf	?___awdiv+3,c
  6269  001B7C  0E0A               	movlw	10
  6270  001B7E  6E18               	movwf	?___awdiv+2,c
  6271  001B80  0E00               	movlw	0
  6272  001B82  6E12               	movwf	?___awmod+3,c
  6273  001B84  0E64               	movlw	100
  6274  001B86  6E11               	movwf	?___awmod+2,c
  6275  001B88  C036  F00F         	movff	fround@prec,?___awmod
  6276  001B8C  6A10               	clrf	?___awmod+1,c
  6277  001B8E  EC74  F015         	call	___awmod	;wreg free
  6278  001B92  C00F  F016         	movff	?___awmod,?___awdiv
  6279  001B96  C010  F017         	movff	?___awmod+1,?___awdiv+1
  6280  001B9A  ECA6  F014         	call	___awdiv	;wreg free
  6281  001B9E  0E09               	movlw	9
  6282  001BA0  2416               	addwf	?___awdiv,w,c
  6283  001BA2  6E1F               	movwf	?___wmul,c
  6284  001BA4  0E00               	movlw	0
  6285  001BA6  2017               	addwfc	?___awdiv+1,w,c
  6286  001BA8  6E20               	movwf	?___wmul+1,c
  6287  001BAA  EC0A  F017         	call	___wmul	;wreg free
  6288  001BAE  0E28               	movlw	low __npowers_
  6289  001BB0  241F               	addwf	?___wmul,w,c
  6290  001BB2  6EF6               	movwf	tblptrl,c
  6291  001BB4  0E06               	movlw	high __npowers_
  6292  001BB6  2020               	addwfc	?___wmul+1,w,c
  6293  001BB8  6EF7               	movwf	tblptrh,c
  6294  001BBA  0009               	tblrd		*+
  6295  001BBC  CFF5 F039          	movff	tablat,??_fround
  6296  001BC0  0009               	tblrd		*+
  6297  001BC2  CFF5 F03A          	movff	tablat,??_fround+1
  6298  001BC6  0009               	tblrd		*+
  6299  001BC8  CFF5 F03B          	movff	tablat,??_fround+2
  6300  001BCC  C03B  F02A         	movff	??_fround+2,?___ftmul+5
  6301  001BD0  C03A  F029         	movff	??_fround+1,?___ftmul+4
  6302  001BD4  C039  F028         	movff	??_fround,?___ftmul+3
  6303  001BD8  0E00               	movlw	0
  6304  001BDA  6E22               	movwf	?___wmul+3,c
  6305  001BDC  0E03               	movlw	3
  6306  001BDE  6E21               	movwf	?___wmul+2,c
  6307  001BE0  0E00               	movlw	0
  6308  001BE2  6E19               	movwf	?___awdiv+3,c
  6309  001BE4  0E64               	movlw	100
  6310  001BE6  6E18               	movwf	?___awdiv+2,c
  6311  001BE8  C036  F016         	movff	fround@prec,?___awdiv
  6312  001BEC  6A17               	clrf	?___awdiv+1,c
  6313  001BEE  ECA6  F014         	call	___awdiv	;wreg free
  6314  001BF2  0E12               	movlw	18
  6315  001BF4  2416               	addwf	?___awdiv,w,c
  6316  001BF6  6E1F               	movwf	?___wmul,c
  6317  001BF8  0E00               	movlw	0
  6318  001BFA  2017               	addwfc	?___awdiv+1,w,c
  6319  001BFC  6E20               	movwf	?___wmul+1,c
  6320  001BFE  EC0A  F017         	call	___wmul	;wreg free
  6321  001C02  0E28               	movlw	low __npowers_
  6322  001C04  241F               	addwf	?___wmul,w,c
  6323  001C06  6EF6               	movwf	tblptrl,c
  6324  001C08  0E06               	movlw	high __npowers_
  6325  001C0A  2020               	addwfc	?___wmul+1,w,c
  6326  001C0C  6EF7               	movwf	tblptrh,c
  6327  001C0E  0009               	tblrd		*+
  6328  001C10  CFF5 F03C          	movff	tablat,??_fround+3
  6329  001C14  0009               	tblrd		*+
  6330  001C16  CFF5 F03D          	movff	tablat,??_fround+4
  6331  001C1A  0009               	tblrd		*+
  6332  001C1C  CFF5 F03E          	movff	tablat,??_fround+5
  6333  001C20  C03E  F027         	movff	??_fround+5,?___ftmul+2
  6334  001C24  C03D  F026         	movff	??_fround+4,?___ftmul+1
  6335  001C28  C03C  F025         	movff	??_fround+3,?___ftmul
  6336  001C2C  EC1B  F011         	call	___ftmul	;wreg free
  6337  001C30  C027  F044         	movff	?___ftmul+2,_fround$1135+2
  6338  001C34  C026  F043         	movff	?___ftmul+1,_fround$1135+1
  6339  001C38  C025  F042         	movff	?___ftmul,_fround$1135
  6340                           
  6341                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6342  001C3C  0E00               	movlw	0
  6343  001C3E  6E22               	movwf	?___wmul+3,c
  6344  001C40  0E03               	movlw	3
  6345  001C42  6E21               	movwf	?___wmul+2,c
  6346  001C44  0E00               	movlw	0
  6347  001C46  6E12               	movwf	?___awmod+3,c
  6348  001C48  0E0A               	movlw	10
  6349  001C4A  6E11               	movwf	?___awmod+2,c
  6350  001C4C  C036  F00F         	movff	fround@prec,?___awmod
  6351  001C50  6A10               	clrf	?___awmod+1,c
  6352  001C52  EC74  F015         	call	___awmod	;wreg free
  6353  001C56  C00F  F01F         	movff	?___awmod,?___wmul
  6354  001C5A  C010  F020         	movff	?___awmod+1,?___wmul+1
  6355  001C5E  EC0A  F017         	call	___wmul	;wreg free
  6356  001C62  0E28               	movlw	low __npowers_
  6357  001C64  241F               	addwf	?___wmul,w,c
  6358  001C66  6EF6               	movwf	tblptrl,c
  6359  001C68  0E06               	movlw	high __npowers_
  6360  001C6A  2020               	addwfc	?___wmul+1,w,c
  6361  001C6C  6EF7               	movwf	tblptrh,c
  6362  001C6E  0009               	tblrd		*+
  6363  001C70  CFF5 F039          	movff	tablat,??_fround
  6364  001C74  0009               	tblrd		*+
  6365  001C76  CFF5 F03A          	movff	tablat,??_fround+1
  6366  001C7A  0009               	tblrd		*+
  6367  001C7C  CFF5 F03B          	movff	tablat,??_fround+2
  6368  001C80  C03B  F02A         	movff	??_fround+2,?___ftmul+5
  6369  001C84  C03A  F029         	movff	??_fround+1,?___ftmul+4
  6370  001C88  C039  F028         	movff	??_fround,?___ftmul+3
  6371  001C8C  C042  F025         	movff	_fround$1135,?___ftmul
  6372  001C90  C043  F026         	movff	_fround$1135+1,?___ftmul+1
  6373  001C94  C044  F027         	movff	_fround$1135+2,?___ftmul+2
  6374  001C98  EC1B  F011         	call	___ftmul	;wreg free
  6375  001C9C  C027  F041         	movff	?___ftmul+2,_fround$1136+2
  6376  001CA0  C026  F040         	movff	?___ftmul+1,_fround$1136+1
  6377  001CA4  C025  F03F         	movff	?___ftmul,_fround$1136
  6378                           
  6379                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6380  001CA8  C03F  F025         	movff	_fround$1136,?___ftmul
  6381  001CAC  C040  F026         	movff	_fround$1136+1,?___ftmul+1
  6382  001CB0  C041  F027         	movff	_fround$1136+2,?___ftmul+2
  6383  001CB4  0E00               	movlw	0
  6384  001CB6  6E28               	movwf	?___ftmul+3,c
  6385  001CB8  0E00               	movlw	0
  6386  001CBA  6E29               	movwf	?___ftmul+4,c
  6387  001CBC  0E3F               	movlw	63
  6388  001CBE  6E2A               	movwf	?___ftmul+5,c
  6389  001CC0  EC1B  F011         	call	___ftmul	;wreg free
  6390  001CC4  D08B               	goto	L15
  6391  001CC6                     l4203:
  6392                           
  6393                           ;doprnt.c: 415: else if(prec > 10)
  6394  001CC6  0E0A               	movlw	10
  6395  001CC8  6436               	cpfsgt	fround@prec,c
  6396  001CCA  D069               	goto	l4211
  6397                           
  6398                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6399  001CCC  0E00               	movlw	0
  6400  001CCE  6E22               	movwf	?___wmul+3,c
  6401  001CD0  0E03               	movlw	3
  6402  001CD2  6E21               	movwf	?___wmul+2,c
  6403  001CD4  0E00               	movlw	0
  6404  001CD6  6E12               	movwf	?___awmod+3,c
  6405  001CD8  0E0A               	movlw	10
  6406  001CDA  6E11               	movwf	?___awmod+2,c
  6407  001CDC  C036  F00F         	movff	fround@prec,?___awmod
  6408  001CE0  6A10               	clrf	?___awmod+1,c
  6409  001CE2  EC74  F015         	call	___awmod	;wreg free
  6410  001CE6  C00F  F01F         	movff	?___awmod,?___wmul
  6411  001CEA  C010  F020         	movff	?___awmod+1,?___wmul+1
  6412  001CEE  EC0A  F017         	call	___wmul	;wreg free
  6413  001CF2  0E28               	movlw	low __npowers_
  6414  001CF4  241F               	addwf	?___wmul,w,c
  6415  001CF6  6EF6               	movwf	tblptrl,c
  6416  001CF8  0E06               	movlw	high __npowers_
  6417  001CFA  2020               	addwfc	?___wmul+1,w,c
  6418  001CFC  6EF7               	movwf	tblptrh,c
  6419  001CFE  0009               	tblrd		*+
  6420  001D00  CFF5 F039          	movff	tablat,??_fround
  6421  001D04  0009               	tblrd		*+
  6422  001D06  CFF5 F03A          	movff	tablat,??_fround+1
  6423  001D0A  0009               	tblrd		*+
  6424  001D0C  CFF5 F03B          	movff	tablat,??_fround+2
  6425  001D10  C03B  F02A         	movff	??_fround+2,?___ftmul+5
  6426  001D14  C03A  F029         	movff	??_fround+1,?___ftmul+4
  6427  001D18  C039  F028         	movff	??_fround,?___ftmul+3
  6428  001D1C  0E00               	movlw	0
  6429  001D1E  6E22               	movwf	?___wmul+3,c
  6430  001D20  0E03               	movlw	3
  6431  001D22  6E21               	movwf	?___wmul+2,c
  6432  001D24  0E00               	movlw	0
  6433  001D26  6E19               	movwf	?___awdiv+3,c
  6434  001D28  0E0A               	movlw	10
  6435  001D2A  6E18               	movwf	?___awdiv+2,c
  6436  001D2C  C036  F016         	movff	fround@prec,?___awdiv
  6437  001D30  6A17               	clrf	?___awdiv+1,c
  6438  001D32  ECA6  F014         	call	___awdiv	;wreg free
  6439  001D36  0E09               	movlw	9
  6440  001D38  2416               	addwf	?___awdiv,w,c
  6441  001D3A  6E1F               	movwf	?___wmul,c
  6442  001D3C  0E00               	movlw	0
  6443  001D3E  2017               	addwfc	?___awdiv+1,w,c
  6444  001D40  6E20               	movwf	?___wmul+1,c
  6445  001D42  EC0A  F017         	call	___wmul	;wreg free
  6446  001D46  0E28               	movlw	low __npowers_
  6447  001D48  241F               	addwf	?___wmul,w,c
  6448  001D4A  6EF6               	movwf	tblptrl,c
  6449  001D4C  0E06               	movlw	high __npowers_
  6450  001D4E  2020               	addwfc	?___wmul+1,w,c
  6451  001D50  6EF7               	movwf	tblptrh,c
  6452  001D52  0009               	tblrd		*+
  6453  001D54  CFF5 F03C          	movff	tablat,??_fround+3
  6454  001D58  0009               	tblrd		*+
  6455  001D5A  CFF5 F03D          	movff	tablat,??_fround+4
  6456  001D5E  0009               	tblrd		*+
  6457  001D60  CFF5 F03E          	movff	tablat,??_fround+5
  6458  001D64  C03E  F027         	movff	??_fround+5,?___ftmul+2
  6459  001D68  C03D  F026         	movff	??_fround+4,?___ftmul+1
  6460  001D6C  C03C  F025         	movff	??_fround+3,?___ftmul
  6461  001D70  EC1B  F011         	call	___ftmul	;wreg free
  6462  001D74  C027  F044         	movff	?___ftmul+2,_fround$1135+2
  6463  001D78  C026  F043         	movff	?___ftmul+1,_fround$1135+1
  6464  001D7C  C025  F042         	movff	?___ftmul,_fround$1135
  6465                           
  6466                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6467  001D80  C042  F025         	movff	_fround$1135,?___ftmul
  6468  001D84  C043  F026         	movff	_fround$1135+1,?___ftmul+1
  6469  001D88  C044  F027         	movff	_fround$1135+2,?___ftmul+2
  6470  001D8C  0E00               	movlw	0
  6471  001D8E  6E28               	movwf	?___ftmul+3,c
  6472  001D90  0E00               	movlw	0
  6473  001D92  6E29               	movwf	?___ftmul+4,c
  6474  001D94  0E3F               	movlw	63
  6475  001D96  6E2A               	movwf	?___ftmul+5,c
  6476  001D98  EC1B  F011         	call	___ftmul	;wreg free
  6477  001D9C  D01F               	goto	L15
  6478  001D9E                     l4211:
  6479                           
  6480                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6481  001D9E  5036               	movf	fround@prec,w,c
  6482  001DA0  0D03               	mullw	3
  6483  001DA2  0E28               	movlw	low __npowers_
  6484  001DA4  24F3               	addwf	prodl,w,c
  6485  001DA6  6EF6               	movwf	tblptrl,c
  6486  001DA8  0E06               	movlw	high __npowers_
  6487  001DAA  20F4               	addwfc	prodh,w,c
  6488  001DAC  6EF7               	movwf	tblptrh,c
  6489  001DAE  0009               	tblrd		*+
  6490  001DB0  CFF5 F039          	movff	tablat,??_fround
  6491  001DB4  0009               	tblrd		*+
  6492  001DB6  CFF5 F03A          	movff	tablat,??_fround+1
  6493  001DBA  0009               	tblrd		*+
  6494  001DBC  CFF5 F03B          	movff	tablat,??_fround+2
  6495  001DC0  C03B  F027         	movff	??_fround+2,?___ftmul+2
  6496  001DC4  C03A  F026         	movff	??_fround+1,?___ftmul+1
  6497  001DC8  C039  F025         	movff	??_fround,?___ftmul
  6498  001DCC  0E00               	movlw	0
  6499  001DCE  6E28               	movwf	?___ftmul+3,c
  6500  001DD0  0E00               	movlw	0
  6501  001DD2  6E29               	movwf	?___ftmul+4,c
  6502  001DD4  0E3F               	movlw	63
  6503  001DD6  6E2A               	movwf	?___ftmul+5,c
  6504  001DD8  EC1B  F011         	call	___ftmul	;wreg free
  6505  001DDC                     L15:
  6506  001DDC  C027  F038         	movff	?___ftmul+2,?_fround+2
  6507  001DE0  C026  F037         	movff	?___ftmul+1,?_fround+1
  6508  001DE4  C025  F036         	movff	?___ftmul,?_fround
  6509  001DE8  0012               	return	
  6510  001DEA                     __end_of_fround:
  6511                           	opt stack 0
  6512                           tblptru	equ	0xFF8
  6513                           tblptrh	equ	0xFF7
  6514                           tblptrl	equ	0xFF6
  6515                           tablat	equ	0xFF5
  6516                           prodh	equ	0xFF4
  6517                           prodl	equ	0xFF3
  6518                           intcon	equ	0xFF2
  6519                           wreg	equ	0xFE8
  6520                           indf2	equ	0xFDF
  6521                           postinc2	equ	0xFDE
  6522                           postdec2	equ	0xFDD
  6523                           fsr2h	equ	0xFDA
  6524                           fsr2l	equ	0xFD9
  6525                           status	equ	0xFD8
  6526                           
  6527 ;; *************** function ___wmul *****************
  6528 ;; Defined at:
  6529 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;  multiplier      2   30[COMRAM] unsigned int 
  6532 ;;  multiplicand    2   32[COMRAM] unsigned int 
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;  product         2   34[COMRAM] unsigned int 
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  2   30[COMRAM] unsigned int 
  6537 ;; Registers used:
  6538 ;;		wreg, status,2, status,0, prodl, prodh
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6544 ;;      Params:         4       0       0       0       0       0       0
  6545 ;;      Locals:         2       0       0       0       0       0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0
  6547 ;;      Totals:         6       0       0       0       0       0       0
  6548 ;;Total ram usage:        6 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    1
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_fround
  6555 ;;		_scale
  6556 ;;		_sprintf
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text22
  6561  002E14                     __ptext22:
  6562                           	opt stack 0
  6563  002E14                     ___wmul:
  6564                           	opt stack 28
  6565                           
  6566                           ;incstack = 0
  6567                           ;incstack = 0
  6568  002E14  501F               	movf	___wmul@multiplier,w,c
  6569  002E16  0221               	mulwf	___wmul@multiplicand,c
  6570  002E18  CFF3 F023          	movff	prodl,___wmul@product
  6571  002E1C  CFF4 F024          	movff	prodh,___wmul@product+1
  6572  002E20  501F               	movf	___wmul@multiplier,w,c
  6573  002E22  0222               	mulwf	___wmul@multiplicand+1,c
  6574  002E24  CFF3 FFF4          	movff	prodl,prodh
  6575  002E28  6AF3               	clrf	prodl,c
  6576  002E2A  50F3               	movf	prodl,w,c
  6577  002E2C  2623               	addwf	___wmul@product,f,c
  6578  002E2E  50F4               	movf	prodh,w,c
  6579  002E30  2224               	addwfc	___wmul@product+1,f,c
  6580  002E32  5020               	movf	___wmul@multiplier+1,w,c
  6581  002E34  0221               	mulwf	___wmul@multiplicand,c
  6582  002E36  CFF3 FFF4          	movff	prodl,prodh
  6583  002E3A  6AF3               	clrf	prodl,c
  6584  002E3C  50F3               	movf	prodl,w,c
  6585  002E3E  2623               	addwf	___wmul@product,f,c
  6586  002E40  50F4               	movf	prodh,w,c
  6587  002E42  2224               	addwfc	___wmul@product+1,f,c
  6588  002E44  C023  F01F         	movff	___wmul@product,?___wmul
  6589  002E48  C024  F020         	movff	___wmul@product+1,?___wmul+1
  6590  002E4C  0012               	return	
  6591  002E4E                     __end_of___wmul:
  6592                           	opt stack 0
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           intcon	equ	0xFF2
  6600                           wreg	equ	0xFE8
  6601                           indf2	equ	0xFDF
  6602                           postinc2	equ	0xFDE
  6603                           postdec2	equ	0xFDD
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function ___awmod *****************
  6609 ;; Defined at:
  6610 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awmod.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  dividend        2   14[COMRAM] int 
  6613 ;;  divisor         2   16[COMRAM] int 
  6614 ;; Auto vars:     Size  Location     Type
  6615 ;;  sign            1   20[COMRAM] unsigned char 
  6616 ;;  counter         1   19[COMRAM] unsigned char 
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  2   14[COMRAM] int 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6626 ;;      Params:         4       0       0       0       0       0       0
  6627 ;;      Locals:         2       0       0       0       0       0       0
  6628 ;;      Temps:          1       0       0       0       0       0       0
  6629 ;;      Totals:         7       0       0       0       0       0       0
  6630 ;;Total ram usage:        7 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    1
  6633 ;; This function calls:
  6634 ;;		Nothing
  6635 ;; This function is called by:
  6636 ;;		_fround
  6637 ;;		_scale
  6638 ;;		_sprintf
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           	psect	text23
  6643  002AE8                     __ptext23:
  6644                           	opt stack 0
  6645  002AE8                     ___awmod:
  6646                           	opt stack 28
  6647                           
  6648                           ;incstack = 0
  6649                           ;incstack = 0
  6650  002AE8  6E13               	movwf	??___awmod& (0+255),c
  6651  002AEA  0E00               	movlw	0
  6652  002AEC  6E15               	movwf	___awmod@sign,c
  6653  002AEE  5013               	movf	??___awmod& (0+255),w,c
  6654  002AF0  AE10               	btfss	___awmod@dividend+1,7,c
  6655  002AF2  D008               	goto	l4649
  6656  002AF4  6C0F               	negf	___awmod@dividend,c
  6657  002AF6  1E10               	comf	___awmod@dividend+1,f,c
  6658  002AF8  B0D8               	btfsc	status,0,c
  6659  002AFA  2A10               	incf	___awmod@dividend+1,f,c
  6660  002AFC  6E13               	movwf	??___awmod& (0+255),c
  6661  002AFE  0E01               	movlw	1
  6662  002B00  6E15               	movwf	___awmod@sign,c
  6663  002B02  5013               	movf	??___awmod& (0+255),w,c
  6664  002B04                     l4649:
  6665  002B04  AE12               	btfss	___awmod@divisor+1,7,c
  6666  002B06  D004               	goto	l4653
  6667  002B08  6C11               	negf	___awmod@divisor,c
  6668  002B0A  1E12               	comf	___awmod@divisor+1,f,c
  6669  002B0C  B0D8               	btfsc	status,0,c
  6670  002B0E  2A12               	incf	___awmod@divisor+1,f,c
  6671  002B10                     l4653:
  6672  002B10  5012               	movf	___awmod@divisor+1,w,c
  6673  002B12  1011               	iorwf	___awmod@divisor,w,c
  6674  002B14  B4D8               	btfsc	status,2,c
  6675  002B16  D01A               	goto	l4669
  6676  002B18  6E13               	movwf	??___awmod& (0+255),c
  6677  002B1A  0E01               	movlw	1
  6678  002B1C  6E14               	movwf	___awmod@counter,c
  6679  002B1E  5013               	movf	??___awmod& (0+255),w,c
  6680  002B20  D004               	goto	l4659
  6681  002B22                     l4657:
  6682  002B22  90D8               	bcf	status,0,c
  6683  002B24  3611               	rlcf	___awmod@divisor,f,c
  6684  002B26  3612               	rlcf	___awmod@divisor+1,f,c
  6685  002B28  2A14               	incf	___awmod@counter,f,c
  6686  002B2A                     l4659:
  6687  002B2A  AE12               	btfss	___awmod@divisor+1,7,c
  6688  002B2C  D7FA               	goto	l4657
  6689  002B2E                     l4661:
  6690  002B2E  5011               	movf	___awmod@divisor,w,c
  6691  002B30  5C0F               	subwf	___awmod@dividend,w,c
  6692  002B32  5012               	movf	___awmod@divisor+1,w,c
  6693  002B34  5810               	subwfb	___awmod@dividend+1,w,c
  6694  002B36  A0D8               	btfss	status,0,c
  6695  002B38  D004               	goto	l4665
  6696  002B3A  5011               	movf	___awmod@divisor,w,c
  6697  002B3C  5E0F               	subwf	___awmod@dividend,f,c
  6698  002B3E  5012               	movf	___awmod@divisor+1,w,c
  6699  002B40  5A10               	subwfb	___awmod@dividend+1,f,c
  6700  002B42                     l4665:
  6701  002B42  90D8               	bcf	status,0,c
  6702  002B44  3212               	rrcf	___awmod@divisor+1,f,c
  6703  002B46  3211               	rrcf	___awmod@divisor,f,c
  6704  002B48  2E14               	decfsz	___awmod@counter,f,c
  6705  002B4A  D7F1               	goto	l4661
  6706  002B4C                     l4669:
  6707  002B4C  5015               	movf	___awmod@sign,w,c
  6708  002B4E  B4D8               	btfsc	status,2,c
  6709  002B50  D004               	goto	l4673
  6710  002B52  6C0F               	negf	___awmod@dividend,c
  6711  002B54  1E10               	comf	___awmod@dividend+1,f,c
  6712  002B56  B0D8               	btfsc	status,0,c
  6713  002B58  2A10               	incf	___awmod@dividend+1,f,c
  6714  002B5A                     l4673:
  6715  002B5A  C00F  F00F         	movff	___awmod@dividend,?___awmod
  6716  002B5E  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  6717  002B62  0012               	return	
  6718  002B64                     __end_of___awmod:
  6719                           	opt stack 0
  6720                           tblptru	equ	0xFF8
  6721                           tblptrh	equ	0xFF7
  6722                           tblptrl	equ	0xFF6
  6723                           tablat	equ	0xFF5
  6724                           prodh	equ	0xFF4
  6725                           prodl	equ	0xFF3
  6726                           intcon	equ	0xFF2
  6727                           wreg	equ	0xFE8
  6728                           indf2	equ	0xFDF
  6729                           postinc2	equ	0xFDE
  6730                           postdec2	equ	0xFDD
  6731                           fsr2h	equ	0xFDA
  6732                           fsr2l	equ	0xFD9
  6733                           status	equ	0xFD8
  6734                           
  6735 ;; *************** function ___awdiv *****************
  6736 ;; Defined at:
  6737 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awdiv.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  dividend        2   21[COMRAM] int 
  6740 ;;  divisor         2   23[COMRAM] int 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  quotient        2   28[COMRAM] int 
  6743 ;;  sign            1   27[COMRAM] unsigned char 
  6744 ;;  counter         1   26[COMRAM] unsigned char 
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  2   21[COMRAM] int 
  6747 ;; Registers used:
  6748 ;;		wreg, status,2, status,0
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/0
  6751 ;;		On exit  : 0/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6754 ;;      Params:         4       0       0       0       0       0       0
  6755 ;;      Locals:         4       0       0       0       0       0       0
  6756 ;;      Temps:          1       0       0       0       0       0       0
  6757 ;;      Totals:         9       0       0       0       0       0       0
  6758 ;;Total ram usage:        9 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:    1
  6761 ;; This function calls:
  6762 ;;		Nothing
  6763 ;; This function is called by:
  6764 ;;		_fround
  6765 ;;		_scale
  6766 ;;		_sprintf
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           	psect	text24
  6771  00294C                     __ptext24:
  6772                           	opt stack 0
  6773  00294C                     ___awdiv:
  6774                           	opt stack 28
  6775                           
  6776                           ;incstack = 0
  6777                           ;incstack = 0
  6778  00294C  6E1A               	movwf	??___awdiv& (0+255),c
  6779  00294E  0E00               	movlw	0
  6780  002950  6E1C               	movwf	___awdiv@sign,c
  6781  002952  501A               	movf	??___awdiv& (0+255),w,c
  6782  002954  AE19               	btfss	___awdiv@divisor+1,7,c
  6783  002956  D008               	goto	l4605
  6784  002958  6C18               	negf	___awdiv@divisor,c
  6785  00295A  1E19               	comf	___awdiv@divisor+1,f,c
  6786  00295C  B0D8               	btfsc	status,0,c
  6787  00295E  2A19               	incf	___awdiv@divisor+1,f,c
  6788  002960  6E1A               	movwf	??___awdiv& (0+255),c
  6789  002962  0E01               	movlw	1
  6790  002964  6E1C               	movwf	___awdiv@sign,c
  6791  002966  501A               	movf	??___awdiv& (0+255),w,c
  6792  002968                     l4605:
  6793  002968  AE17               	btfss	___awdiv@dividend+1,7,c
  6794  00296A  D006               	goto	l4611
  6795  00296C  6C16               	negf	___awdiv@dividend,c
  6796  00296E  1E17               	comf	___awdiv@dividend+1,f,c
  6797  002970  B0D8               	btfsc	status,0,c
  6798  002972  2A17               	incf	___awdiv@dividend+1,f,c
  6799  002974  0E01               	movlw	1
  6800  002976  1A1C               	xorwf	___awdiv@sign,f,c
  6801  002978                     l4611:
  6802  002978  0E00               	movlw	0
  6803  00297A  6E1E               	movwf	___awdiv@quotient+1,c
  6804  00297C  0E00               	movlw	0
  6805  00297E  6E1D               	movwf	___awdiv@quotient,c
  6806  002980  5019               	movf	___awdiv@divisor+1,w,c
  6807  002982  1018               	iorwf	___awdiv@divisor,w,c
  6808  002984  B4D8               	btfsc	status,2,c
  6809  002986  D01E               	goto	l4633
  6810  002988  6E1A               	movwf	??___awdiv& (0+255),c
  6811  00298A  0E01               	movlw	1
  6812  00298C  6E1B               	movwf	___awdiv@counter,c
  6813  00298E  501A               	movf	??___awdiv& (0+255),w,c
  6814  002990  D004               	goto	l4619
  6815  002992                     l4617:
  6816  002992  90D8               	bcf	status,0,c
  6817  002994  3618               	rlcf	___awdiv@divisor,f,c
  6818  002996  3619               	rlcf	___awdiv@divisor+1,f,c
  6819  002998  2A1B               	incf	___awdiv@counter,f,c
  6820  00299A                     l4619:
  6821  00299A  AE19               	btfss	___awdiv@divisor+1,7,c
  6822  00299C  D7FA               	goto	l4617
  6823  00299E                     l4621:
  6824  00299E  90D8               	bcf	status,0,c
  6825  0029A0  361D               	rlcf	___awdiv@quotient,f,c
  6826  0029A2  361E               	rlcf	___awdiv@quotient+1,f,c
  6827  0029A4  5018               	movf	___awdiv@divisor,w,c
  6828  0029A6  5C16               	subwf	___awdiv@dividend,w,c
  6829  0029A8  5019               	movf	___awdiv@divisor+1,w,c
  6830  0029AA  5817               	subwfb	___awdiv@dividend+1,w,c
  6831  0029AC  A0D8               	btfss	status,0,c
  6832  0029AE  D005               	goto	l4629
  6833  0029B0  5018               	movf	___awdiv@divisor,w,c
  6834  0029B2  5E16               	subwf	___awdiv@dividend,f,c
  6835  0029B4  5019               	movf	___awdiv@divisor+1,w,c
  6836  0029B6  5A17               	subwfb	___awdiv@dividend+1,f,c
  6837  0029B8  801D               	bsf	___awdiv@quotient,0,c
  6838  0029BA                     l4629:
  6839  0029BA  90D8               	bcf	status,0,c
  6840  0029BC  3219               	rrcf	___awdiv@divisor+1,f,c
  6841  0029BE  3218               	rrcf	___awdiv@divisor,f,c
  6842  0029C0  2E1B               	decfsz	___awdiv@counter,f,c
  6843  0029C2  D7ED               	goto	l4621
  6844  0029C4                     l4633:
  6845  0029C4  501C               	movf	___awdiv@sign,w,c
  6846  0029C6  B4D8               	btfsc	status,2,c
  6847  0029C8  D004               	goto	l4637
  6848  0029CA  6C1D               	negf	___awdiv@quotient,c
  6849  0029CC  1E1E               	comf	___awdiv@quotient+1,f,c
  6850  0029CE  B0D8               	btfsc	status,0,c
  6851  0029D0  2A1E               	incf	___awdiv@quotient+1,f,c
  6852  0029D2                     l4637:
  6853  0029D2  C01D  F016         	movff	___awdiv@quotient,?___awdiv
  6854  0029D6  C01E  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  6855  0029DA  0012               	return	
  6856  0029DC                     __end_of___awdiv:
  6857                           	opt stack 0
  6858                           tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           intcon	equ	0xFF2
  6865                           wreg	equ	0xFE8
  6866                           indf2	equ	0xFDF
  6867                           postinc2	equ	0xFDE
  6868                           postdec2	equ	0xFDD
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873 ;; *************** function _load_string *****************
  6874 ;; Defined at:
  6875 ;;		line 186 in file "HW8.c"
  6876 ;; Parameters:    Size  Location     Type
  6877 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
  6878 ;;		 -> main@buffer(20), STR_1(16), 
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;		None
  6881 ;; Return value:  Size  Location     Type
  6882 ;;		None               void
  6883 ;; Registers used:
  6884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6890 ;;      Params:         2       0       0       0       0       0       0
  6891 ;;      Locals:         0       0       0       0       0       0       0
  6892 ;;      Temps:          3       0       0       0       0       0       0
  6893 ;;      Totals:         5       0       0       0       0       0       0
  6894 ;;Total ram usage:        5 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    4
  6897 ;; This function calls:
  6898 ;;		_send_data
  6899 ;; This function is called by:
  6900 ;;		_main
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           	psect	text25
  6905  002C32                     __ptext25:
  6906                           	opt stack 0
  6907  002C32                     _load_string:
  6908                           	opt stack 26
  6909                           
  6910                           ;HW8.c: 187: while(*ptr != 0){
  6911                           
  6912                           ;incstack = 0
  6913                           ;incstack = 0
  6914  002C32  D01F               	goto	l3773
  6915  002C34                     l3769:
  6916                           
  6917                           ;HW8.c: 188: send_data(*ptr,0,1,1);
  6918  002C34  501A               	movf	load_string@ptr,w,c
  6919  002C36  6EF6               	movwf	tblptrl,c
  6920  002C38  6EE9               	movwf	fsr0l,c
  6921  002C3A  0E05               	movlw	(high __ramtop+-1)
  6922  002C3C  6EEA               	movwf	fsr0h,c
  6923  002C3E  501B               	movf	load_string@ptr+1,w,c
  6924  002C40  64EA               	cpfsgt	fsr0h,c
  6925  002C42  D003               	bra	u1717
  6926  002C44  6EEA               	movwf	fsr0h,c
  6927  002C46  50EF               	movf	indf0,w,c
  6928  002C48  D003               	bra	u1710
  6929  002C4A                     u1717:
  6930  002C4A  6EF7               	movwf	tblptrh,c
  6931  002C4C  0008               	tblrd		*
  6932  002C4E  50F5               	movf	tablat,w,c
  6933  002C50                     u1710:
  6934  002C50  6E12               	movwf	?_send_data,c
  6935  002C52  6E1C               	movwf	??_load_string& (0+255),c
  6936  002C54  0E00               	movlw	0
  6937  002C56  6E13               	movwf	?_send_data+1,c
  6938  002C58  501C               	movf	??_load_string& (0+255),w,c
  6939  002C5A  6E1D               	movwf	(??_load_string+1)& (0+255),c
  6940  002C5C  0E01               	movlw	1
  6941  002C5E  6E14               	movwf	?_send_data+2,c
  6942  002C60  501D               	movf	(??_load_string+1)& (0+255),w,c
  6943  002C62  6E1E               	movwf	(??_load_string+2)& (0+255),c
  6944  002C64  0E01               	movlw	1
  6945  002C66  6E15               	movwf	?_send_data+3,c
  6946  002C68  501E               	movf	(??_load_string+2)& (0+255),w,c
  6947  002C6A  EC52  F014         	call	_send_data	;wreg free
  6948                           
  6949                           ;HW8.c: 189: ptr++;
  6950  002C6E  4A1A               	infsnz	load_string@ptr,f,c
  6951  002C70  2A1B               	incf	load_string@ptr+1,f,c
  6952  002C72                     l3773:
  6953  002C72  501A               	movf	load_string@ptr,w,c
  6954  002C74  6EF6               	movwf	tblptrl,c
  6955  002C76  6EE9               	movwf	fsr0l,c
  6956  002C78  0E05               	movlw	(high __ramtop+-1)
  6957  002C7A  6EEA               	movwf	fsr0h,c
  6958  002C7C  501B               	movf	load_string@ptr+1,w,c
  6959  002C7E  64EA               	cpfsgt	fsr0h,c
  6960  002C80  D003               	bra	u1727
  6961  002C82  6EEA               	movwf	fsr0h,c
  6962  002C84  50EF               	movf	indf0,w,c
  6963  002C86  D003               	bra	u1720
  6964  002C88                     u1727:
  6965  002C88  6EF7               	movwf	tblptrh,c
  6966  002C8A  0008               	tblrd		*
  6967  002C8C  50F5               	movf	tablat,w,c
  6968  002C8E                     u1720:
  6969  002C8E  0900               	iorlw	0
  6970  002C90  B4D8               	btfsc	status,2,c
  6971                           
  6972                           ;HW8.c: 190: }
  6973                           ;HW8.c: 191: return;
  6974  002C92  0012               	return	
  6975  002C94  D7CF               	goto	l3769
  6976  002C96                     __end_of_load_string:
  6977                           	opt stack 0
  6978                           tblptru	equ	0xFF8
  6979                           tblptrh	equ	0xFF7
  6980                           tblptrl	equ	0xFF6
  6981                           tablat	equ	0xFF5
  6982                           prodh	equ	0xFF4
  6983                           prodl	equ	0xFF3
  6984                           intcon	equ	0xFF2
  6985                           indf0	equ	0xFEF
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           postdec2	equ	0xFDD
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function _init_LCD *****************
  6997 ;; Defined at:
  6998 ;;		line 99 in file "HW8.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;		None
  7003 ;; Return value:  Size  Location     Type
  7004 ;;		None               void
  7005 ;; Registers used:
  7006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7012 ;;      Params:         0       0       0       0       0       0       0
  7013 ;;      Locals:         0       0       0       0       0       0       0
  7014 ;;      Temps:          4       0       0       0       0       0       0
  7015 ;;      Totals:         4       0       0       0       0       0       0
  7016 ;;Total ram usage:        4 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    4
  7019 ;; This function calls:
  7020 ;;		_send_data
  7021 ;;		_delayms
  7022 ;; This function is called by:
  7023 ;;		_main
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text26
  7028  002538                     __ptext26:
  7029                           	opt stack 0
  7030  002538                     _init_LCD:
  7031                           	opt stack 26
  7032                           
  7033                           ;HW8.c: 100: TRISD = 0x00;
  7034                           
  7035                           ;incstack = 0
  7036                           ;incstack = 0
  7037  002538  0E00               	movlw	0
  7038  00253A  6E95               	movwf	3989,c	;volatile
  7039                           
  7040                           ;HW8.c: 101: PORTD = 0x00;
  7041  00253C  0E00               	movlw	0
  7042  00253E  6E83               	movwf	3971,c	;volatile
  7043                           
  7044                           ;HW8.c: 102: PORTDbits.RD7 = 1;
  7045  002540  8E83               	bsf	3971,7,c	;volatile
  7046                           
  7047                           ;HW8.c: 103: delayms(100);
  7048  002542  6E1A               	movwf	??_init_LCD& (0+255),c
  7049  002544  0E64               	movlw	100
  7050  002546  6E0F               	movwf	?_delayms,c
  7051  002548  501A               	movf	??_init_LCD& (0+255),w,c
  7052  00254A  EC77  F017         	call	_delayms	;wreg free
  7053                           
  7054                           ;HW8.c: 104: send_data(0x20,1,0,0);
  7055  00254E  6E1A               	movwf	??_init_LCD& (0+255),c
  7056  002550  0E20               	movlw	32
  7057  002552  6E12               	movwf	?_send_data,c
  7058  002554  501A               	movf	??_init_LCD& (0+255),w,c
  7059  002556  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7060  002558  0E01               	movlw	1
  7061  00255A  6E13               	movwf	?_send_data+1,c
  7062  00255C  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7063  00255E  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7064  002560  0E00               	movlw	0
  7065  002562  6E14               	movwf	?_send_data+2,c
  7066  002564  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7067  002566  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7068  002568  0E00               	movlw	0
  7069  00256A  6E15               	movwf	?_send_data+3,c
  7070  00256C  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7071  00256E  EC52  F014         	call	_send_data	;wreg free
  7072                           
  7073                           ;HW8.c: 105: send_data(0x28,1,0,1);
  7074  002572  6E1A               	movwf	??_init_LCD& (0+255),c
  7075  002574  0E28               	movlw	40
  7076  002576  6E12               	movwf	?_send_data,c
  7077  002578  501A               	movf	??_init_LCD& (0+255),w,c
  7078  00257A  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7079  00257C  0E01               	movlw	1
  7080  00257E  6E13               	movwf	?_send_data+1,c
  7081  002580  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7082  002582  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7083  002584  0E00               	movlw	0
  7084  002586  6E14               	movwf	?_send_data+2,c
  7085  002588  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7086  00258A  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7087  00258C  0E01               	movlw	1
  7088  00258E  6E15               	movwf	?_send_data+3,c
  7089  002590  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7090  002592  EC52  F014         	call	_send_data	;wreg free
  7091                           
  7092                           ;HW8.c: 106: send_data(0x28,1,0,1);
  7093  002596  6E1A               	movwf	??_init_LCD& (0+255),c
  7094  002598  0E28               	movlw	40
  7095  00259A  6E12               	movwf	?_send_data,c
  7096  00259C  501A               	movf	??_init_LCD& (0+255),w,c
  7097  00259E  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7098  0025A0  0E01               	movlw	1
  7099  0025A2  6E13               	movwf	?_send_data+1,c
  7100  0025A4  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7101  0025A6  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7102  0025A8  0E00               	movlw	0
  7103  0025AA  6E14               	movwf	?_send_data+2,c
  7104  0025AC  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7105  0025AE  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7106  0025B0  0E01               	movlw	1
  7107  0025B2  6E15               	movwf	?_send_data+3,c
  7108  0025B4  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7109  0025B6  EC52  F014         	call	_send_data	;wreg free
  7110                           
  7111                           ;HW8.c: 107: send_data(0x06,1,0,1);
  7112  0025BA  6E1A               	movwf	??_init_LCD& (0+255),c
  7113  0025BC  0E06               	movlw	6
  7114  0025BE  6E12               	movwf	?_send_data,c
  7115  0025C0  501A               	movf	??_init_LCD& (0+255),w,c
  7116  0025C2  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7117  0025C4  0E01               	movlw	1
  7118  0025C6  6E13               	movwf	?_send_data+1,c
  7119  0025C8  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7120  0025CA  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7121  0025CC  0E00               	movlw	0
  7122  0025CE  6E14               	movwf	?_send_data+2,c
  7123  0025D0  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7124  0025D2  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7125  0025D4  0E01               	movlw	1
  7126  0025D6  6E15               	movwf	?_send_data+3,c
  7127  0025D8  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7128  0025DA  EC52  F014         	call	_send_data	;wreg free
  7129                           
  7130                           ;HW8.c: 108: send_data(0x0c,1,0,1);
  7131  0025DE  6E1A               	movwf	??_init_LCD& (0+255),c
  7132  0025E0  0E0C               	movlw	12
  7133  0025E2  6E12               	movwf	?_send_data,c
  7134  0025E4  501A               	movf	??_init_LCD& (0+255),w,c
  7135  0025E6  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7136  0025E8  0E01               	movlw	1
  7137  0025EA  6E13               	movwf	?_send_data+1,c
  7138  0025EC  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7139  0025EE  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7140  0025F0  0E00               	movlw	0
  7141  0025F2  6E14               	movwf	?_send_data+2,c
  7142  0025F4  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7143  0025F6  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7144  0025F8  0E01               	movlw	1
  7145  0025FA  6E15               	movwf	?_send_data+3,c
  7146  0025FC  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7147  0025FE  EC52  F014         	call	_send_data	;wreg free
  7148                           
  7149                           ;HW8.c: 109: send_data(0x02,1,0,1);
  7150  002602  6E1A               	movwf	??_init_LCD& (0+255),c
  7151  002604  0E02               	movlw	2
  7152  002606  6E12               	movwf	?_send_data,c
  7153  002608  501A               	movf	??_init_LCD& (0+255),w,c
  7154  00260A  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7155  00260C  0E01               	movlw	1
  7156  00260E  6E13               	movwf	?_send_data+1,c
  7157  002610  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7158  002612  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7159  002614  0E00               	movlw	0
  7160  002616  6E14               	movwf	?_send_data+2,c
  7161  002618  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7162  00261A  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7163  00261C  0E01               	movlw	1
  7164  00261E  6E15               	movwf	?_send_data+3,c
  7165  002620  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7166  002622  EC52  F014         	call	_send_data	;wreg free
  7167  002626  0012               	return	
  7168  002628                     __end_of_init_LCD:
  7169                           	opt stack 0
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           intcon	equ	0xFF2
  7177                           indf0	equ	0xFEF
  7178                           fsr0h	equ	0xFEA
  7179                           fsr0l	equ	0xFE9
  7180                           wreg	equ	0xFE8
  7181                           indf2	equ	0xFDF
  7182                           postinc2	equ	0xFDE
  7183                           postdec2	equ	0xFDD
  7184                           fsr2h	equ	0xFDA
  7185                           fsr2l	equ	0xFD9
  7186                           status	equ	0xFD8
  7187                           
  7188 ;; *************** function _send_data *****************
  7189 ;; Defined at:
  7190 ;;		line 113 in file "HW8.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  data            1   17[COMRAM] unsigned char 
  7193 ;;  cflag           1   18[COMRAM] unsigned char 
  7194 ;;  chk_busy        1   19[COMRAM] unsigned char 
  7195 ;;  dflag           1   20[COMRAM] unsigned char 
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;  d               1   24[COMRAM] unsigned char 
  7198 ;;  c               1   23[COMRAM] unsigned char 
  7199 ;;  bflag           1   22[COMRAM] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;		None               void
  7202 ;; Registers used:
  7203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7209 ;;      Params:         4       0       0       0       0       0       0
  7210 ;;      Locals:         3       0       0       0       0       0       0
  7211 ;;      Temps:          1       0       0       0       0       0       0
  7212 ;;      Totals:         8       0       0       0       0       0       0
  7213 ;;Total ram usage:        8 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    3
  7216 ;; This function calls:
  7217 ;;		_delayms
  7218 ;;		_epulse
  7219 ;;		_delayus
  7220 ;; This function is called by:
  7221 ;;		_main
  7222 ;;		_init_LCD
  7223 ;;		_load_string
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           	psect	text27
  7228  0028A4                     __ptext27:
  7229                           	opt stack 0
  7230  0028A4                     _send_data:
  7231                           	opt stack 27
  7232                           
  7233                           ;HW8.c: 114: char c,d,bflag;
  7234                           ;HW8.c: 115: if(chk_busy){
  7235                           
  7236                           ;incstack = 0
  7237                           ;incstack = 0
  7238  0028A4  5014               	movf	send_data@chk_busy,w,c
  7239  0028A6  B4D8               	btfsc	status,2,c
  7240  0028A8  D028               	goto	l3803
  7241                           
  7242                           ;HW8.c: 116: TRISD = 0x0F;
  7243  0028AA  0E0F               	movlw	15
  7244  0028AC  6E95               	movwf	3989,c	;volatile
  7245                           
  7246                           ;HW8.c: 117: PORTDbits.RD4 = 0;
  7247  0028AE  9883               	bcf	3971,4,c	;volatile
  7248                           
  7249                           ;HW8.c: 118: PORTDbits.RD5 = 1;
  7250  0028B0  8A83               	bsf	3971,5,c	;volatile
  7251                           
  7252                           ;HW8.c: 119: bflag = 1;
  7253  0028B2  6E16               	movwf	??_send_data& (0+255),c
  7254  0028B4  0E01               	movlw	1
  7255  0028B6  6E17               	movwf	send_data@bflag,c
  7256  0028B8  5016               	movf	??_send_data& (0+255),w,c
  7257                           
  7258                           ;HW8.c: 121: while(bflag){
  7259  0028BA  D01C               	goto	l3801
  7260  0028BC                     l3785:
  7261                           
  7262                           ;HW8.c: 122: epulse();
  7263  0028BC  EC3D  F017         	call	_epulse	;wreg free
  7264                           
  7265                           ;HW8.c: 123: delayus(1);
  7266  0028C0  6E16               	movwf	??_send_data& (0+255),c
  7267  0028C2  0E01               	movlw	1
  7268  0028C4  6E0F               	movwf	?_delayus,c
  7269  0028C6  5016               	movf	??_send_data& (0+255),w,c
  7270  0028C8  EC98  F017         	call	_delayus	;wreg free
  7271                           
  7272                           ;HW8.c: 124: PORTDbits.RD6=1;
  7273  0028CC  8C83               	bsf	3971,6,c	;volatile
  7274                           
  7275                           ;HW8.c: 125: delayus(1);
  7276  0028CE  6E16               	movwf	??_send_data& (0+255),c
  7277  0028D0  0E01               	movlw	1
  7278  0028D2  6E0F               	movwf	?_delayus,c
  7279  0028D4  5016               	movf	??_send_data& (0+255),w,c
  7280  0028D6  EC98  F017         	call	_delayus	;wreg free
  7281                           
  7282                           ;HW8.c: 126: bflag = PORTDbits.RD3;
  7283  0028DA  0E00               	movlw	0
  7284  0028DC  B683               	btfsc	3971,3,c	;volatile
  7285  0028DE  0E01               	movlw	1
  7286  0028E0  6E17               	movwf	send_data@bflag,c
  7287                           
  7288                           ;HW8.c: 127: delayus(1);
  7289  0028E2  6E16               	movwf	??_send_data& (0+255),c
  7290  0028E4  0E01               	movlw	1
  7291  0028E6  6E0F               	movwf	?_delayus,c
  7292  0028E8  5016               	movf	??_send_data& (0+255),w,c
  7293  0028EA  EC98  F017         	call	_delayus	;wreg free
  7294                           
  7295                           ;HW8.c: 128: PORTDbits.RD6=0;
  7296  0028EE  9C83               	bcf	3971,6,c	;volatile
  7297                           
  7298                           ;HW8.c: 129: epulse();
  7299  0028F0  EC3D  F017         	call	_epulse	;wreg free
  7300  0028F4                     l3801:
  7301  0028F4  6617               	tstfsz	send_data@bflag,c
  7302  0028F6  D7E2               	goto	l3785
  7303  0028F8  D006               	goto	L16
  7304  0028FA                     l3803:
  7305                           
  7306                           ;HW8.c: 132: else
  7307                           ;HW8.c: 133: delayms(10);
  7308  0028FA  6E16               	movwf	??_send_data& (0+255),c
  7309  0028FC  0E0A               	movlw	10
  7310  0028FE  6E0F               	movwf	?_delayms,c
  7311  002900  5016               	movf	??_send_data& (0+255),w,c
  7312  002902  EC77  F017         	call	_delayms	;wreg free
  7313  002906                     L16:
  7314                           
  7315                           ;HW8.c: 135: TRISD = 0x00;
  7316  002906  0E00               	movlw	0
  7317  002908  6E95               	movwf	3989,c	;volatile
  7318                           
  7319                           ;HW8.c: 136: if(cflag)
  7320  00290A  5013               	movf	send_data@cflag,w,c
  7321  00290C  B4D8               	btfsc	status,2,c
  7322  00290E  D002               	goto	l67
  7323                           
  7324                           ;HW8.c: 137: PORTDbits.RD4 = 0;
  7325  002910  9883               	bcf	3971,4,c	;volatile
  7326  002912  D001               	goto	l68
  7327  002914                     l67:
  7328                           
  7329                           ;HW8.c: 138: else
  7330                           ;HW8.c: 139: PORTDbits.RD4 = 1;
  7331  002914  8883               	bsf	3971,4,c	;volatile
  7332  002916                     l68:
  7333                           
  7334                           ;HW8.c: 140: PORTDbits.RD5 = 0;
  7335  002916  9A83               	bcf	3971,5,c	;volatile
  7336                           
  7337                           ;HW8.c: 141: c = data>>4;
  7338  002918  3812               	swapf	send_data@data,w,c
  7339  00291A  0B0F               	andlw	15
  7340  00291C  6E18               	movwf	send_data@c,c
  7341                           
  7342                           ;HW8.c: 142: d = PORTD & 0xF0;
  7343  00291E  5083               	movf	3971,w,c	;volatile
  7344  002920  0BF0               	andlw	240
  7345  002922  6E19               	movwf	send_data@d,c
  7346                           
  7347                           ;HW8.c: 143: PORTD = d | c;
  7348  002924  5019               	movf	send_data@d,w,c
  7349  002926  1018               	iorwf	send_data@c,w,c
  7350  002928  6E83               	movwf	3971,c	;volatile
  7351                           
  7352                           ;HW8.c: 144: epulse();
  7353  00292A  EC3D  F017         	call	_epulse	;wreg free
  7354                           
  7355                           ;HW8.c: 145: if (dflag){
  7356  00292E  5015               	movf	send_data@dflag,w,c
  7357  002930  B4D8               	btfsc	status,2,c
  7358  002932  D00B               	goto	l70
  7359                           
  7360                           ;HW8.c: 146: c = data & 0x0F;
  7361  002934  5012               	movf	send_data@data,w,c
  7362  002936  0B0F               	andlw	15
  7363  002938  6E18               	movwf	send_data@c,c
  7364                           
  7365                           ;HW8.c: 147: d = PORTD & 0xF0;
  7366  00293A  5083               	movf	3971,w,c	;volatile
  7367  00293C  0BF0               	andlw	240
  7368  00293E  6E19               	movwf	send_data@d,c
  7369                           
  7370                           ;HW8.c: 148: PORTD = d | c;
  7371  002940  5019               	movf	send_data@d,w,c
  7372  002942  1018               	iorwf	send_data@c,w,c
  7373  002944  6E83               	movwf	3971,c	;volatile
  7374                           
  7375                           ;HW8.c: 149: epulse();
  7376  002946  EC3D  F017         	call	_epulse	;wreg free
  7377  00294A                     l70:
  7378  00294A  0012               	return	
  7379  00294C                     __end_of_send_data:
  7380                           	opt stack 0
  7381                           tblptru	equ	0xFF8
  7382                           tblptrh	equ	0xFF7
  7383                           tblptrl	equ	0xFF6
  7384                           tablat	equ	0xFF5
  7385                           prodh	equ	0xFF4
  7386                           prodl	equ	0xFF3
  7387                           intcon	equ	0xFF2
  7388                           indf0	equ	0xFEF
  7389                           fsr0h	equ	0xFEA
  7390                           fsr0l	equ	0xFE9
  7391                           wreg	equ	0xFE8
  7392                           indf2	equ	0xFDF
  7393                           postinc2	equ	0xFDE
  7394                           postdec2	equ	0xFDD
  7395                           fsr2h	equ	0xFDA
  7396                           fsr2l	equ	0xFD9
  7397                           status	equ	0xFD8
  7398                           
  7399 ;; *************** function _epulse *****************
  7400 ;; Defined at:
  7401 ;;		line 155 in file "HW8.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;		None               void
  7408 ;; Registers used:
  7409 ;;		wreg, status,2, status,0, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7415 ;;      Params:         0       0       0       0       0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0
  7417 ;;      Temps:          1       0       0       0       0       0       0
  7418 ;;      Totals:         1       0       0       0       0       0       0
  7419 ;;Total ram usage:        1 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; Hardware stack levels required when called:    2
  7422 ;; This function calls:
  7423 ;;		_delayus
  7424 ;; This function is called by:
  7425 ;;		_send_data
  7426 ;; This function uses a non-reentrant model
  7427 ;;
  7428                           
  7429                           	psect	text28
  7430  002E7A                     __ptext28:
  7431                           	opt stack 0
  7432  002E7A                     _epulse:
  7433                           	opt stack 27
  7434                           
  7435                           ;HW8.c: 156: delayus(1);
  7436                           
  7437                           ;incstack = 0
  7438                           ;incstack = 0
  7439  002E7A  6E11               	movwf	??_epulse& (0+255),c
  7440  002E7C  0E01               	movlw	1
  7441  002E7E  6E0F               	movwf	?_delayus,c
  7442  002E80  5011               	movf	??_epulse& (0+255),w,c
  7443  002E82  EC98  F017         	call	_delayus	;wreg free
  7444                           
  7445                           ;HW8.c: 157: PORTDbits.RD6=1;
  7446  002E86  8C83               	bsf	3971,6,c	;volatile
  7447                           
  7448                           ;HW8.c: 158: delayus(1);
  7449  002E88  6E11               	movwf	??_epulse& (0+255),c
  7450  002E8A  0E01               	movlw	1
  7451  002E8C  6E0F               	movwf	?_delayus,c
  7452  002E8E  5011               	movf	??_epulse& (0+255),w,c
  7453  002E90  EC98  F017         	call	_delayus	;wreg free
  7454                           
  7455                           ;HW8.c: 159: PORTDbits.RD6=0;
  7456  002E94  9C83               	bcf	3971,6,c	;volatile
  7457                           
  7458                           ;HW8.c: 160: delayus(1);
  7459  002E96  6E11               	movwf	??_epulse& (0+255),c
  7460  002E98  0E01               	movlw	1
  7461  002E9A  6E0F               	movwf	?_delayus,c
  7462  002E9C  5011               	movf	??_epulse& (0+255),w,c
  7463  002E9E  EC98  F017         	call	_delayus	;wreg free
  7464                           
  7465                           ;HW8.c: 161: return;
  7466  002EA2  0012               	return	
  7467  002EA4                     __end_of_epulse:
  7468                           	opt stack 0
  7469                           tblptru	equ	0xFF8
  7470                           tblptrh	equ	0xFF7
  7471                           tblptrl	equ	0xFF6
  7472                           tablat	equ	0xFF5
  7473                           prodh	equ	0xFF4
  7474                           prodl	equ	0xFF3
  7475                           intcon	equ	0xFF2
  7476                           indf0	equ	0xFEF
  7477                           fsr0h	equ	0xFEA
  7478                           fsr0l	equ	0xFE9
  7479                           wreg	equ	0xFE8
  7480                           indf2	equ	0xFDF
  7481                           postinc2	equ	0xFDE
  7482                           postdec2	equ	0xFDD
  7483                           fsr2h	equ	0xFDA
  7484                           fsr2l	equ	0xFD9
  7485                           status	equ	0xFD8
  7486                           
  7487 ;; *************** function _delayus *****************
  7488 ;; Defined at:
  7489 ;;		line 176 in file "HW8.c"
  7490 ;; Parameters:    Size  Location     Type
  7491 ;;  cnt             1   14[COMRAM] unsigned char 
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;		None               void
  7496 ;; Registers used:
  7497 ;;		wreg, status,2, status,0
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7503 ;;      Params:         1       0       0       0       0       0       0
  7504 ;;      Locals:         0       0       0       0       0       0       0
  7505 ;;      Temps:          1       0       0       0       0       0       0
  7506 ;;      Totals:         2       0       0       0       0       0       0
  7507 ;;Total ram usage:        2 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    1
  7510 ;; This function calls:
  7511 ;;		Nothing
  7512 ;; This function is called by:
  7513 ;;		_send_data
  7514 ;;		_epulse
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text29
  7519  002F30                     __ptext29:
  7520                           	opt stack 0
  7521  002F30                     _delayus:
  7522                           	opt stack 28
  7523                           
  7524                           ;HW8.c: 177: static unsigned char i;
  7525                           ;HW8.c: 178: for (i=0; i<cnt; i++);
  7526                           
  7527                           ;incstack = 0
  7528                           ;incstack = 0
  7529  002F30  6E10               	movwf	??_delayus& (0+255),c
  7530  002F32  0E00               	movlw	0
  7531  002F34  6E6F               	movwf	delayus@i,c
  7532  002F36  5010               	movf	??_delayus& (0+255),w,c
  7533  002F38  D001               	goto	l4191
  7534  002F3A                     l4189:
  7535  002F3A  2A6F               	incf	delayus@i,f,c
  7536  002F3C                     l4191:
  7537  002F3C  500F               	movf	delayus@cnt,w,c
  7538  002F3E  5C6F               	subwf	delayus@i,w,c
  7539  002F40  B0D8               	btfsc	status,0,c
  7540                           
  7541                           ;HW8.c: 179: return;
  7542  002F42  0012               	return	
  7543  002F44  D7FA               	goto	l4189
  7544  002F46                     __end_of_delayus:
  7545                           	opt stack 0
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           indf0	equ	0xFEF
  7554                           fsr0h	equ	0xFEA
  7555                           fsr0l	equ	0xFE9
  7556                           wreg	equ	0xFE8
  7557                           indf2	equ	0xFDF
  7558                           postinc2	equ	0xFDE
  7559                           postdec2	equ	0xFDD
  7560                           fsr2h	equ	0xFDA
  7561                           fsr2l	equ	0xFD9
  7562                           status	equ	0xFD8
  7563                           
  7564 ;; *************** function _delayms *****************
  7565 ;; Defined at:
  7566 ;;		line 165 in file "HW8.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  cnt             1   14[COMRAM] unsigned char 
  7569 ;; Auto vars:     Size  Location     Type
  7570 ;;		None
  7571 ;; Return value:  Size  Location     Type
  7572 ;;		None               void
  7573 ;; Registers used:
  7574 ;;		wreg, status,2, status,0
  7575 ;; Tracked objects:
  7576 ;;		On entry : 0/0
  7577 ;;		On exit  : 0/0
  7578 ;;		Unchanged: 0/0
  7579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7580 ;;      Params:         1       0       0       0       0       0       0
  7581 ;;      Locals:         0       0       0       0       0       0       0
  7582 ;;      Temps:          1       0       0       0       0       0       0
  7583 ;;      Totals:         2       0       0       0       0       0       0
  7584 ;;Total ram usage:        2 bytes
  7585 ;; Hardware stack levels used:    1
  7586 ;; Hardware stack levels required when called:    1
  7587 ;; This function calls:
  7588 ;;		Nothing
  7589 ;; This function is called by:
  7590 ;;		_main
  7591 ;;		_init_LCD
  7592 ;;		_send_data
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           	psect	text30
  7597  002EEE                     __ptext30:
  7598                           	opt stack 0
  7599  002EEE                     _delayms:
  7600                           	opt stack 29
  7601                           
  7602                           ;HW8.c: 166: static unsigned char i,j;
  7603                           ;HW8.c: 167: for (i=0; i<cnt; i++){
  7604                           
  7605                           ;incstack = 0
  7606                           ;incstack = 0
  7607  002EEE  6E10               	movwf	??_delayms& (0+255),c
  7608  002EF0  0E00               	movlw	0
  7609  002EF2  6E6E               	movwf	delayms@i,c
  7610  002EF4  5010               	movf	??_delayms& (0+255),w,c
  7611  002EF6  D008               	goto	l4177
  7612  002EF8                     l4173:
  7613                           
  7614                           ;HW8.c: 168: j=245;
  7615  002EF8  6E10               	movwf	??_delayms& (0+255),c
  7616  002EFA  0EF5               	movlw	245
  7617  002EFC  6E70               	movwf	delayms@j,c
  7618  002EFE  5010               	movf	??_delayms& (0+255),w,c
  7619  002F00                     loop:
  7620  002F00  F000               	nop		;# 
  7621  002F02  2FF5               	decfsz	245,f,b	;# 
  7622  002F04  D7FD               	bra	loop	;# 
  7623  002F06  2A6E               	incf	delayms@i,f,c
  7624  002F08                     l4177:
  7625  002F08  500F               	movf	delayms@cnt,w,c
  7626  002F0A  5C6E               	subwf	delayms@i,w,c
  7627  002F0C  B0D8               	btfsc	status,0,c
  7628                           
  7629                           ;HW8.c: 172: }
  7630                           ;HW8.c: 173: return;
  7631  002F0E  0012               	return	
  7632  002F10  D7F3               	goto	l4173
  7633  002F12                     __end_of_delayms:
  7634                           	opt stack 0
  7635                           tblptru	equ	0xFF8
  7636                           tblptrh	equ	0xFF7
  7637                           tblptrl	equ	0xFF6
  7638                           tablat	equ	0xFF5
  7639                           prodh	equ	0xFF4
  7640                           prodl	equ	0xFF3
  7641                           intcon	equ	0xFF2
  7642                           indf0	equ	0xFEF
  7643                           fsr0h	equ	0xFEA
  7644                           fsr0l	equ	0xFE9
  7645                           wreg	equ	0xFE8
  7646                           indf2	equ	0xFDF
  7647                           postinc2	equ	0xFDE
  7648                           postdec2	equ	0xFDD
  7649                           fsr2h	equ	0xFDA
  7650                           fsr2l	equ	0xFD9
  7651                           status	equ	0xFD8
  7652                           
  7653 ;; *************** function _init_ADCM *****************
  7654 ;; Defined at:
  7655 ;;		line 71 in file "HW8.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;		None
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;		None
  7660 ;; Return value:  Size  Location     Type
  7661 ;;		None               void
  7662 ;; Registers used:
  7663 ;;		wreg, status,2
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7669 ;;      Params:         0       0       0       0       0       0       0
  7670 ;;      Locals:         0       0       0       0       0       0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0
  7672 ;;      Totals:         0       0       0       0       0       0       0
  7673 ;;Total ram usage:        0 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    1
  7676 ;; This function calls:
  7677 ;;		Nothing
  7678 ;; This function is called by:
  7679 ;;		_main
  7680 ;; This function uses a non-reentrant model
  7681 ;;
  7682                           
  7683                           	psect	text31
  7684  002F12                     __ptext31:
  7685                           	opt stack 0
  7686  002F12                     _init_ADCM:
  7687                           	opt stack 29
  7688                           
  7689                           ;HW8.c: 73: ADCON0bits.CHS3 = 0;
  7690                           
  7691                           ;incstack = 0
  7692                           ;incstack = 0
  7693  002F12  9AC2               	bcf	4034,5,c	;volatile
  7694                           
  7695                           ;HW8.c: 74: ADCON0bits.CHS2 = 0;
  7696  002F14  98C2               	bcf	4034,4,c	;volatile
  7697                           
  7698                           ;HW8.c: 75: ADCON0bits.CHS1 = 0;
  7699  002F16  96C2               	bcf	4034,3,c	;volatile
  7700                           
  7701                           ;HW8.c: 76: ADCON0bits.CHS0 = 0;
  7702  002F18  94C2               	bcf	4034,2,c	;volatile
  7703                           
  7704                           ;HW8.c: 79: ADCON1 = 0X00;
  7705  002F1A  0E00               	movlw	0
  7706  002F1C  6EC1               	movwf	4033,c	;volatile
  7707                           
  7708                           ;HW8.c: 82: ADCON2bits.ADFM = 1;
  7709  002F1E  8EC0               	bsf	4032,7,c	;volatile
  7710                           
  7711                           ;HW8.c: 85: ADCON2bits.ACQT2 = 0;
  7712  002F20  9AC0               	bcf	4032,5,c	;volatile
  7713                           
  7714                           ;HW8.c: 86: ADCON2bits.ACQT1 = 1;
  7715  002F22  88C0               	bsf	4032,4,c	;volatile
  7716                           
  7717                           ;HW8.c: 87: ADCON2bits.ACQT0 = 0;
  7718  002F24  96C0               	bcf	4032,3,c	;volatile
  7719                           
  7720                           ;HW8.c: 90: ADCON2bits.ADCS2 = 1;
  7721  002F26  84C0               	bsf	4032,2,c	;volatile
  7722                           
  7723                           ;HW8.c: 91: ADCON2bits.ADCS1 = 0;
  7724  002F28  92C0               	bcf	4032,1,c	;volatile
  7725                           
  7726                           ;HW8.c: 92: ADCON2bits.ADCS0 = 0;
  7727  002F2A  90C0               	bcf	4032,0,c	;volatile
  7728                           
  7729                           ;HW8.c: 95: ADCON0bits.ADON = 1;
  7730  002F2C  80C2               	bsf	4034,0,c	;volatile
  7731  002F2E  0012               	return	
  7732  002F30                     __end_of_init_ADCM:
  7733                           	opt stack 0
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           intcon	equ	0xFF2
  7741                           indf0	equ	0xFEF
  7742                           fsr0h	equ	0xFEA
  7743                           fsr0l	equ	0xFE9
  7744                           wreg	equ	0xFE8
  7745                           indf2	equ	0xFDF
  7746                           postinc2	equ	0xFDE
  7747                           postdec2	equ	0xFDD
  7748                           fsr2h	equ	0xFDA
  7749                           fsr2l	equ	0xFD9
  7750                           status	equ	0xFD8
  7751                           
  7752 ;; *************** function ___ftmul *****************
  7753 ;; Defined at:
  7754 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftmul.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  f1              3   36[COMRAM] float 
  7757 ;;  f2              3   39[COMRAM] float 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  7760 ;;  sign            1   52[COMRAM] unsigned char 
  7761 ;;  cntr            1   51[COMRAM] unsigned char 
  7762 ;;  exp             1   47[COMRAM] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  3   36[COMRAM] float 
  7765 ;; Registers used:
  7766 ;;		wreg, status,2, status,0, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7772 ;;      Params:         6       0       0       0       0       0       0
  7773 ;;      Locals:         6       0       0       0       0       0       0
  7774 ;;      Temps:          5       0       0       0       0       0       0
  7775 ;;      Totals:        17       0       0       0       0       0       0
  7776 ;;Total ram usage:       17 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    2
  7779 ;; This function calls:
  7780 ;;		___ftpack
  7781 ;; This function is called by:
  7782 ;;		_main
  7783 ;;		_fround
  7784 ;;		_scale
  7785 ;;		_sprintf
  7786 ;;		___asftmul
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           	psect	text32
  7791  002236                     __ptext32:
  7792                           	opt stack 0
  7793  002236                     ___ftmul:
  7794                           	opt stack 28
  7795                           
  7796                           ;incstack = 0
  7797                           ;incstack = 0
  7798  002236  0E0F               	movlw	15
  7799  002238  6E2B               	movwf	??___ftmul& (0+255),c
  7800  00223A  C025  F02C         	movff	___ftmul@f1,??___ftmul+1
  7801  00223E  C026  F02D         	movff	___ftmul@f1+1,??___ftmul+2
  7802  002242  C027  F02E         	movff	___ftmul@f1+2,??___ftmul+3
  7803  002246  282B               	incf	??___ftmul,w,c
  7804  002248  6E2F               	movwf	(??___ftmul+4)& (0+255),c
  7805  00224A  D004               	goto	u2970
  7806  00224C                     u2975:
  7807  00224C  90D8               	bcf	status,0,c
  7808  00224E  322E               	rrcf	??___ftmul+3,f,c
  7809  002250  322D               	rrcf	??___ftmul+2,f,c
  7810  002252  322C               	rrcf	??___ftmul+1,f,c
  7811  002254                     u2970:
  7812  002254  2E2F               	decfsz	(??___ftmul+4)& (0+255),f,c
  7813  002256  D7FA               	goto	u2975
  7814  002258  502C               	movf	??___ftmul+1,w,c
  7815  00225A  6E30               	movwf	___ftmul@exp,c
  7816  00225C  6630               	tstfsz	___ftmul@exp& (0+255),c
  7817  00225E  D001               	goto	l4545
  7818  002260  D015               	goto	u3000
  7819  002262                     l4545:
  7820  002262  0E0F               	movlw	15
  7821  002264  6E2B               	movwf	??___ftmul& (0+255),c
  7822  002266  C028  F02C         	movff	___ftmul@f2,??___ftmul+1
  7823  00226A  C029  F02D         	movff	___ftmul@f2+1,??___ftmul+2
  7824  00226E  C02A  F02E         	movff	___ftmul@f2+2,??___ftmul+3
  7825  002272  282B               	incf	??___ftmul,w,c
  7826  002274  6E2F               	movwf	(??___ftmul+4)& (0+255),c
  7827  002276  D004               	goto	u2990
  7828  002278                     u2995:
  7829  002278  90D8               	bcf	status,0,c
  7830  00227A  322E               	rrcf	??___ftmul+3,f,c
  7831  00227C  322D               	rrcf	??___ftmul+2,f,c
  7832  00227E  322C               	rrcf	??___ftmul+1,f,c
  7833  002280                     u2990:
  7834  002280  2E2F               	decfsz	(??___ftmul+4)& (0+255),f,c
  7835  002282  D7FA               	goto	u2995
  7836  002284  502C               	movf	??___ftmul+1,w,c
  7837  002286  6E35               	movwf	___ftmul@sign,c
  7838  002288  6635               	tstfsz	___ftmul@sign& (0+255),c
  7839  00228A  D007               	goto	l4551
  7840  00228C                     u3000:
  7841  00228C  0E00               	movlw	0
  7842  00228E  6E25               	movwf	?___ftmul,c
  7843  002290  0E00               	movlw	0
  7844  002292  6E26               	movwf	?___ftmul+1,c
  7845  002294  0E00               	movlw	0
  7846  002296  6E27               	movwf	?___ftmul+2,c
  7847  002298  D055               	goto	l638
  7848  00229A                     l4551:
  7849  00229A  5035               	movf	___ftmul@sign,w,c
  7850  00229C  0F7B               	addlw	123
  7851  00229E  2630               	addwf	___ftmul@exp,f,c
  7852  0022A0  C027  F035         	movff	___ftmul@f1+2,___ftmul@sign
  7853  0022A4  502A               	movf	(___ftmul@f2+2)& (0+255),w,c
  7854  0022A6  1A35               	xorwf	___ftmul@sign,f,c
  7855  0022A8  0E80               	movlw	128
  7856  0022AA  1635               	andwf	___ftmul@sign,f,c
  7857  0022AC  8E26               	bsf	___ftmul@f1+1,7,c
  7858  0022AE  8E29               	bsf	___ftmul@f2+1,7,c
  7859  0022B0  0EFF               	movlw	255
  7860  0022B2  1628               	andwf	___ftmul@f2,f,c
  7861  0022B4  0EFF               	movlw	255
  7862  0022B6  1629               	andwf	___ftmul@f2+1,f,c
  7863  0022B8  0E00               	movlw	0
  7864  0022BA  162A               	andwf	___ftmul@f2+2,f,c
  7865  0022BC  0E00               	movlw	0
  7866  0022BE  6E31               	movwf	___ftmul@f3_as_product,c
  7867  0022C0  0E00               	movlw	0
  7868  0022C2  6E32               	movwf	___ftmul@f3_as_product+1,c
  7869  0022C4  0E00               	movlw	0
  7870  0022C6  6E33               	movwf	___ftmul@f3_as_product+2,c
  7871  0022C8  6E2B               	movwf	??___ftmul& (0+255),c
  7872  0022CA  0E07               	movlw	7
  7873  0022CC  6E34               	movwf	___ftmul@cntr,c
  7874  0022CE  502B               	movf	??___ftmul& (0+255),w,c
  7875  0022D0                     l4565:
  7876  0022D0  A025               	btfss	___ftmul@f1,0,c
  7877  0022D2  D006               	goto	l4569
  7878  0022D4  5028               	movf	___ftmul@f2,w,c
  7879  0022D6  2631               	addwf	___ftmul@f3_as_product,f,c
  7880  0022D8  5029               	movf	___ftmul@f2+1,w,c
  7881  0022DA  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  7882  0022DC  502A               	movf	___ftmul@f2+2,w,c
  7883  0022DE  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  7884  0022E0                     l4569:
  7885  0022E0  90D8               	bcf	status,0,c
  7886  0022E2  3227               	rrcf	___ftmul@f1+2,f,c
  7887  0022E4  3226               	rrcf	___ftmul@f1+1,f,c
  7888  0022E6  3225               	rrcf	___ftmul@f1,f,c
  7889  0022E8  90D8               	bcf	status,0,c
  7890  0022EA  3628               	rlcf	___ftmul@f2,f,c
  7891  0022EC  3629               	rlcf	___ftmul@f2+1,f,c
  7892  0022EE  362A               	rlcf	___ftmul@f2+2,f,c
  7893  0022F0  2E34               	decfsz	___ftmul@cntr,f,c
  7894  0022F2  D7EE               	goto	l4565
  7895  0022F4  6E2B               	movwf	??___ftmul& (0+255),c
  7896  0022F6  0E09               	movlw	9
  7897  0022F8  6E34               	movwf	___ftmul@cntr,c
  7898  0022FA  502B               	movf	??___ftmul& (0+255),w,c
  7899  0022FC                     l4575:
  7900  0022FC  A025               	btfss	___ftmul@f1,0,c
  7901  0022FE  D006               	goto	l4579
  7902  002300  5028               	movf	___ftmul@f2,w,c
  7903  002302  2631               	addwf	___ftmul@f3_as_product,f,c
  7904  002304  5029               	movf	___ftmul@f2+1,w,c
  7905  002306  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  7906  002308  502A               	movf	___ftmul@f2+2,w,c
  7907  00230A  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  7908  00230C                     l4579:
  7909  00230C  90D8               	bcf	status,0,c
  7910  00230E  3227               	rrcf	___ftmul@f1+2,f,c
  7911  002310  3226               	rrcf	___ftmul@f1+1,f,c
  7912  002312  3225               	rrcf	___ftmul@f1,f,c
  7913  002314  90D8               	bcf	status,0,c
  7914  002316  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  7915  002318  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  7916  00231A  3231               	rrcf	___ftmul@f3_as_product,f,c
  7917  00231C  2E34               	decfsz	___ftmul@cntr,f,c
  7918  00231E  D7EE               	goto	l4575
  7919  002320  C031  F00F         	movff	___ftmul@f3_as_product,?___ftpack
  7920  002324  C032  F010         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  7921  002328  C033  F011         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  7922  00232C  C030  F012         	movff	___ftmul@exp,?___ftpack+3
  7923  002330  C035  F013         	movff	___ftmul@sign,?___ftpack+4
  7924  002334  ECF6  F013         	call	___ftpack	;wreg free
  7925  002338  C011  F027         	movff	?___ftpack+2,?___ftmul+2
  7926  00233C  C010  F026         	movff	?___ftpack+1,?___ftmul+1
  7927  002340  C00F  F025         	movff	?___ftpack,?___ftmul
  7928  002344                     l638:
  7929  002344  0012               	return	
  7930  002346                     __end_of___ftmul:
  7931                           	opt stack 0
  7932                           tblptru	equ	0xFF8
  7933                           tblptrh	equ	0xFF7
  7934                           tblptrl	equ	0xFF6
  7935                           tablat	equ	0xFF5
  7936                           prodh	equ	0xFF4
  7937                           prodl	equ	0xFF3
  7938                           intcon	equ	0xFF2
  7939                           indf0	equ	0xFEF
  7940                           fsr0h	equ	0xFEA
  7941                           fsr0l	equ	0xFE9
  7942                           wreg	equ	0xFE8
  7943                           indf2	equ	0xFDF
  7944                           postinc2	equ	0xFDE
  7945                           postdec2	equ	0xFDD
  7946                           fsr2h	equ	0xFDA
  7947                           fsr2l	equ	0xFD9
  7948                           status	equ	0xFD8
  7949                           
  7950 ;; *************** function ___ftpack *****************
  7951 ;; Defined at:
  7952 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\float.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;  arg             3   14[COMRAM] unsigned um
  7955 ;;  exp             1   17[COMRAM] unsigned char 
  7956 ;;  sign            1   18[COMRAM] unsigned char 
  7957 ;; Auto vars:     Size  Location     Type
  7958 ;;		None
  7959 ;; Return value:  Size  Location     Type
  7960 ;;                  3   14[COMRAM] float 
  7961 ;; Registers used:
  7962 ;;		wreg, status,2, status,0
  7963 ;; Tracked objects:
  7964 ;;		On entry : 0/0
  7965 ;;		On exit  : 0/0
  7966 ;;		Unchanged: 0/0
  7967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7968 ;;      Params:         5       0       0       0       0       0       0
  7969 ;;      Locals:         0       0       0       0       0       0       0
  7970 ;;      Temps:          3       0       0       0       0       0       0
  7971 ;;      Totals:         8       0       0       0       0       0       0
  7972 ;;Total ram usage:        8 bytes
  7973 ;; Hardware stack levels used:    1
  7974 ;; Hardware stack levels required when called:    1
  7975 ;; This function calls:
  7976 ;;		Nothing
  7977 ;; This function is called by:
  7978 ;;		___ftadd
  7979 ;;		___ftdiv
  7980 ;;		___ftmul
  7981 ;;		___lltoft
  7982 ;;		___lwtoft
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text33
  7987  0027EC                     __ptext33:
  7988                           	opt stack 0
  7989  0027EC                     ___ftpack:
  7990                           	opt stack 28
  7991                           
  7992                           ;incstack = 0
  7993                           ;incstack = 0
  7994  0027EC  5012               	movf	___ftpack@exp,w,c
  7995  0027EE  B4D8               	btfsc	status,2,c
  7996  0027F0  D005               	goto	l4383
  7997  0027F2  500F               	movf	___ftpack@arg,w,c
  7998  0027F4  1010               	iorwf	___ftpack@arg+1,w,c
  7999  0027F6  1011               	iorwf	___ftpack@arg+2,w,c
  8000  0027F8  A4D8               	btfss	status,2,c
  8001  0027FA  D00C               	goto	l4389
  8002  0027FC                     l4383:
  8003  0027FC  0E00               	movlw	0
  8004  0027FE  6E0F               	movwf	?___ftpack,c
  8005  002800  0E00               	movlw	0
  8006  002802  6E10               	movwf	?___ftpack+1,c
  8007  002804  0E00               	movlw	0
  8008  002806  6E11               	movwf	?___ftpack+2,c
  8009  002808  D04C               	goto	l537
  8010  00280A                     l4387:
  8011  00280A  2A12               	incf	___ftpack@exp,f,c
  8012  00280C  90D8               	bcf	status,0,c
  8013  00280E  3211               	rrcf	___ftpack@arg+2,f,c
  8014  002810  3210               	rrcf	___ftpack@arg+1,f,c
  8015  002812  320F               	rrcf	___ftpack@arg,f,c
  8016  002814                     l4389:
  8017  002814  0E00               	movlw	0
  8018  002816  140F               	andwf	___ftpack@arg,w,c
  8019  002818  6E14               	movwf	??___ftpack& (0+255),c
  8020  00281A  0E00               	movlw	0
  8021  00281C  1410               	andwf	___ftpack@arg+1,w,c
  8022  00281E  6E15               	movwf	(??___ftpack+1)& (0+255),c
  8023  002820  0EFE               	movlw	254
  8024  002822  1411               	andwf	___ftpack@arg+2,w,c
  8025  002824  6E16               	movwf	(??___ftpack+2)& (0+255),c
  8026  002826  5014               	movf	??___ftpack,w,c
  8027  002828  1015               	iorwf	??___ftpack+1,w,c
  8028  00282A  1016               	iorwf	??___ftpack+2,w,c
  8029  00282C  B4D8               	btfsc	status,2,c
  8030  00282E  D00C               	goto	l4395
  8031  002830  D7EC               	goto	l4387
  8032  002832                     l4391:
  8033  002832  2A12               	incf	___ftpack@exp,f,c
  8034  002834  0E01               	movlw	1
  8035  002836  260F               	addwf	___ftpack@arg,f,c
  8036  002838  0E00               	movlw	0
  8037  00283A  2210               	addwfc	___ftpack@arg+1,f,c
  8038  00283C  0E00               	movlw	0
  8039  00283E  2211               	addwfc	___ftpack@arg+2,f,c
  8040  002840  90D8               	bcf	status,0,c
  8041  002842  3211               	rrcf	___ftpack@arg+2,f,c
  8042  002844  3210               	rrcf	___ftpack@arg+1,f,c
  8043  002846  320F               	rrcf	___ftpack@arg,f,c
  8044  002848                     l4395:
  8045  002848  0E00               	movlw	0
  8046  00284A  140F               	andwf	___ftpack@arg,w,c
  8047  00284C  6E14               	movwf	??___ftpack& (0+255),c
  8048  00284E  0E00               	movlw	0
  8049  002850  1410               	andwf	___ftpack@arg+1,w,c
  8050  002852  6E15               	movwf	(??___ftpack+1)& (0+255),c
  8051  002854  0EFF               	movlw	255
  8052  002856  1411               	andwf	___ftpack@arg+2,w,c
  8053  002858  6E16               	movwf	(??___ftpack+2)& (0+255),c
  8054  00285A  5014               	movf	??___ftpack,w,c
  8055  00285C  1015               	iorwf	??___ftpack+1,w,c
  8056  00285E  1016               	iorwf	??___ftpack+2,w,c
  8057  002860  B4D8               	btfsc	status,2,c
  8058  002862  D006               	goto	l4399
  8059  002864  D7E6               	goto	l4391
  8060  002866                     l4397:
  8061  002866  0612               	decf	___ftpack@exp,f,c
  8062  002868  90D8               	bcf	status,0,c
  8063  00286A  360F               	rlcf	___ftpack@arg,f,c
  8064  00286C  3610               	rlcf	___ftpack@arg+1,f,c
  8065  00286E  3611               	rlcf	___ftpack@arg+2,f,c
  8066  002870                     l4399:
  8067  002870  AE10               	btfss	___ftpack@arg+1,7,c
  8068  002872  D7F9               	goto	l4397
  8069  002874  A012               	btfss	___ftpack@exp,0,c
  8070  002876  9E10               	bcf	___ftpack@arg+1,7,c
  8071  002878  90D8               	bcf	status,0,c
  8072  00287A  3212               	rrcf	___ftpack@exp,f,c
  8073  00287C  5012               	movf	___ftpack@exp,w,c
  8074  00287E  6E16               	movwf	(??___ftpack+2)& (0+255),c
  8075  002880  6A15               	clrf	(??___ftpack+1)& (0+255),c
  8076  002882  6A14               	clrf	??___ftpack& (0+255),c
  8077  002884  5014               	movf	??___ftpack,w,c
  8078  002886  120F               	iorwf	___ftpack@arg,f,c
  8079  002888  5015               	movf	??___ftpack+1,w,c
  8080  00288A  1210               	iorwf	___ftpack@arg+1,f,c
  8081  00288C  5016               	movf	??___ftpack+2,w,c
  8082  00288E  1211               	iorwf	___ftpack@arg+2,f,c
  8083  002890  5013               	movf	___ftpack@sign,w,c
  8084  002892  A4D8               	btfss	status,2,c
  8085  002894  8E11               	bsf	___ftpack@arg+2,7,c
  8086  002896  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  8087  00289A  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  8088  00289E  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  8089  0028A2                     l537:
  8090  0028A2  0012               	return	
  8091  0028A4                     __end_of___ftpack:
  8092                           	opt stack 0
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           prodh	equ	0xFF4
  8098                           prodl	equ	0xFF3
  8099                           intcon	equ	0xFF2
  8100                           indf0	equ	0xFEF
  8101                           fsr0h	equ	0xFEA
  8102                           fsr0l	equ	0xFE9
  8103                           wreg	equ	0xFE8
  8104                           indf2	equ	0xFDF
  8105                           postinc2	equ	0xFDE
  8106                           postdec2	equ	0xFDD
  8107                           fsr2h	equ	0xFDA
  8108                           fsr2l	equ	0xFD9
  8109                           status	equ	0xFD8
  8110                           
  8111 ;; *************** function _RA0_isr *****************
  8112 ;; Defined at:
  8113 ;;		line 26 in file "HW8.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;		None
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;		None
  8118 ;; Return value:  Size  Location     Type
  8119 ;;		None               void
  8120 ;; Registers used:
  8121 ;;		wreg, status,2
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8127 ;;      Params:         0       0       0       0       0       0       0
  8128 ;;      Locals:         0       0       0       0       0       0       0
  8129 ;;      Temps:         14       0       0       0       0       0       0
  8130 ;;      Totals:        14       0       0       0       0       0       0
  8131 ;;Total ram usage:       14 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		Interrupt level 2
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           	psect	intcode
  8141  000008                     __pintcode:
  8142                           	opt stack 0
  8143  000008                     _RA0_isr:
  8144                           	opt stack 25
  8145                           
  8146                           ;incstack = 0
  8147  000008  CFFA F001          	movff	pclath,??_RA0_isr
  8148  00000C  CFFB F002          	movff	pclatu,??_RA0_isr+1
  8149  000010  ED31  F015         	call	int_func,f	;refresh shadow registers
  8150                           pclatu	equ	0xFFB
  8151                           pclath	equ	0xFFA
  8152                           tblptru	equ	0xFF8
  8153                           tblptrh	equ	0xFF7
  8154                           tblptrl	equ	0xFF6
  8155                           tablat	equ	0xFF5
  8156                           prodh	equ	0xFF4
  8157                           prodl	equ	0xFF3
  8158                           intcon	equ	0xFF2
  8159                           indf0	equ	0xFEF
  8160                           fsr0h	equ	0xFEA
  8161                           fsr0l	equ	0xFE9
  8162                           wreg	equ	0xFE8
  8163                           indf2	equ	0xFDF
  8164                           postinc2	equ	0xFDE
  8165                           postdec2	equ	0xFDD
  8166                           fsr2h	equ	0xFDA
  8167                           fsr2l	equ	0xFD9
  8168                           status	equ	0xFD8
  8169                           
  8170                           	psect	intcode_body
  8171  002A62                     __pintcode_body:
  8172                           	opt stack 25
  8173  002A62                     int_func:
  8174                           	opt stack 25
  8175  002A62  0006               	pop		; remove dummy address from shadow register refresh
  8176  002A64  CFE9 F003          	movff	fsr0l,??_RA0_isr+2
  8177  002A68  CFEA F004          	movff	fsr0h,??_RA0_isr+3
  8178  002A6C  CFE1 F005          	movff	fsr1l,??_RA0_isr+4
  8179  002A70  CFE2 F006          	movff	fsr1h,??_RA0_isr+5
  8180  002A74  CFD9 F007          	movff	fsr2l,??_RA0_isr+6
  8181  002A78  CFDA F008          	movff	fsr2h,??_RA0_isr+7
  8182  002A7C  CFF3 F009          	movff	prodl,??_RA0_isr+8
  8183  002A80  CFF4 F00A          	movff	prodh,??_RA0_isr+9
  8184  002A84  CFF6 F00B          	movff	tblptrl,??_RA0_isr+10
  8185  002A88  CFF7 F00C          	movff	tblptrh,??_RA0_isr+11
  8186  002A8C  CFF8 F00D          	movff	tblptru,??_RA0_isr+12
  8187  002A90  CFF5 F00E          	movff	tablat,??_RA0_isr+13
  8188  002A94                     
  8189                           ;HW8.c: 27: if(ADIF)
  8190  002A94  AC9E               	btfss	3998,6,c	;volatile
  8191  002A96  D001               	goto	i2u169_41
  8192  002A98  D001               	goto	i2u169_40
  8193  002A9A                     i2u169_41:
  8194  002A9A  D009               	goto	i2l46
  8195  002A9C                     i2u169_40:
  8196  002A9C                     
  8197                           ;HW8.c: 28: {
  8198                           ;HW8.c: 29: flag = 1;
  8199  002A9C  0E00               	movlw	0
  8200  002A9E  0100               	movlb	0	; () banked
  8201  002AA0  0100               	movlb	0	; () banked
  8202  002AA2  6FD8               	movwf	(_flag+1)& (0+255),b	;volatile
  8203  002AA4  0E01               	movlw	1
  8204  002AA6  0100               	movlb	0	; () banked
  8205  002AA8  6FD7               	movwf	_flag& (0+255),b	;volatile
  8206  002AAA                     
  8207                           ; BSR set to: 0
  8208                           ;HW8.c: 30: ADIF = 0;
  8209  002AAA  9C9E               	bcf	3998,6,c	;volatile
  8210  002AAC  D000               	goto	i2l46
  8211  002AAE                     i2l46:
  8212  002AAE  C00E  FFF5         	movff	??_RA0_isr+13,tablat
  8213  002AB2  C00D  FFF8         	movff	??_RA0_isr+12,tblptru
  8214  002AB6  C00C  FFF7         	movff	??_RA0_isr+11,tblptrh
  8215  002ABA  C00B  FFF6         	movff	??_RA0_isr+10,tblptrl
  8216  002ABE  C00A  FFF4         	movff	??_RA0_isr+9,prodh
  8217  002AC2  C009  FFF3         	movff	??_RA0_isr+8,prodl
  8218  002AC6  C008  FFDA         	movff	??_RA0_isr+7,fsr2h
  8219  002ACA  C007  FFD9         	movff	??_RA0_isr+6,fsr2l
  8220  002ACE  C006  FFE2         	movff	??_RA0_isr+5,fsr1h
  8221  002AD2  C005  FFE1         	movff	??_RA0_isr+4,fsr1l
  8222  002AD6  C004  FFEA         	movff	??_RA0_isr+3,fsr0h
  8223  002ADA  C003  FFE9         	movff	??_RA0_isr+2,fsr0l
  8224  002ADE  C002  FFFB         	movff	??_RA0_isr+1,pclatu
  8225  002AE2  C001  FFFA         	movff	??_RA0_isr,pclath
  8226  002AE6  0011               	retfie		f
  8227  002AE8                     __end_of_RA0_isr:
  8228                           	opt stack 0
  8229                           pclatu	equ	0xFFB
  8230                           pclath	equ	0xFFA
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           prodh	equ	0xFF4
  8236                           prodl	equ	0xFF3
  8237                           intcon	equ	0xFF2
  8238                           indf0	equ	0xFEF
  8239                           fsr0h	equ	0xFEA
  8240                           fsr0l	equ	0xFE9
  8241                           wreg	equ	0xFE8
  8242                           fsr1h	equ	0xFE2
  8243                           fsr1l	equ	0xFE1
  8244                           indf2	equ	0xFDF
  8245                           postinc2	equ	0xFDE
  8246                           postdec2	equ	0xFDD
  8247                           fsr2h	equ	0xFDA
  8248                           fsr2l	equ	0xFD9
  8249                           status	equ	0xFD8
  8250                           pclatu	equ	0xFFB
  8251                           pclath	equ	0xFFA
  8252                           tblptru	equ	0xFF8
  8253                           tblptrh	equ	0xFF7
  8254                           tblptrl	equ	0xFF6
  8255                           tablat	equ	0xFF5
  8256                           prodh	equ	0xFF4
  8257                           prodl	equ	0xFF3
  8258                           intcon	equ	0xFF2
  8259                           indf0	equ	0xFEF
  8260                           fsr0h	equ	0xFEA
  8261                           fsr0l	equ	0xFE9
  8262                           wreg	equ	0xFE8
  8263                           fsr1h	equ	0xFE2
  8264                           fsr1l	equ	0xFE1
  8265                           indf2	equ	0xFDF
  8266                           postinc2	equ	0xFDE
  8267                           postdec2	equ	0xFDD
  8268                           fsr2h	equ	0xFDA
  8269                           fsr2l	equ	0xFD9
  8270                           status	equ	0xFD8
  8271                           
  8272                           	psect	rparam
  8273  0000                     pclatu	equ	0xFFB
  8274                           pclath	equ	0xFFA
  8275                           tblptru	equ	0xFF8
  8276                           tblptrh	equ	0xFF7
  8277                           tblptrl	equ	0xFF6
  8278                           tablat	equ	0xFF5
  8279                           prodh	equ	0xFF4
  8280                           prodl	equ	0xFF3
  8281                           intcon	equ	0xFF2
  8282                           indf0	equ	0xFEF
  8283                           fsr0h	equ	0xFEA
  8284                           fsr0l	equ	0xFE9
  8285                           wreg	equ	0xFE8
  8286                           fsr1h	equ	0xFE2
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           postdec2	equ	0xFDD
  8291                           fsr2h	equ	0xFDA
  8292                           fsr2l	equ	0xFD9
  8293                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    118
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    109     112
    BANK0           128     87      89
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 0

    ?___ftadd	float  size(2) Largest target is 0

    ?___lltoft	float  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 0

    ?___asftdiv	float  size(2) Largest target is 0

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 0

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?___awdiv	int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?___lwtoft	float  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@temp(BANK0[3]), sprintf@integ(BANK0[3]), sprintf@fval(BANK0[3]), 

    __asftdiv@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    ?_sprintf	int  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S514$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    load_string@ptr	PTR const unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    ___lwtoft->___ftpack
    _sprintf->___ftge
    ___lltoft->___fttol
    ___fttol->_scale
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___asftmul->___ftadd
    ___asftdiv->___ftdiv
    ___ftdiv->___ftmul
    ___asftadd->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    _load_string->_send_data
    _init_LCD->_send_data
    _send_data->_epulse
    _epulse->_delayus
    ___ftmul->___wmul

Critical Paths under _RA0_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___asftsub
    ___asftsub->___ftsub

Critical Paths under _RA0_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RA0_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _RA0_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _RA0_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _RA0_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _RA0_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0   18980
                                             58 BANK0     29    29      0
                          _init_ADCM
                           _init_LCD
                        _load_string
                          _send_data
                            _sprintf
                            _delayms
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             5     2      3     231
                                             22 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             53    46      7   16507
                                             11 BANK0     47    40      7
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                            ___ftadd
                          ___asftdiv
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                            ___awmod
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     159
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4     278
                                             80 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     159
                                             14 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     162
                                             14 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     252
                                             65 COMRAM    15    11      4
                              _scale (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      45
                                             89 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     198
                                            106 COMRAM     3     3      0
                                              0 BANK0      6     0      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftsub                                            5     0      5    1207
                                              6 BANK0      5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    1114
                                              0 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             14     8      6    1049
                                             92 COMRAM    14     8      6
                           ___ftpack
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftmul                                            5     0      5     628
                                              0 BANK0      5     0      5
                            ___ftadd (ARG)
                            ___ftmul
                            ___ftneg (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftdiv                                            5     0      5     555
                                             70 COMRAM     5     0      5
                              _scale (ARG)
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             17    11      6     489
                                             53 COMRAM    17    11      6
                           ___ftpack
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftadd                                            5     0      5    1142
                                              0 BANK0      5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          13     7      6     446
                                             14 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17    11      6     303
                                             14 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     2      1      68
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _scale                                               15    12      3    1779
                                             53 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _fround                                              18    15      3    1581
                                             53 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     296
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     300
                                             21 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _load_string                                          5     3      2     337
                                             25 COMRAM     5     3      2
                          _send_data
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             4     4      0     314
                                             25 COMRAM     4     4      0
                          _send_data
                            _delayms
 ---------------------------------------------------------------------------------
 (1) _send_data                                            8     4      4     292
                                             17 COMRAM     8     4      4
                            _delayms
                             _epulse
                            _delayus
 ---------------------------------------------------------------------------------
 (2) _epulse                                               1     1      0      22
                                             16 COMRAM     1     1      0
                            _delayus
 ---------------------------------------------------------------------------------
 (2) _delayus                                              2     1      1      22
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delayms                                              2     1      1      22
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _init_ADCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             17    11      6     535
                                             36 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5     209
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5     209
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _RA0_isr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_ADCM
   _init_LCD
     _send_data
       _delayms
       _epulse
         _delayus
       _delayus
     _delayms
   _load_string
     _send_data
       _delayms
       _epulse
         _delayus
       _delayus
   _send_data
     _delayms
     _epulse
       _delayus
     _delayus
   _sprintf
     _fround
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     __tdiv_to_l_
     __div_to_l_
     ___asftadd
       _fround (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     ___ftadd
       ___ftpack
       ___ftneg (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___fttol (ARG)
         _scale (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___asftdiv
       _scale (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___asftmul
       ___ftadd (ARG)
         ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___ftmul
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___asftsub
       ___ftsub
         ___ftadd
           ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 _scale (ARG)
                   ___ftmul
                     ___ftpack
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftge
       ___ftadd (ARG)
         ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___fttol (ARG)
         _scale (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
         _scale (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___fttol
       _scale (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
       ___fttol (ARG)
         _scale (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___lwmod
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _delayms
   ___ftdiv
     ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack

 _RA0_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     57      59       5       69.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6D      70       1       88.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       5       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C9      15        0.0%
DATA                 0      0      CE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Nov 28 21:56:18 2013

           ___asftadd@f2 0082            ___asftadd@f1p 0080             ___asftdiv@f2 0049  
                     l70 294A                       l67 2914                       l68 2916  
           ___awdiv@sign 001C      ___wmul@multiplicand 0021             ___asftmul@f2 0082  
           ___asftsub@f2 0088            ___asftdiv@f1p 0047             ___ftadd@exp1 006A  
           ___ftadd@exp2 0069             ___ftadd@sign 0068                      l211 1488  
                    l124 1B68                      l160 0A5C                      l170 0D98  
                    l154 09D4                      l155 09D8                      l156 0F4C  
                    l505 2526                      l614 2234                      l606 2442  
                    l702 2A50                      l623 2224                      l608 23EC  
                    l632 270A                      l712 2BBC                      l537 28A2  
                    l617 21D2                      l609 2412                      l638 2344  
                    l574 1E52                      l575 1FB4                      l496 2536  
                    l648 2EBC                      l498 24A2                      l578 1E7C  
                    l658 27EA                      l589 1F20                      l781 2CD2  
                    l598 1F3C             ___awmod@sign 0015                      loop 2F00  
                    wreg 000FE8            ___asftmul@f1p 0080              _sprintf$526 009B  
          ___asftsub@f1p 0086             __CFG_LVP$OFF 000000             ___ftdiv@cntr 0041  
        __end_of_RA0_isr 2AE8             ___ftdiv@sign 0046             __CFG_WDT$OFF 000000  
                   l4211 1D9E                     l4203 1CC6                     l5021 0906  
                   l5005 0842                     l5111 0EAA                     l5103 0E7C  
                   l4233 1920                     l4321 2220                     l4313 21FC  
                   l5201 12B2                     l5105 0E8C                     l5113 0EB6  
                   l5041 0A1A                     l5033 09AE                     l4251 1B3A  
                   l4227 1864                     l5051 0A60                     l4173 2EF8  
                   l4245 1A72                     l4237 192E                     l4309 21EC  
                   l5221 1374                     l5141 0F88                     l5125 0EEC  
                   l5029 097A                     l5301 16E8                     l4191 2F3C  
                   l4263 2EE6                     l4319 2214                     l4335 245C  
                   l4503 23AA                     l4431 1E8A                     l5207 1316  
                   l5071 0C60                     l5047 0A38                     l5303 170C  
                   l4177 2F08                     l3801 28F4                     l4273 2140  
                   l4329 2450                     l4425 1E60                     l5161 105E  
                   l5065 0BE8                     l3803 28FA                     l4611 2978  
                   l4355 24D2                     l5243 144E                     l5227 13A2  
                   l5235 1420                     l5059 0B4E                     l4189 2F3A  
                   l4621 299E                     l4605 2968                     l4293 21AA  
                   l4365 24EE                     l4453 1EDA                     l5333 26AC  
                   l5261 1516                     l5237 1430                     l5165 10F6  
                   l5157 1006                     l5173 1172                     l5077 0C96  
                   l4391 2832                     l4383 27FC                     l4551 229A  
                   l4279 216C                     l4375 2516                     l4455 1EE4  
                   l4447 1EBC                     l5271 15E4                     l4545 2262  
                   l4617 2992                     l4633 29C4                     l4377 2522  
                   l4369 24FE                     l4473 1F58                     l4465 1F10  
                   l4457 1EEC                     l5329 266A                     l4705 2738  
                   l4801 2CB4                     l5273 15F4                     l5257 14C4  
                   l5249 148C                     l5185 1208                     l5177 11B0  
                   l5169 1134                     l5097 0DD6                     l5281 1620  
                   l4395 2848                     l4387 280A                     l4619 299A  
                   l4483 1F90                     l4467 1F1A                     l4459 1EF2  
                   l5339 2708                     l4723 278C                     l5291 1672  
                   l4397 2866                     l4389 2814                     l4565 22D0  
                   l3773 2C72                     l4637 29D2                     l4629 29BA  
                   l4661 2B2E                     l4653 2B10                     l4741 27DA  
                   l4733 27B4                     l4805 2CC8                     l5189 123A  
                   l4399 2870                     l4575 22FC                     l4735 27C0  
                   l4727 279C                     l4751 2A02                     l5295 16B2  
                   l5287 1644                     l5279 1612                     l4569 22E0  
                   l3785 28BC                     l3769 2C34                     l4673 2B5A  
                   l4665 2B42                     l4657 2B22                     l4649 2B04  
                   l4497 2372                     l4737 27C4                     l4753 2A0E  
                   l4579 230C                     l4659 2B2A                     l4763 2A42  
                   l4755 2A12                     l4771 2B7A                     l4669 2B4C  
                   l4773 2B86                     l4775 2B8A                     _ADIF 007CF6  
                   l4785 2BD8                     l4937 1FD4                     l4779 2BAE  
                   l4787 2BE4                     l4797 2CA8                     l4973 0704  
                   l4965 06C2                     l4799 2CB0                     l4983 077A  
                   l4959 06A4                     l4977 0748                     l4995 07D8  
                   l4987 0782                     l4979 0764                     l4989 07B4  
                   STR_1 0676                     STR_2 0686                     u3000 228C  
                   u3210 2756                     u2500 215E                     u1710 2C50  
                   u3215 274E                     u1720 2C8E                     u3240 27A2  
                   u2505 2156                     u2620 2504                     u1717 2C4A  
                   u2550 2202                     u2710 1E08                     u3190 272A  
                   u1727 2C88                     u2480 2132                     u2720 1E2E  
                   u3450 0896                     u2715 1E00                     u3195 2722  
                   u3435 081A                     u2485 212A                     u2725 1E26  
                   u3455 088A                     u2920 2364                     u2940 2390  
                   u2925 235C                     u2950 239C                     u2945 2388  
                   u2970 2254                     u2990 2280                     u2975 224C  
                   u2995 2278                     i2l45 2AAE                     i2l46 2AAE  
                   _flag 00D7                     _main 1FB6             ___ftpack@arg 000F  
           ___ftpack@exp 0012                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 0014              main@voltage 00D2             _sprintf$1138 0098  
           ___ftmul@cntr 0034             ___ftmul@sign 0035             ___fttol@exp1 0050  
           ___fttol@lval 004C                    ?_main 0001          __end_of___awdiv 29DC  
        __end_of___ftadd 1FB6          __end_of___awmod 2B64          __end_of___ftdiv 2444  
        __end_of___ftneg 2ECA          __end_of___lldiv 2A62          __end_of___ftmul 2346  
        ___awdiv@divisor 0018          __end_of___llmod 2BCE          __end_of___ftsub 2D60  
        __end_of___fttol 27EC          __end_of___lwmod 2CDC          ___awdiv@counter 001B  
           ?_load_string 001A                    _PORTD 000F83                    _TRISD 000F95  
        __end_of_delayms 2F12          __end_of_delayus 2F46             ___lltoft@exp 0059  
        __end_of_dpowers 0628                    _scale 171A          __end_of_isdigit 2EEE  
          ___ftpack@sign 0013                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 171A          __initialization 2F46             __end_of_main 2114  
                 ??_main 00BA            ___fttol@sign1 004B            __activetblptr 000002  
   __size_of__tdiv_to_l_ 0122                ??_RA0_isr 0001                   _ADCON1 000FC1  
       ___llmod@dividend 000F                   ?_scale 0036                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0016         __end_of___ftpack 28A4  
       __end_of___lltoft 2C32                   i2l3691 2A9C                   i2l3693 2AAA  
                 i2l3689 2A94         __end_of___lwtoft 2E7A         __end_of__powers_ 0676  
                 ___ftge 2628                   ___wmul 2E14                ??___awdiv 001A  
              ??___ftadd 0063                ??___awmod 0013                ??___ftdiv 003C  
              ??___ftneg 005D                ??___lldiv 0017                ??___ftmul 002B  
              ??___llmod 0017                ??___ftsub 006B                ??___fttol 0046  
       __end_of_init_LCD 2628                ??___lwmod 0013                   _epulse 2E7A  
                 _fround 1B6A         ___awdiv@quotient 001D          ___awmod@divisor 0011  
              ??_delayms 0010                ??_delayus 0010          ___awmod@counter 0014  
  ___ftmul@f3_as_product 0031                ??_isdigit 0010             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0092       __size_of___asftadd 003C       __size_of___asftdiv 003C  
         main@adc_result 00D5       __size_of___asftmul 003C       __size_of___asftsub 0042  
             __accesstop 0080  __end_of__initialization 2F50          __CFG_PBADEN$OFF 000000  
             ___ftadd@f1 005D               ___ftadd@f2 0060               ___ftge@ff1 0080  
             ___ftge@ff2 0083               ___ftdiv@f1 0036               ___ftdiv@f2 0039  
             ___ftdiv@f3 0042               ___ftneg@f1 005A               ___ftmul@f1 0025  
             ___ftmul@f2 0028               ___ftsub@f1 0080               ___ftsub@f2 0083  
             ___fttol@f1 0042           __pcstackCOMRAM 0001               ___lltoft@c 0051  
          __end_of_scale 1B6A               ___lwtoft@c 0017               __div_to_l_ 2444  
   __size_of_load_string 0064          __div_to_l_@exp1 001B          __div_to_l_@cntr 001A  
           sprintf@integ 00A8                  ??_scale 0039          __div_to_l_@quot 0016  
             __pbssBANK0 00D7       __size_of_init_ADCM 001E               __pnvCOMRAM 0070  
          __div_to_l_@f1 000F            __div_to_l_@f2 0012                  ?___ftge 0080  
                ?___wmul 001F       __size_of_send_data 00A8        __end_of___asftadd 2E14  
                ?_epulse 0001        __end_of___asftdiv 2DD8                  ?_fround 0036  
      __end_of___asftmul 2D9C        __end_of___asftsub 2D1E                ?___ftpack 000F  
              ?___lltoft 0051                ?___lwtoft 0017                  _RA0_isr 0008  
              ?_init_LCD 0001        __end_of__npowers_ 064F                  __Hparam 0000  
             _scale$1137 003F                  __Lparam 0000          __size_of___ftge 00E4  
                ___awdiv 294C                  ___ftadd 1DEA                  ___awmod 2AE8  
                ___ftdiv 2346                  ___ftneg 2EA4                  ___lldiv 29DC  
        __size_of___wmul 003A                  ___ftmul 2236                  ___llmod 2B64  
                ___ftsub 2D1E                  ___fttol 270C                  ___lwmod 2C96  
           __psmallconst 0600                  __pcinit 2F46          __size_of_epulse 002A  
             ??___ftpack 0014          __size_of_fround 0280                  __ramtop 0600  
                _delayms 2EEE                  _delayus 2F30        __end_of_init_ADCM 2F30  
             ??___lltoft 0055                  __ptext0 1FB6                  __ptext1 2E4E  
                __ptext2 068E                  __ptext3 2C96                  __ptext4 2BCE  
                __ptext5 2B64                  __ptext6 29DC                  __ptext7 270C  
                __ptext8 2EA4                  __ptext9 2628               ??___lwtoft 001A  
            ?__div_to_l_ 000F                  _dpowers 0600                  _isdigit 2ECA  
       ___awmod@dividend 000F                  _sprintf 068E           __pintcode_body 2A62  
   end_of_initialization 2F50        __end_of_send_data 294C               delayms@cnt 000F  
             ??_init_LCD 001A               delayus@cnt 000F            __Lmediumconst 0000  
                int_func 2A62          ___lldiv@divisor 0013          ___lldiv@counter 001C  
                postdec2 000FDD                  postinc2 000FDE           __tdiv_to_l_@f1 000F  
         __tdiv_to_l_@f2 0012            send_data@data 0012            ??__tdiv_to_l_ 0015  
              _PORTDbits 000F83              ___ftdiv@exp 0045               main@buffer 00BE  
    __size_of__div_to_l_ 00F4              ___ftmul@exp 0030           __end_of___ftge 270C  
         __end_of___wmul 2E4E           __end_of_epulse 2EA4           __end_of_fround 1DEA  
    start_initialization 2F46      __end_of__tdiv_to_l_ 2236          ___llmod@divisor 0013  
       __CFG_OSC$INTIO67 000000          ___llmod@counter 0018                 ??___ftge 006B  
               ??___wmul 0023            sprintf@vd_528 00A3                 ??_epulse 0011  
               ??_fround 0039               fround@prec 0036            ??_load_string 001C  
      __size_of___ftpack 00B8                ___asftadd 2DD8                ___asftdiv 2D9C  
              ___asftmul 2D60                ___asftsub 2CDC        __size_of___lltoft 0064  
               ?_RA0_isr 0001              __pbssCOMRAM 006E        __size_of___lwtoft 002C  
          __pcstackBANK0 0080      __end_of__stringdata 068C              sprintf@_val 00AD  
            sprintf@flag 00AB              sprintf@fval 00B6              sprintf@prec 00B4  
            sprintf@temp 00A5        __size_of_init_LCD 00F0        send_data@chk_busy 0014  
              __pintcode 0008                 ?___awdiv 0016                 ?___ftadd 005D  
               ?___awmod 000F                 ?___ftdiv 0036                 ?___ftneg 005A  
               ?___lldiv 000F                 ?___ftmul 0025                 ?___llmod 000F  
               ?___ftsub 0080                __npowers_ 0628                 ?___fttol 0042  
               ?___lwmod 000F                 ?_delayms 000F                 ?_delayus 000F  
             send_data@c 0018               send_data@d 0019              __tdiv_to_l_ 2114  
           ??__div_to_l_ 0015              __smallconst 0600               ?___asftadd 0080  
             ?___asftdiv 0047                 ?_isdigit 000F               ?___asftmul 0080  
             ?___asftsub 0086                _init_ADCM 2F12                 ?_sprintf 008B  
         __size_of_scale 0450      __end_of_load_string 2C96           ___wmul@product 0023  
               _PIE1bits 000F9D                _send_data 28A4                 i2u169_40 2A9C  
               i2u169_41 2A9A                 _PIR1bits 000F9E       __end_of__div_to_l_ 2538  
             _ADCON0bits 000FC2              __stringdata 0676               _ADCON2bits 000FC0  
      ___wmul@multiplier 001F               ?_init_ADCM 0001         __size_of_RA0_isr 2AE0  
         load_string@ptr 001A               ?_send_data 0012                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0090         __size_of___ftadd 01CC  
       __size_of___awmod 007C         __size_of___ftdiv 00FE         __size_of___ftneg 0026  
       __size_of___lldiv 0086         __size_of___ftmul 0110         __size_of___llmod 006A  
       __size_of___ftsub 0042         __size_of___fttol 00E0         __size_of___lwmod 0046  
               ___ftpack 27EC              _fround$1135 0042              _fround$1136 003F  
               ___lltoft 2BCE              _isdigit$801 0011         __size_of_delayms 0024  
       __size_of_delayus 0016                 ___lwtoft 2E4E              ??___asftadd 006B  
            ??___asftdiv 004C               sprintf@exp 00B2              ??___asftmul 006B  
            ??___asftsub 006B              _load_string 2C32         __size_of_isdigit 0024  
               __ptext10 2CDC                 __ptext11 2D1E                 __ptext20 171A  
               __ptext12 1DEA                 __ptext21 1B6A                 __ptext13 2D60  
               __ptext30 2EEE                 __ptext22 2E14                 __ptext14 2D9C  
               __ptext31 2F12                 __ptext23 2AE8                 __ptext15 2346  
               __ptext32 2236                 __ptext24 294C                 __ptext16 2DD8  
               __ptext33 27EC                 __ptext25 2C32                 __ptext17 2444  
               __ptext26 2538                 __ptext18 2114                 __ptext27 28A4  
               __ptext19 2ECA                 __ptext28 2E7A                 __ptext29 2F30  
               __powers_ 064F         __size_of_sprintf 108C                 _init_LCD 2538  
          __size_of_main 015E                 delayms@i 006E                 delayms@j 0070  
               delayus@i 006F               _INTCONbits 000FF2              ??_init_ADCM 000F  
               isdigit@c 000F                 scale@scl 0036                 intlevel2 0000  
              sprintf@ap 009F         __tdiv_to_l_@exp1 001F                sprintf@vd 00A1  
       __tdiv_to_l_@cntr 001E                sprintf@sp 008B         __tdiv_to_l_@quot 001A  
       ___lwmod@dividend 000F         ___lldiv@dividend 000F              ??_send_data 0016  
           ?__tdiv_to_l_ 000F                 sprintf@c 00B9                 sprintf@f 008D  
         send_data@bflag 0017           send_data@cflag 0013           send_data@dflag 0015  
       ___lldiv@quotient 0018          ___lwmod@divisor 0011          ___lwmod@counter 0014  
