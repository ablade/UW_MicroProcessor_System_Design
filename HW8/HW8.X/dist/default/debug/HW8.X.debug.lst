

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Nov 28 23:21:34 2013

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	smallconst
    52  000600                     __psmallconst:
    53                           	opt stack 0
    54  000600                     _dpowers:
    55                           	opt stack 0
    56  000600  0001               	dw	1
    57  000602  0000               	dw	0
    58  000604  000A               	dw	10
    59  000606  0000               	dw	0
    60  000608  0064               	dw	100
    61  00060A  0000               	dw	0
    62  00060C  03E8               	dw	1000
    63  00060E  0000               	dw	0
    64  000610  2710               	dw	10000
    65  000612  0000               	dw	0
    66  000614  86A0               	dw	34464
    67  000616  0001               	dw	1
    68  000618  4240               	dw	16960
    69  00061A  000F               	dw	15
    70  00061C  9680               	dw	38528
    71  00061E  0098               	dw	152
    72  000620  E100               	dw	57600
    73  000622  05F5               	dw	1525
    74  000624  CA00               	dw	51712
    75  000626  3B9A               	dw	15258
    76  000628                     __end_of_dpowers:
    77                           	opt stack 0
    78  000628                     __npowers_:
    79                           	opt stack 0
    80  000628  00                 	db	0
    81  000629  80                 	db	128
    82  00062A  3F                 	db	63
    83  00062B  CD                 	db	205
    84  00062C  CC                 	db	204
    85  00062D  3D                 	db	61
    86  00062E  D7                 	db	215
    87  00062F  23                 	db	35
    88  000630  3C                 	db	60
    89  000631  12                 	db	18
    90  000632  83                 	db	131
    91  000633  3A                 	db	58
    92  000634  B7                 	db	183
    93  000635  D1                 	db	209
    94  000636  38                 	db	56
    95  000637  C6                 	db	198
    96  000638  27                 	db	39
    97  000639  37                 	db	55
    98  00063A  38                 	db	56
    99  00063B  86                 	db	134
   100  00063C  35                 	db	53
   101  00063D  C0                 	db	192
   102  00063E  D6                 	db	214
   103  00063F  33                 	db	51
   104  000640  CC                 	db	204
   105  000641  2B                 	db	43
   106  000642  32                 	db	50
   107  000643  70                 	db	112
   108  000644  89                 	db	137
   109  000645  30                 	db	48
   110  000646  E7                 	db	231
   111  000647  DB                 	db	219
   112  000648  2E                 	db	46
   113  000649  E5                 	db	229
   114  00064A  3C                 	db	60
   115  00064B  1E                 	db	30
   116  00064C  42                 	db	66
   117  00064D  A2                 	db	162
   118  00064E  0D                 	db	13
   119  00064F                     __end_of__npowers_:
   120                           	opt stack 0
   121  00064F                     __powers_:
   122                           	opt stack 0
   123  00064F  00                 	db	0
   124  000650  80                 	db	128
   125  000651  3F                 	db	63
   126  000652  00                 	db	0
   127  000653  20                 	db	32
   128  000654  41                 	db	65
   129  000655  00                 	db	0
   130  000656  C8                 	db	200
   131  000657  42                 	db	66
   132  000658  00                 	db	0
   133  000659  7A                 	db	122
   134  00065A  44                 	db	68
   135  00065B  40                 	db	64
   136  00065C  1C                 	db	28
   137  00065D  46                 	db	70
   138  00065E  50                 	db	80
   139  00065F  C3                 	db	195
   140  000660  47                 	db	71
   141  000661  24                 	db	36
   142  000662  74                 	db	116
   143  000663  49                 	db	73
   144  000664  97                 	db	151
   145  000665  18                 	db	24
   146  000666  4B                 	db	75
   147  000667  BC                 	db	188
   148  000668  BE                 	db	190
   149  000669  4C                 	db	76
   150  00066A  6B                 	db	107
   151  00066B  6E                 	db	110
   152  00066C  4E                 	db	78
   153  00066D  03                 	db	3
   154  00066E  15                 	db	21
   155  00066F  50                 	db	80
   156  000670  79                 	db	121
   157  000671  AD                 	db	173
   158  000672  60                 	db	96
   159  000673  F3                 	db	243
   160  000674  49                 	db	73
   161  000675  71                 	db	113
   162  000676                     __end_of__powers_:
   163                           	opt stack 0
   164  0000                     _ADCON0bits	set	4034
   165  0000                     _ADCON1	set	4033
   166  0000                     _ADCON2bits	set	4032
   167  0000                     _ADRESH	set	4036
   168  0000                     _ADRESL	set	4035
   169  0000                     _INTCONbits	set	4082
   170  0000                     _PIE1bits	set	3997
   171  0000                     _PIR1bits	set	3998
   172  0000                     _PORTD	set	3971
   173  0000                     _PORTDbits	set	3971
   174  0000                     _TRISD	set	3989
   175  0000                     _ADIF	set	31990
   176  000676                     __stringdata:
   177                           	opt stack 0
   178  000676                     STR_1:
   179  000676  52                 	db	82	;'R'
   180  000677  41                 	db	65	;'A'
   181  000678  30                 	db	48	;'0'
   182  000679  20                 	db	32
   183  00067A  56                 	db	86	;'V'
   184  00067B  6F                 	db	111	;'o'
   185  00067C  6C                 	db	108	;'l'
   186  00067D  74                 	db	116	;'t'
   187  00067E  61                 	db	97	;'a'
   188  00067F  67                 	db	103	;'g'
   189  000680  65                 	db	101	;'e'
   190  000681  20                 	db	32
   191  000682  3A                 	db	58	;':'
   192  000683  20                 	db	32
   193  000684  00                 	db	0
   194  000685  00                 	db	0
   195  000686                     STR_2:
   196  000686  25                 	db	37
   197  000687  2E                 	db	46
   198  000688  33                 	db	51	;'3'
   199  000689  67                 	db	103	;'g'
   200  00068A  00                 	db	0
   201  00068B  00                 	db	0
   202  00068C                     __end_of__stringdata:
   203                           	opt stack 0
   204                           
   205                           ; #config settings
   206  00068C  00                 	db	0	; dummy byte at the end
   207  0000                     
   208                           	psect	nvCOMRAM
   209  000070                     __pnvCOMRAM:
   210                           	opt stack 0
   211  000070                     delayms@j:
   212                           	opt stack 0
   213  000070                     	ds	1
   214                           
   215                           	psect	cinit
   216  002F46                     __pcinit:
   217                           	opt stack 0
   218  002F46                     start_initialization:
   219                           	opt stack 0
   220  002F46                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Clear objects allocated to BANK0 (2 bytes)
   224  002F46  0100               	movlb	0
   225  002F48  6BD4               	clrf	(__pbssBANK0+1)& (0+255),b
   226  002F4A  6BD3               	clrf	__pbssBANK0& (0+255),b
   227                           
   228                           ; Clear objects allocated to COMRAM (2 bytes)
   229  002F4C  6A6F               	clrf	(__pbssCOMRAM+1)& (0+255),c
   230  002F4E  6A6E               	clrf	__pbssCOMRAM& (0+255),c
   231  002F50                     end_of_initialization:
   232                           	opt stack 0
   233  002F50                     __end_of__initialization:
   234                           	opt stack 0
   235  002F50  0E00               	movlw	low (__Lmediumconst shr (0+16))
   236  002F52  6EF8               	movwf	tblptru,c
   237  002F54  0100               	movlb	0
   238  002F56  EFDB  F00F         	goto	_main	;jump to C main() function
   239                           tblptru	equ	0xFF8
   240                           
   241                           	psect	bssCOMRAM
   242  00006E                     __pbssCOMRAM:
   243                           	opt stack 0
   244  00006E                     delayms@i:
   245                           	opt stack 0
   246  00006E                     	ds	1
   247  00006F                     delayus@i:
   248                           	opt stack 0
   249  00006F                     	ds	1
   250                           tblptru	equ	0xFF8
   251                           
   252                           	psect	bssBANK0
   253  0000D3                     __pbssBANK0:
   254                           	opt stack 0
   255  0000D3                     _flag:
   256                           	opt stack 0
   257  0000D3                     	ds	2
   258                           tblptru	equ	0xFF8
   259                           
   260                           	psect	cstackBANK0
   261  000080                     __pcstackBANK0:
   262                           	opt stack 0
   263  000080                     ?___ftge:
   264                           	opt stack 0
   265  000080                     ?___ftsub:
   266                           	opt stack 0
   267  000080                     ?___asftadd:
   268                           	opt stack 0
   269  000080                     ?___asftmul:
   270                           	opt stack 0
   271  000080                     ___asftadd@f1p:
   272                           	opt stack 0
   273  000080                     ___asftmul@f1p:
   274                           	opt stack 0
   275  000080                     ___ftge@ff1:
   276                           	opt stack 0
   277  000080                     ___ftsub@f1:
   278                           	opt stack 0
   279                           
   280                           ; 3 bytes @ 0x0
   281  000080                     	ds	2
   282  000082                     ___asftadd@f2:
   283                           	opt stack 0
   284  000082                     ___asftmul@f2:
   285                           	opt stack 0
   286                           
   287                           ; 3 bytes @ 0x2
   288  000082                     	ds	1
   289  000083                     ___ftge@ff2:
   290                           	opt stack 0
   291  000083                     ___ftsub@f2:
   292                           	opt stack 0
   293                           
   294                           ; 3 bytes @ 0x3
   295  000083                     	ds	3
   296  000086                     ?___asftsub:
   297                           	opt stack 0
   298  000086                     ___asftsub@f1p:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x6
   302  000086                     	ds	2
   303  000088                     ___asftsub@f2:
   304                           	opt stack 0
   305                           
   306                           ; 3 bytes @ 0x8
   307  000088                     	ds	3
   308  00008B                     ?_sprintf:
   309                           	opt stack 0
   310  00008B                     sprintf@sp:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0xB
   314  00008B                     	ds	2
   315  00008D                     sprintf@f:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0xD
   319  00008D                     	ds	5
   320  000092                     ??_sprintf:
   321                           
   322                           ; 0 bytes @ 0x12
   323  000092                     	ds	6
   324  000098                     _sprintf$1138:
   325                           	opt stack 0
   326                           
   327                           ; 3 bytes @ 0x18
   328  000098                     	ds	3
   329  00009B                     _sprintf$526:
   330                           	opt stack 0
   331                           
   332                           ; 4 bytes @ 0x1B
   333  00009B                     	ds	4
   334  00009F                     sprintf@ap:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x1F
   338  00009F                     	ds	2
   339  0000A1                     sprintf@vd:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x21
   343  0000A1                     	ds	2
   344  0000A3                     sprintf@vd_528:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x23
   348  0000A3                     	ds	2
   349  0000A5                     sprintf@temp:
   350                           	opt stack 0
   351                           
   352                           ; 3 bytes @ 0x25
   353  0000A5                     	ds	3
   354  0000A8                     sprintf@integ:
   355                           	opt stack 0
   356                           
   357                           ; 3 bytes @ 0x28
   358  0000A8                     	ds	3
   359  0000AB                     sprintf@flag:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x2B
   363  0000AB                     	ds	2
   364  0000AD                     sprintf@_val:
   365                           	opt stack 0
   366                           
   367                           ; 5 bytes @ 0x2D
   368  0000AD                     	ds	5
   369  0000B2                     sprintf@exp:
   370                           	opt stack 0
   371                           
   372                           ; 2 bytes @ 0x32
   373  0000B2                     	ds	2
   374  0000B4                     sprintf@prec:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0x34
   378  0000B4                     	ds	2
   379  0000B6                     sprintf@fval:
   380                           	opt stack 0
   381                           
   382                           ; 3 bytes @ 0x36
   383  0000B6                     	ds	3
   384  0000B9                     sprintf@c:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x39
   388  0000B9                     	ds	1
   389  0000BA                     ??_main:
   390                           
   391                           ; 0 bytes @ 0x3A
   392  0000BA                     	ds	4
   393  0000BE                     main@buffer:
   394                           	opt stack 0
   395                           
   396                           ; 16 bytes @ 0x3E
   397  0000BE                     	ds	16
   398  0000CE                     main@voltage:
   399                           	opt stack 0
   400                           
   401                           ; 3 bytes @ 0x4E
   402  0000CE                     	ds	3
   403  0000D1                     main@adc_result:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x51
   407  0000D1                     	ds	2
   408                           tblptru	equ	0xFF8
   409                           
   410                           	psect	cstackCOMRAM
   411  000001                     __pcstackCOMRAM:
   412                           	opt stack 0
   413  000001                     ??_RA0_isr:
   414  000001                     
   415                           ; 0 bytes @ 0x0
   416  000001                     	ds	14
   417  00000F                     ?_delayms:
   418                           	opt stack 0
   419  00000F                     ?_delayus:
   420                           	opt stack 0
   421  00000F                     ?_isdigit:
   422                           	opt stack 0
   423  00000F                     ?___awmod:
   424                           	opt stack 0
   425  00000F                     ?___lwmod:
   426                           	opt stack 0
   427  00000F                     ?___ftpack:
   428                           	opt stack 0
   429  00000F                     ?__tdiv_to_l_:
   430                           	opt stack 0
   431  00000F                     ?__div_to_l_:
   432                           	opt stack 0
   433  00000F                     ?___lldiv:
   434                           	opt stack 0
   435  00000F                     ?___llmod:
   436                           	opt stack 0
   437  00000F                     delayms@cnt:
   438                           	opt stack 0
   439  00000F                     delayus@cnt:
   440                           	opt stack 0
   441  00000F                     isdigit@c:
   442                           	opt stack 0
   443  00000F                     ___awmod@dividend:
   444                           	opt stack 0
   445  00000F                     ___lwmod@dividend:
   446                           	opt stack 0
   447  00000F                     __div_to_l_@f1:
   448                           	opt stack 0
   449  00000F                     ___ftpack@arg:
   450                           	opt stack 0
   451  00000F                     __tdiv_to_l_@f1:
   452                           	opt stack 0
   453  00000F                     ___lldiv@dividend:
   454                           	opt stack 0
   455  00000F                     ___llmod@dividend:
   456                           	opt stack 0
   457                           
   458                           ; 4 bytes @ 0xE
   459  00000F                     	ds	1
   460  000010                     ??_delayms:
   461  000010                     ??_delayus:
   462  000010                     ??_isdigit:
   463                           
   464                           ; 0 bytes @ 0xF
   465  000010                     	ds	1
   466  000011                     ??_epulse:
   467  000011                     _isdigit$801:
   468                           	opt stack 0
   469  000011                     ___awmod@divisor:
   470                           	opt stack 0
   471  000011                     ___lwmod@divisor:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x10
   475  000011                     	ds	1
   476  000012                     ?_send_data:
   477                           	opt stack 0
   478  000012                     send_data@data:
   479                           	opt stack 0
   480  000012                     ___ftpack@exp:
   481                           	opt stack 0
   482  000012                     __div_to_l_@f2:
   483                           	opt stack 0
   484  000012                     __tdiv_to_l_@f2:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x11
   488  000012                     	ds	1
   489  000013                     ??___awmod:
   490  000013                     ??___lwmod:
   491  000013                     send_data@cflag:
   492                           	opt stack 0
   493  000013                     ___ftpack@sign:
   494                           	opt stack 0
   495  000013                     ___lldiv@divisor:
   496                           	opt stack 0
   497  000013                     ___llmod@divisor:
   498                           	opt stack 0
   499                           
   500                           ; 4 bytes @ 0x12
   501  000013                     	ds	1
   502  000014                     ??___ftpack:
   503  000014                     send_data@chk_busy:
   504                           	opt stack 0
   505  000014                     ___awmod@counter:
   506                           	opt stack 0
   507  000014                     ___lwmod@counter:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x13
   511  000014                     	ds	1
   512  000015                     ??__tdiv_to_l_:
   513  000015                     ??__div_to_l_:
   514  000015                     send_data@dflag:
   515                           	opt stack 0
   516  000015                     ___awmod@sign:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x14
   520  000015                     	ds	1
   521  000016                     ??_send_data:
   522  000016                     ?___awdiv:
   523                           	opt stack 0
   524  000016                     ___awdiv@dividend:
   525                           	opt stack 0
   526  000016                     __div_to_l_@quot:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x15
   530  000016                     	ds	1
   531  000017                     ??___lldiv:
   532  000017                     ??___llmod:
   533  000017                     ?___lwtoft:
   534                           	opt stack 0
   535  000017                     send_data@bflag:
   536                           	opt stack 0
   537  000017                     ___lwtoft@c:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x16
   541  000017                     	ds	1
   542  000018                     send_data@c:
   543                           	opt stack 0
   544  000018                     ___llmod@counter:
   545                           	opt stack 0
   546  000018                     ___awdiv@divisor:
   547                           	opt stack 0
   548  000018                     ___lldiv@quotient:
   549                           	opt stack 0
   550                           
   551                           ; 4 bytes @ 0x17
   552  000018                     	ds	1
   553  000019                     send_data@d:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x18
   557  000019                     	ds	1
   558  00001A                     ??_init_LCD:
   559  00001A                     ?_load_string:
   560                           	opt stack 0
   561  00001A                     ??___awdiv:
   562  00001A                     ??___lwtoft:
   563  00001A                     __div_to_l_@cntr:
   564                           	opt stack 0
   565  00001A                     load_string@ptr:
   566                           	opt stack 0
   567  00001A                     __tdiv_to_l_@quot:
   568                           	opt stack 0
   569                           
   570                           ; 4 bytes @ 0x19
   571  00001A                     	ds	1
   572  00001B                     ___awdiv@counter:
   573                           	opt stack 0
   574  00001B                     __div_to_l_@exp1:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x1A
   578  00001B                     	ds	1
   579  00001C                     ??_load_string:
   580  00001C                     ___awdiv@sign:
   581                           	opt stack 0
   582  00001C                     ___lldiv@counter:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x1B
   586  00001C                     	ds	1
   587  00001D                     ___awdiv@quotient:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x1C
   591  00001D                     	ds	1
   592  00001E                     __tdiv_to_l_@cntr:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x1D
   596  00001E                     	ds	1
   597  00001F                     ?___wmul:
   598                           	opt stack 0
   599  00001F                     __tdiv_to_l_@exp1:
   600                           	opt stack 0
   601  00001F                     ___wmul@multiplier:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x1E
   605  00001F                     	ds	2
   606  000021                     ___wmul@multiplicand:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x20
   610  000021                     	ds	2
   611  000023                     ___wmul@product:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x22
   615  000023                     	ds	2
   616  000025                     ?___ftmul:
   617                           	opt stack 0
   618  000025                     ___ftmul@f1:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x24
   622  000025                     	ds	3
   623  000028                     ___ftmul@f2:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x27
   627  000028                     	ds	3
   628  00002B                     ??___ftmul:
   629                           
   630                           ; 0 bytes @ 0x2A
   631  00002B                     	ds	5
   632  000030                     ___ftmul@exp:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x2F
   636  000030                     	ds	1
   637  000031                     ___ftmul@f3_as_product:
   638                           	opt stack 0
   639                           
   640                           ; 3 bytes @ 0x30
   641  000031                     	ds	3
   642  000034                     ___ftmul@cntr:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x33
   646  000034                     	ds	1
   647  000035                     ___ftmul@sign:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x34
   651  000035                     	ds	1
   652  000036                     ?___ftdiv:
   653                           	opt stack 0
   654  000036                     ?_fround:
   655                           	opt stack 0
   656  000036                     ?_scale:
   657                           	opt stack 0
   658  000036                     fround@prec:
   659                           	opt stack 0
   660  000036                     scale@scl:
   661                           	opt stack 0
   662  000036                     ___ftdiv@f1:
   663                           	opt stack 0
   664                           
   665                           ; 3 bytes @ 0x35
   666  000036                     	ds	3
   667  000039                     ??_fround:
   668  000039                     ??_scale:
   669  000039                     ___ftdiv@f2:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x38
   673  000039                     	ds	3
   674  00003C                     ??___ftdiv:
   675                           
   676                           ; 0 bytes @ 0x3B
   677  00003C                     	ds	3
   678  00003F                     _fround$1136:
   679                           	opt stack 0
   680  00003F                     _scale$1137:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x3E
   684  00003F                     	ds	2
   685  000041                     ___ftdiv@cntr:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x40
   689  000041                     	ds	1
   690  000042                     ?___fttol:
   691                           	opt stack 0
   692  000042                     ___ftdiv@f3:
   693                           	opt stack 0
   694  000042                     ___fttol@f1:
   695                           	opt stack 0
   696  000042                     _fround$1135:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x41
   700  000042                     	ds	3
   701  000045                     ___ftdiv@exp:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x44
   705  000045                     	ds	1
   706  000046                     ??___fttol:
   707  000046                     ___ftdiv@sign:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x45
   711  000046                     	ds	1
   712  000047                     ?___asftdiv:
   713                           	opt stack 0
   714  000047                     ___asftdiv@f1p:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x46
   718  000047                     	ds	2
   719  000049                     ___asftdiv@f2:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x48
   723  000049                     	ds	2
   724  00004B                     ___fttol@sign1:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x4A
   728  00004B                     	ds	1
   729  00004C                     ___fttol@lval:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x4B
   733  00004C                     	ds	4
   734  000050                     ___fttol@exp1:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x4F
   738  000050                     	ds	1
   739  000051                     ?___lltoft:
   740                           	opt stack 0
   741  000051                     ___lltoft@c:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x50
   745  000051                     	ds	4
   746  000055                     ??___lltoft:
   747                           
   748                           ; 0 bytes @ 0x54
   749  000055                     	ds	4
   750  000059                     ___lltoft@exp:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x58
   754  000059                     	ds	1
   755  00005A                     ?___ftneg:
   756                           	opt stack 0
   757  00005A                     ___ftneg@f1:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0x59
   761  00005A                     	ds	3
   762  00005D                     ?___ftadd:
   763                           	opt stack 0
   764  00005D                     ___ftadd@f1:
   765                           	opt stack 0
   766                           
   767                           ; 3 bytes @ 0x5C
   768  00005D                     	ds	3
   769  000060                     ___ftadd@f2:
   770                           	opt stack 0
   771                           
   772                           ; 3 bytes @ 0x5F
   773  000060                     	ds	3
   774  000063                     ??___ftadd:
   775                           
   776                           ; 0 bytes @ 0x62
   777  000063                     	ds	5
   778  000068                     ___ftadd@sign:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x67
   782  000068                     	ds	1
   783  000069                     ___ftadd@exp2:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x68
   787  000069                     	ds	1
   788  00006A                     ___ftadd@exp1:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x69
   792  00006A                     	ds	1
   793  00006B                     ??___ftge:
   794                           
   795                           ; 0 bytes @ 0x6A
   796  00006B                     	ds	3
   797                           tblptru	equ	0xFF8
   798                           
   799 ;;
   800 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   801 ;;
   802 ;; *************** function _main *****************
   803 ;; Defined at:
   804 ;;		line 48 in file "HW8.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;		None
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  buffer         16   62[BANK0 ] unsigned char [16]
   809 ;;  voltage         3   78[BANK0 ] float 
   810 ;;  adc_result      2   81[BANK0 ] unsigned int 
   811 ;; Return value:  Size  Location     Type
   812 ;;		None               void
   813 ;; Registers used:
   814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   820 ;;      Params:         0       0       0       0       0       0       0
   821 ;;      Locals:         0      21       0       0       0       0       0
   822 ;;      Temps:          0       4       0       0       0       0       0
   823 ;;      Totals:         0      25       0       0       0       0       0
   824 ;;Total ram usage:       25 bytes
   825 ;; Hardware stack levels required when called:    6
   826 ;; This function calls:
   827 ;;		_init_ADCM
   828 ;;		_init_LCD
   829 ;;		_load_string
   830 ;;		_send_data
   831 ;;		_sprintf
   832 ;;		_delayms
   833 ;;		___ftdiv
   834 ;;		___ftmul
   835 ;;		___lwtoft
   836 ;; This function is called by:
   837 ;;		Startup code after reset
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text0
   842  001FB6                     __ptext0:
   843                           	opt stack 0
   844  001FB6                     _main:
   845                           	opt stack 24
   846                           
   847                           ;HW8.c: 49: unsigned int adc_result = 0;
   848                           
   849                           ;incstack = 0
   850                           ;incstack = 0
   851  001FB6  0E00               	movlw	0
   852  001FB8  0100               	movlb	0	; () banked
   853  001FBA  0100               	movlb	0	; () banked
   854  001FBC  6FD2               	movwf	(main@adc_result+1)& (0+255),b
   855  001FBE  0E00               	movlw	0
   856  001FC0  0100               	movlb	0	; () banked
   857  001FC2  6FD1               	movwf	main@adc_result& (0+255),b
   858                           
   859                           ; BSR set to: 0
   860                           ;HW8.c: 50: float voltage;
   861                           ;HW8.c: 51: unsigned char buffer[16];
   862                           ;HW8.c: 52: init_ADCM();
   863  001FC4  EC89  F017         	call	_init_ADCM	;wreg free
   864                           
   865                           ;HW8.c: 54: init_LCD();
   866  001FC8  EC9C  F012         	call	_init_LCD	;wreg free
   867                           
   868                           ;HW8.c: 55: INTCONbits.GIE = 1;
   869  001FCC  8EF2               	bsf	intcon,7,c	;volatile
   870                           
   871                           ;HW8.c: 56: INTCONbits.PEIE = 1;
   872  001FCE  8CF2               	bsf	intcon,6,c	;volatile
   873                           
   874                           ;HW8.c: 57: PIE1bits.ADIE = 1;
   875  001FD0  8C9D               	bsf	3997,6,c	;volatile
   876                           
   877                           ;HW8.c: 58: PIR1bits.ADIF = 0;
   878  001FD2  9C9E               	bcf	3998,6,c	;volatile
   879  001FD4                     l4937:
   880                           
   881                           ;HW8.c: 62: {
   882                           ;HW8.c: 63: ADCON0bits.GO_NOT_DONE = 1;
   883  001FD4  82C2               	bsf	4034,1,c	;volatile
   884                           
   885                           ;HW8.c: 64: if(flag)
   886  001FD6  0100               	movlb	0	; () banked
   887  001FD8  0100               	movlb	0	; () banked
   888  001FDA  51D4               	movf	(_flag+1)& (0+255),w,b	;volatile
   889  001FDC  11D3               	iorwf	_flag& (0+255),w,b	;volatile
   890  001FDE  B4D8               	btfsc	status,2,c
   891  001FE0  D7F9               	goto	l4937
   892                           
   893                           ; BSR set to: 0
   894                           ;HW8.c: 65: {
   895                           ;HW8.c: 66: flag = 0;
   896  001FE2  0E00               	movlw	0
   897  001FE4  0100               	movlb	0	; () banked
   898  001FE6  0100               	movlb	0	; () banked
   899  001FE8  6FD4               	movwf	(_flag+1)& (0+255),b	;volatile
   900  001FEA  0E00               	movlw	0
   901  001FEC  0100               	movlb	0	; () banked
   902  001FEE  6FD3               	movwf	_flag& (0+255),b	;volatile
   903                           
   904                           ;HW8.c: 72: adc_result = (((unsigned int)ADRESH)<<8)|(ADRESL);
   905  001FF0  50C4               	movf	4036,w,c	;volatile
   906  001FF2  0100               	movlb	0	; () banked
   907  001FF4  0100               	movlb	0	; () banked
   908  001FF6  6FD2               	movwf	(main@adc_result+1)& (0+255),b
   909  001FF8  50C3               	movf	4035,w,c	;volatile
   910  001FFA  0100               	movlb	0	; () banked
   911  001FFC  6FD1               	movwf	main@adc_result& (0+255),b
   912                           
   913                           ; BSR set to: 0
   914                           ;HW8.c: 77: voltage = (adc_result*5.0)/1023;
   915  001FFE  0E00               	movlw	0
   916  002000  6E28               	movwf	?___ftmul+3,c
   917  002002  0EA0               	movlw	160
   918  002004  6E29               	movwf	?___ftmul+4,c
   919  002006  0E40               	movlw	64
   920  002008  6E2A               	movwf	?___ftmul+5,c
   921  00200A  C0D1  F017         	movff	main@adc_result,?___lwtoft
   922  00200E  C0D2  F018         	movff	main@adc_result+1,?___lwtoft+1
   923  002012  EC27  F017         	call	___lwtoft	;wreg free
   924  002016  C019  F027         	movff	?___lwtoft+2,?___ftmul+2
   925  00201A  C018  F026         	movff	?___lwtoft+1,?___ftmul+1
   926  00201E  C017  F025         	movff	?___lwtoft,?___ftmul
   927  002022  EC1B  F011         	call	___ftmul	;wreg free
   928  002026  C027  F038         	movff	?___ftmul+2,?___ftdiv+2
   929  00202A  C026  F037         	movff	?___ftmul+1,?___ftdiv+1
   930  00202E  C025  F036         	movff	?___ftmul,?___ftdiv
   931  002032  0EC0               	movlw	192
   932  002034  6E39               	movwf	?___ftdiv+3,c
   933  002036  0E7F               	movlw	127
   934  002038  6E3A               	movwf	?___ftdiv+4,c
   935  00203A  0E44               	movlw	68
   936  00203C  6E3B               	movwf	?___ftdiv+5,c
   937  00203E  ECA3  F011         	call	___ftdiv	;wreg free
   938  002042  C038  F0D0         	movff	?___ftdiv+2,main@voltage+2
   939  002046  C037  F0CF         	movff	?___ftdiv+1,main@voltage+1
   940  00204A  C036  F0CE         	movff	?___ftdiv,main@voltage
   941                           
   942                           ;HW8.c: 80: load_string("RA0 Voltage : \0");
   943  00204E  0E06               	movlw	high STR_1
   944  002050  6E1B               	movwf	?_load_string+1,c
   945  002052  0E76               	movlw	low STR_1
   946  002054  6E1A               	movwf	?_load_string,c
   947  002056  EC19  F016         	call	_load_string	;wreg free
   948                           
   949                           ;HW8.c: 81: send_data(0XC0,1,0,1);
   950  00205A  0100               	movlb	0	; () banked
   951  00205C  6FBA               	movwf	??_main& (0+255),b
   952  00205E  0EC0               	movlw	192
   953  002060  6E12               	movwf	?_send_data,c
   954  002062  0100               	movlb	0	; () banked
   955  002064  51BA               	movf	??_main& (0+255),w,b
   956  002066  0100               	movlb	0	; () banked
   957  002068  6FBB               	movwf	(??_main+1)& (0+255),b
   958  00206A  0E01               	movlw	1
   959  00206C  6E13               	movwf	?_send_data+1,c
   960  00206E  0100               	movlb	0	; () banked
   961  002070  51BB               	movf	(??_main+1)& (0+255),w,b
   962  002072  0100               	movlb	0	; () banked
   963  002074  6FBC               	movwf	(??_main+2)& (0+255),b
   964  002076  0E00               	movlw	0
   965  002078  6E14               	movwf	?_send_data+2,c
   966  00207A  0100               	movlb	0	; () banked
   967  00207C  51BC               	movf	(??_main+2)& (0+255),w,b
   968  00207E  0100               	movlb	0	; () banked
   969  002080  6FBD               	movwf	(??_main+3)& (0+255),b
   970  002082  0E01               	movlw	1
   971  002084  6E15               	movwf	?_send_data+3,c
   972  002086  0100               	movlb	0	; () banked
   973  002088  51BD               	movf	(??_main+3)& (0+255),w,b
   974  00208A  EC52  F014         	call	_send_data	;wreg free
   975                           
   976                           ;HW8.c: 82: sprintf(buffer, "%.3g\0", voltage );
   977  00208E  0100               	movlb	0	; () banked
   978  002090  0E00               	movlw	high main@buffer
   979  002092  0100               	movlb	0	; () banked
   980  002094  0100               	movlb	0	; () banked
   981  002096  6F8C               	movwf	(?_sprintf+1)& (0+255),b
   982  002098  0100               	movlb	0	; () banked
   983  00209A  0EBE               	movlw	low main@buffer
   984  00209C  0100               	movlb	0	; () banked
   985  00209E  6F8B               	movwf	?_sprintf& (0+255),b
   986  0020A0  0E06               	movlw	high STR_2
   987  0020A2  0100               	movlb	0	; () banked
   988  0020A4  0100               	movlb	0	; () banked
   989  0020A6  6F8E               	movwf	(?_sprintf+3)& (0+255),b
   990  0020A8  0E86               	movlw	low STR_2
   991  0020AA  0100               	movlb	0	; () banked
   992  0020AC  6F8D               	movwf	(?_sprintf+2)& (0+255),b
   993  0020AE  C0CE  F08F         	movff	main@voltage,?_sprintf+4
   994  0020B2  C0CF  F090         	movff	main@voltage+1,?_sprintf+5
   995  0020B6  C0D0  F091         	movff	main@voltage+2,?_sprintf+6
   996  0020BA  EC47  F003         	call	_sprintf	;wreg free
   997                           
   998                           ;HW8.c: 83: load_string(buffer);
   999  0020BE  0100               	movlb	0	; () banked
  1000  0020C0  0E00               	movlw	high main@buffer
  1001  0020C2  6E1B               	movwf	?_load_string+1,c
  1002  0020C4  0100               	movlb	0	; () banked
  1003  0020C6  0EBE               	movlw	low main@buffer
  1004  0020C8  6E1A               	movwf	?_load_string,c
  1005  0020CA  EC19  F016         	call	_load_string	;wreg free
  1006                           
  1007                           ;HW8.c: 84: delayms(200);
  1008  0020CE  0100               	movlb	0	; () banked
  1009  0020D0  6FBA               	movwf	??_main& (0+255),b
  1010  0020D2  0EC8               	movlw	200
  1011  0020D4  6E0F               	movwf	?_delayms,c
  1012  0020D6  0100               	movlb	0	; () banked
  1013  0020D8  51BA               	movf	??_main& (0+255),w,b
  1014  0020DA  EC77  F017         	call	_delayms	;wreg free
  1015                           
  1016                           ;HW8.c: 85: send_data(0X01,1,1,1);
  1017  0020DE  0100               	movlb	0	; () banked
  1018  0020E0  6FBA               	movwf	??_main& (0+255),b
  1019  0020E2  0E01               	movlw	1
  1020  0020E4  6E12               	movwf	?_send_data,c
  1021  0020E6  0100               	movlb	0	; () banked
  1022  0020E8  51BA               	movf	??_main& (0+255),w,b
  1023  0020EA  0100               	movlb	0	; () banked
  1024  0020EC  6FBB               	movwf	(??_main+1)& (0+255),b
  1025  0020EE  0E01               	movlw	1
  1026  0020F0  6E13               	movwf	?_send_data+1,c
  1027  0020F2  0100               	movlb	0	; () banked
  1028  0020F4  51BB               	movf	(??_main+1)& (0+255),w,b
  1029  0020F6  0100               	movlb	0	; () banked
  1030  0020F8  6FBC               	movwf	(??_main+2)& (0+255),b
  1031  0020FA  0E01               	movlw	1
  1032  0020FC  6E14               	movwf	?_send_data+2,c
  1033  0020FE  0100               	movlb	0	; () banked
  1034  002100  51BC               	movf	(??_main+2)& (0+255),w,b
  1035  002102  0100               	movlb	0	; () banked
  1036  002104  6FBD               	movwf	(??_main+3)& (0+255),b
  1037  002106  0E01               	movlw	1
  1038  002108  6E15               	movwf	?_send_data+3,c
  1039  00210A  0100               	movlb	0	; () banked
  1040  00210C  51BD               	movf	(??_main+3)& (0+255),w,b
  1041  00210E  EC52  F014         	call	_send_data	;wreg free
  1042  002112  D760               	goto	l4937
  1043  002114                     __end_of_main:
  1044                           	opt stack 0
  1045                           tblptru	equ	0xFF8
  1046                           intcon	equ	0xFF2
  1047                           status	equ	0xFD8
  1048                           
  1049 ;; *************** function ___lwtoft *****************
  1050 ;; Defined at:
  1051 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtoft.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  c               2   22[COMRAM] unsigned int 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;		None
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  3   22[COMRAM] float 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0, cstack
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1065 ;;      Params:         3       0       0       0       0       0       0
  1066 ;;      Locals:         0       0       0       0       0       0       0
  1067 ;;      Temps:          2       0       0       0       0       0       0
  1068 ;;      Totals:         5       0       0       0       0       0       0
  1069 ;;Total ram usage:        5 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    2
  1072 ;; This function calls:
  1073 ;;		___ftpack
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text1
  1080  002E4E                     __ptext1:
  1081                           	opt stack 0
  1082  002E4E                     ___lwtoft:
  1083                           	opt stack 27
  1084                           
  1085                           ;incstack = 0
  1086                           ;incstack = 0
  1087  002E4E  C017  F00F         	movff	___lwtoft@c,?___ftpack
  1088  002E52  C018  F010         	movff	___lwtoft@c+1,?___ftpack+1
  1089  002E56  6A11               	clrf	?___ftpack+2,c
  1090  002E58  6E1A               	movwf	??___lwtoft& (0+255),c
  1091  002E5A  0E8E               	movlw	142
  1092  002E5C  6E12               	movwf	?___ftpack+3,c
  1093  002E5E  501A               	movf	??___lwtoft& (0+255),w,c
  1094  002E60  6E1B               	movwf	(??___lwtoft+1)& (0+255),c
  1095  002E62  0E00               	movlw	0
  1096  002E64  6E13               	movwf	?___ftpack+4,c
  1097  002E66  501B               	movf	(??___lwtoft+1)& (0+255),w,c
  1098  002E68  ECF6  F013         	call	___ftpack	;wreg free
  1099  002E6C  C011  F019         	movff	?___ftpack+2,?___lwtoft+2
  1100  002E70  C010  F018         	movff	?___ftpack+1,?___lwtoft+1
  1101  002E74  C00F  F017         	movff	?___ftpack,?___lwtoft
  1102  002E78  0012               	return	
  1103  002E7A                     __end_of___lwtoft:
  1104                           	opt stack 0
  1105                           tblptru	equ	0xFF8
  1106                           intcon	equ	0xFF2
  1107                           status	equ	0xFD8
  1108                           
  1109 ;; *************** function _sprintf *****************
  1110 ;; Defined at:
  1111 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  sp              2   11[BANK0 ] PTR unsigned char 
  1114 ;;		 -> main@buffer(16), 
  1115 ;;  f               2   13[BANK0 ] PTR const unsigned char 
  1116 ;;		 -> STR_2(6), 
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  vd              2   33[BANK0 ] unsigned int 
  1119 ;;  temp            3   37[BANK0 ] unsigned int 
  1120 ;;  vd              2   35[BANK0 ] unsigned int 
  1121 ;;  _val            5   45[BANK0 ] struct .
  1122 ;;  fval            3   54[BANK0 ] struct .
  1123 ;;  integ           3   40[BANK0 ] struct .
  1124 ;;  ival            3    0        struct .
  1125 ;;  prec            2   52[BANK0 ] int 
  1126 ;;  exp             2   50[BANK0 ] int 
  1127 ;;  flag            2   43[BANK0 ] unsigned short 
  1128 ;;  ap              2   31[BANK0 ] PTR void [1]
  1129 ;;		 -> ?_sprintf(2), 
  1130 ;;  width           2    0        int 
  1131 ;;  c               1   57[BANK0 ] char 
  1132 ;;  d               1    0        unsigned char 
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  2   11[BANK0 ] int 
  1135 ;; Registers used:
  1136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1142 ;;      Params:         0       7       0       0       0       0       0
  1143 ;;      Locals:         0      34       0       0       0       0       0
  1144 ;;      Temps:          0       6       0       0       0       0       0
  1145 ;;      Totals:         0      47       0       0       0       0       0
  1146 ;;Total ram usage:       47 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    5
  1149 ;; This function calls:
  1150 ;;		_fround
  1151 ;;		_scale
  1152 ;;		_isdigit
  1153 ;;		__tdiv_to_l_
  1154 ;;		__div_to_l_
  1155 ;;		___asftadd
  1156 ;;		___ftadd
  1157 ;;		___asftdiv
  1158 ;;		___asftmul
  1159 ;;		___ftmul
  1160 ;;		___asftsub
  1161 ;;		___awdiv
  1162 ;;		___awmod
  1163 ;;		___ftge
  1164 ;;		___ftneg
  1165 ;;		___fttol
  1166 ;;		___lldiv
  1167 ;;		___llmod
  1168 ;;		___lltoft
  1169 ;;		___lwmod
  1170 ;;		___wmul
  1171 ;; This function is called by:
  1172 ;;		_main
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text2
  1177  00068E                     __ptext2:
  1178                           	opt stack 0
  1179  00068E                     _sprintf:
  1180                           	opt stack 24
  1181                           
  1182                           ;doprnt.c: 494: va_list ap;
  1183                           ;doprnt.c: 499: signed char c;
  1184                           ;doprnt.c: 501: int width;
  1185                           ;doprnt.c: 504: int prec;
  1186                           ;doprnt.c: 508: unsigned short flag;
  1187                           ;doprnt.c: 515: char d;
  1188                           ;doprnt.c: 516: double fval, integ;
  1189                           ;doprnt.c: 517: int exp;
  1190                           ;doprnt.c: 518: double ival;
  1191                           ;doprnt.c: 519: union {
  1192                           ;doprnt.c: 520: unsigned long _val;
  1193                           ;doprnt.c: 521: struct {
  1194                           ;doprnt.c: 522: const char * _cp;
  1195                           ;doprnt.c: 523: unsigned _len;
  1196                           ;doprnt.c: 524: } _str;
  1197                           ;doprnt.c: 525: } _val;
  1198                           ;doprnt.c: 542: *ap = __va_start();
  1199                           
  1200                           ;incstack = 0
  1201                           ;incstack = 0
  1202  00068E  0100               	movlb	0	; () banked
  1203  000690  0E00               	movlw	high (?_sprintf+4)
  1204  000692  0100               	movlb	0	; () banked
  1205  000694  0100               	movlb	0	; () banked
  1206  000696  6FA0               	movwf	(sprintf@ap+1)& (0+255),b
  1207  000698  0100               	movlb	0	; () banked
  1208  00069A  0E8F               	movlw	low (?_sprintf+4)
  1209  00069C  0100               	movlb	0	; () banked
  1210  00069E  6F9F               	movwf	sprintf@ap& (0+255),b
  1211                           
  1212                           ;doprnt.c: 545: while(c = *f++) {
  1213  0006A0  EF74  F00B         	goto	l5301
  1214  0006A4                     l4959:
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;doprnt.c: 547: if(c != '%')
  1218  0006A4  0100               	movlb	0	; () banked
  1219  0006A6  0100               	movlb	0	; () banked
  1220  0006A8  51B9               	movf	sprintf@c& (0+255),w,b
  1221  0006AA  0A25               	xorlw	37
  1222  0006AC  B4D8               	btfsc	status,2,c
  1223  0006AE  D009               	goto	l4965
  1224                           
  1225                           ; BSR set to: 0
  1226                           ;doprnt.c: 549: {
  1227                           ;doprnt.c: 550: ((*sp++ = (c)));
  1228  0006B0  C08B  FFD9         	movff	sprintf@sp,fsr2l
  1229  0006B4  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  1230  0006B8  0100               	movlb	0	; () banked
  1231  0006BA  C0B9  FFDF         	movff	sprintf@c,indf2
  1232  0006BE  EF70  F00B         	goto	L8
  1233  0006C2                     l4965:
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;doprnt.c: 552: }
  1237                           ;doprnt.c: 557: flag = 0;
  1238  0006C2  0E00               	movlw	0
  1239  0006C4  0100               	movlb	0	; () banked
  1240  0006C6  0100               	movlb	0	; () banked
  1241  0006C8  6FAC               	movwf	(sprintf@flag+1)& (0+255),b
  1242  0006CA  0E00               	movlw	0
  1243  0006CC  0100               	movlb	0	; () banked
  1244  0006CE  6FAB               	movwf	sprintf@flag& (0+255),b
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;doprnt.c: 620: if(*f == '.') {
  1248  0006D0  0100               	movlb	0	; () banked
  1249  0006D2  C08D  FFF6         	movff	sprintf@f,tblptrl
  1250  0006D6  0100               	movlb	0	; () banked
  1251  0006D8  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  1252  0006DC  0008               	tblrd		*
  1253  0006DE  50F5               	movf	tablat,w,c
  1254  0006E0  0A2E               	xorlw	46
  1255  0006E2  A4D8               	btfss	status,2,c
  1256  0006E4  D03F               	goto	l4979
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;doprnt.c: 621: flag |= 0x4000;
  1260  0006E6  0100               	movlb	0	; () banked
  1261  0006E8  0100               	movlb	0	; () banked
  1262  0006EA  8DAC               	bsf	(sprintf@flag+1)& (0+255),6,b
  1263                           
  1264                           ;doprnt.c: 622: f++;
  1265  0006EC  0100               	movlb	0	; () banked
  1266  0006EE  0100               	movlb	0	; () banked
  1267  0006F0  4B8D               	infsnz	sprintf@f& (0+255),f,b
  1268  0006F2  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;doprnt.c: 629: {
  1272                           ;doprnt.c: 630: prec = 0;
  1273  0006F4  0E00               	movlw	0
  1274  0006F6  0100               	movlb	0	; () banked
  1275  0006F8  0100               	movlb	0	; () banked
  1276  0006FA  6FB5               	movwf	(sprintf@prec+1)& (0+255),b
  1277  0006FC  0E00               	movlw	0
  1278  0006FE  0100               	movlb	0	; () banked
  1279  000700  6FB4               	movwf	sprintf@prec& (0+255),b
  1280                           
  1281                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  1282  000702  D022               	goto	l4977
  1283  000704                     l4973:
  1284                           
  1285                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  1286  000704  C0B4  F01F         	movff	sprintf@prec,?___wmul
  1287  000708  C0B5  F020         	movff	sprintf@prec+1,?___wmul+1
  1288  00070C  0E00               	movlw	0
  1289  00070E  6E22               	movwf	?___wmul+3,c
  1290  000710  0E0A               	movlw	10
  1291  000712  6E21               	movwf	?___wmul+2,c
  1292  000714  EC0A  F017         	call	___wmul	;wreg free
  1293  000718  0100               	movlb	0	; () banked
  1294  00071A  C08D  FFF6         	movff	sprintf@f,tblptrl
  1295  00071E  0100               	movlb	0	; () banked
  1296  000720  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  1297  000724  0008               	tblrd		*
  1298  000726  50F5               	movf	tablat,w,c
  1299  000728  261F               	addwf	?___wmul,f,c
  1300  00072A  0E00               	movlw	0
  1301  00072C  2220               	addwfc	?___wmul+1,f,c
  1302  00072E  0ED0               	movlw	208
  1303  000730  241F               	addwf	?___wmul,w,c
  1304  000732  0100               	movlb	0	; () banked
  1305  000734  0100               	movlb	0	; () banked
  1306  000736  6FB4               	movwf	sprintf@prec& (0+255),b
  1307  000738  0EFF               	movlw	255
  1308  00073A  2020               	addwfc	?___wmul+1,w,c
  1309  00073C  0100               	movlb	0	; () banked
  1310  00073E  6FB5               	movwf	(sprintf@prec+1)& (0+255),b
  1311                           
  1312                           ; BSR set to: 0
  1313  000740  0100               	movlb	0	; () banked
  1314  000742  0100               	movlb	0	; () banked
  1315  000744  4B8D               	infsnz	sprintf@f& (0+255),f,b
  1316  000746  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  1317  000748                     l4977:
  1318                           
  1319                           ; BSR set to: 0
  1320  000748  0100               	movlb	0	; () banked
  1321  00074A  C08D  FFF6         	movff	sprintf@f,tblptrl
  1322  00074E  0100               	movlb	0	; () banked
  1323  000750  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  1324  000754  0008               	tblrd		*
  1325  000756  CFF5 F00F          	movff	tablat,?_isdigit
  1326  00075A  EC65  F017         	call	_isdigit	;wreg free
  1327  00075E  A0D8               	btfss	status,0,c
  1328  000760  D010               	goto	l4987
  1329  000762  D7D0               	goto	l4973
  1330  000764                     l4979:
  1331                           
  1332                           ;doprnt.c: 635: prec = 0;
  1333  000764  0E00               	movlw	0
  1334  000766  0100               	movlb	0	; () banked
  1335  000768  0100               	movlb	0	; () banked
  1336  00076A  6FB5               	movwf	(sprintf@prec+1)& (0+255),b
  1337  00076C  0E00               	movlw	0
  1338  00076E  0100               	movlb	0	; () banked
  1339  000770  6FB4               	movwf	sprintf@prec& (0+255),b
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;doprnt.c: 637: flag |= 0x1000;
  1343  000772  0100               	movlb	0	; () banked
  1344  000774  0100               	movlb	0	; () banked
  1345  000776  89AC               	bsf	(sprintf@flag+1)& (0+255),4,b
  1346  000778  D004               	goto	l4987
  1347  00077A                     l4983:
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;doprnt.c: 692: flag |= 0x200;
  1351  00077A  0100               	movlb	0	; () banked
  1352  00077C  0100               	movlb	0	; () banked
  1353  00077E  83AC               	bsf	(sprintf@flag+1)& (0+255),1,b
  1354                           
  1355                           ;doprnt.c: 693: break;
  1356  000780  D019               	goto	l4989
  1357  000782                     l4987:
  1358  000782  0100               	movlb	0	; () banked
  1359  000784  C08D  FFF6         	movff	sprintf@f,tblptrl
  1360  000788  0100               	movlb	0	; () banked
  1361  00078A  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  1362  00078E  0100               	movlb	0	; () banked
  1363  000790  0100               	movlb	0	; () banked
  1364  000792  4B8D               	infsnz	sprintf@f& (0+255),f,b
  1365  000794  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  1366  000796  0008               	tblrd		*
  1367  000798  0100               	movlb	0	; () banked
  1368  00079A  CFF5 F0B9          	movff	tablat,sprintf@c
  1369  00079E  0100               	movlb	0	; () banked
  1370  0007A0  51B9               	movf	sprintf@c& (0+255),w,b
  1371                           
  1372                           ; Switch size 1, requested type "space"
  1373                           ; Number of cases is 2, Range of values is 0 to 103
  1374                           ; switch strategies available:
  1375                           ; Name         Instructions Cycles
  1376                           ; simple_byte            7     4 (average)
  1377                           ;	Chosen strategy is simple_byte
  1378  0007A2  0A00               	xorlw	0	; case 0
  1379  0007A4  B4D8               	btfsc	status,2,c
  1380  0007A6  EF86  F00B         	goto	l5303
  1381  0007AA  0A67               	xorlw	103	; case 103
  1382  0007AC  B4D8               	btfsc	status,2,c
  1383  0007AE  D7E5               	goto	l4983
  1384  0007B0  EF74  F00B         	goto	l5301
  1385  0007B4                     l4989:
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;doprnt.c: 834: if(flag & (0x700)) {
  1389  0007B4  0E07               	movlw	7
  1390  0007B6  0100               	movlb	0	; () banked
  1391  0007B8  0100               	movlb	0	; () banked
  1392  0007BA  15AC               	andwf	(sprintf@flag+1)& (0+255),w,b
  1393  0007BC  B4D8               	btfsc	status,2,c
  1394  0007BE  EF10  F00B         	goto	l5281
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;doprnt.c: 836: if(flag & 0x1000)
  1398  0007C2  0100               	movlb	0	; () banked
  1399  0007C4  0100               	movlb	0	; () banked
  1400  0007C6  A9AC               	btfss	(sprintf@flag+1)& (0+255),4,b
  1401  0007C8  D007               	goto	l4995
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;doprnt.c: 838: prec = 6;
  1405  0007CA  0E00               	movlw	0
  1406  0007CC  0100               	movlb	0	; () banked
  1407  0007CE  0100               	movlb	0	; () banked
  1408  0007D0  6FB5               	movwf	(sprintf@prec+1)& (0+255),b
  1409  0007D2  0E06               	movlw	6
  1410  0007D4  0100               	movlb	0	; () banked
  1411  0007D6  6FB4               	movwf	sprintf@prec& (0+255),b
  1412  0007D8                     l4995:
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1416  0007D8  C09F  FFD9         	movff	sprintf@ap,fsr2l
  1417  0007DC  C0A0  FFDA         	movff	sprintf@ap+1,fsr2h
  1418  0007E0  0100               	movlb	0	; () banked
  1419  0007E2  CFDE F0B6          	movff	postinc2,sprintf@fval
  1420  0007E6  0100               	movlb	0	; () banked
  1421  0007E8  CFDE F0B7          	movff	postinc2,sprintf@fval+1
  1422  0007EC  0100               	movlb	0	; () banked
  1423  0007EE  CFDD F0B8          	movff	postdec2,sprintf@fval+2
  1424                           
  1425                           ; BSR set to: 0
  1426  0007F2  0E03               	movlw	3
  1427  0007F4  0100               	movlb	0	; () banked
  1428  0007F6  0100               	movlb	0	; () banked
  1429  0007F8  279F               	addwf	sprintf@ap& (0+255),f,b
  1430  0007FA  0E00               	movlw	0
  1431  0007FC  0100               	movlb	0	; () banked
  1432  0007FE  23A0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;doprnt.c: 840: if(fval < 0.0) {
  1436  000800  0100               	movlb	0	; () banked
  1437  000802  0100               	movlb	0	; () banked
  1438  000804  51B8               	movf	(sprintf@fval+2)& (0+255),w,b
  1439  000806  0A80               	xorlw	128
  1440  000808  0F80               	addlw	128
  1441  00080A  E107               	bnz	u3435
  1442  00080C  0E00               	movlw	0
  1443  00080E  0100               	movlb	0	; () banked
  1444  000810  5DB7               	subwf	(sprintf@fval+1)& (0+255),w,b
  1445  000812  E103               	bnz	u3435
  1446  000814  0E00               	movlw	0
  1447  000816  0100               	movlb	0	; () banked
  1448  000818  5DB6               	subwf	sprintf@fval& (0+255),w,b
  1449  00081A                     u3435:
  1450  00081A  B0D8               	btfsc	status,0,c
  1451  00081C  D012               	goto	l5005
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;doprnt.c: 841: fval = -fval;
  1455  00081E  C0B6  F05A         	movff	sprintf@fval,?___ftneg
  1456  000822  C0B7  F05B         	movff	sprintf@fval+1,?___ftneg+1
  1457  000826  C0B8  F05C         	movff	sprintf@fval+2,?___ftneg+2
  1458  00082A  EC52  F017         	call	___ftneg	;wreg free
  1459  00082E  C05C  F0B8         	movff	?___ftneg+2,sprintf@fval+2
  1460  000832  C05B  F0B7         	movff	?___ftneg+1,sprintf@fval+1
  1461  000836  C05A  F0B6         	movff	?___ftneg,sprintf@fval
  1462                           
  1463                           ;doprnt.c: 842: flag |= 0x03;
  1464  00083A  0E03               	movlw	3
  1465  00083C  0100               	movlb	0	; () banked
  1466  00083E  0100               	movlb	0	; () banked
  1467  000840  13AB               	iorwf	sprintf@flag& (0+255),f,b
  1468  000842                     l5005:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;doprnt.c: 843: }
  1472                           ;doprnt.c: 844: exp = 0;
  1473  000842  0E00               	movlw	0
  1474  000844  0100               	movlb	0	; () banked
  1475  000846  0100               	movlb	0	; () banked
  1476  000848  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  1477  00084A  0E00               	movlw	0
  1478  00084C  0100               	movlb	0	; () banked
  1479  00084E  6FB2               	movwf	sprintf@exp& (0+255),b
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;doprnt.c: 845: if( fval!=0) {
  1483  000850  0E7F               	movlw	127
  1484  000852  0100               	movlb	0	; () banked
  1485  000854  0100               	movlb	0	; () banked
  1486  000856  15B8               	andwf	(sprintf@fval+2)& (0+255),w,b
  1487  000858  0100               	movlb	0	; () banked
  1488  00085A  11B7               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1489  00085C  0100               	movlb	0	; () banked
  1490  00085E  11B6               	iorwf	sprintf@fval& (0+255),w,b
  1491  000860  B4D8               	btfsc	status,2,c
  1492  000862  D0A5               	goto	l5033
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1496  000864  0E82               	movlw	130
  1497  000866  0100               	movlb	0	; () banked
  1498  000868  6F92               	movwf	??_sprintf& (0+255),b
  1499  00086A  0EFF               	movlw	255
  1500  00086C  6F93               	movwf	(??_sprintf+1)& (0+255),b
  1501  00086E  0100               	movlb	0	; () banked
  1502  000870  C0B6  F094         	movff	sprintf@fval,??_sprintf+2
  1503  000874  0100               	movlb	0	; () banked
  1504  000876  C0B7  F095         	movff	sprintf@fval+1,??_sprintf+3
  1505  00087A  0100               	movlb	0	; () banked
  1506  00087C  C0B8  F096         	movff	sprintf@fval+2,??_sprintf+4
  1507  000880  0100               	movlb	0	; () banked
  1508  000882  C0B9  F097         	movff	sprintf@fval+3,??_sprintf+5
  1509  000886  0E10               	movlw	16
  1510  000888  D006               	goto	u3450
  1511  00088A                     u3455:
  1512  00088A  0100               	movlb	0	; () banked
  1513  00088C  90D8               	bcf	status,0,c
  1514  00088E  3397               	rrcf	(??_sprintf+5)& (0+255),f,b
  1515  000890  3396               	rrcf	(??_sprintf+4)& (0+255),f,b
  1516  000892  3395               	rrcf	(??_sprintf+3)& (0+255),f,b
  1517  000894  3394               	rrcf	(??_sprintf+2)& (0+255),f,b
  1518  000896                     u3450:
  1519  000896  2EE8               	decfsz	wreg,f,c
  1520  000898  D7F8               	goto	u3455
  1521  00089A  0100               	movlb	0	; () banked
  1522  00089C  5194               	movf	(??_sprintf+2)& (0+255),w,b
  1523  00089E  0100               	movlb	0	; () banked
  1524  0008A0  2592               	addwf	??_sprintf& (0+255),w,b
  1525  0008A2  0100               	movlb	0	; () banked
  1526  0008A4  0100               	movlb	0	; () banked
  1527  0008A6  6FB2               	movwf	sprintf@exp& (0+255),b
  1528  0008A8  0100               	movlb	0	; () banked
  1529  0008AA  0100               	movlb	0	; () banked
  1530  0008AC  0E00               	movlw	0
  1531  0008AE  2193               	addwfc	(??_sprintf+1)& (0+255),w,b
  1532  0008B0  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;doprnt.c: 847: exp--;
  1536  0008B2  0100               	movlb	0	; () banked
  1537  0008B4  0100               	movlb	0	; () banked
  1538  0008B6  07B2               	decf	sprintf@exp& (0+255),f,b
  1539  0008B8  A0D8               	btfss	status,0,c
  1540  0008BA  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;doprnt.c: 848: exp *= 3;
  1544  0008BC  C0B2  F01F         	movff	sprintf@exp,?___wmul
  1545  0008C0  C0B3  F020         	movff	sprintf@exp+1,?___wmul+1
  1546  0008C4  0E00               	movlw	0
  1547  0008C6  6E22               	movwf	?___wmul+3,c
  1548  0008C8  0E03               	movlw	3
  1549  0008CA  6E21               	movwf	?___wmul+2,c
  1550  0008CC  EC0A  F017         	call	___wmul	;wreg free
  1551  0008D0  C01F  F0B2         	movff	?___wmul,sprintf@exp
  1552  0008D4  C020  F0B3         	movff	?___wmul+1,sprintf@exp+1
  1553                           
  1554                           ;doprnt.c: 849: exp /= 10;
  1555  0008D8  C0B2  F016         	movff	sprintf@exp,?___awdiv
  1556  0008DC  C0B3  F017         	movff	sprintf@exp+1,?___awdiv+1
  1557  0008E0  0E00               	movlw	0
  1558  0008E2  6E19               	movwf	?___awdiv+3,c
  1559  0008E4  0E0A               	movlw	10
  1560  0008E6  6E18               	movwf	?___awdiv+2,c
  1561  0008E8  ECA6  F014         	call	___awdiv	;wreg free
  1562  0008EC  C016  F0B2         	movff	?___awdiv,sprintf@exp
  1563  0008F0  C017  F0B3         	movff	?___awdiv+1,sprintf@exp+1
  1564                           
  1565                           ;doprnt.c: 850: if(exp < 0)
  1566  0008F4  0100               	movlb	0	; () banked
  1567  0008F6  0100               	movlb	0	; () banked
  1568  0008F8  AFB3               	btfss	(sprintf@exp+1)& (0+255),7,b
  1569  0008FA  D005               	goto	l5021
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;doprnt.c: 851: exp--;
  1573  0008FC  0100               	movlb	0	; () banked
  1574  0008FE  0100               	movlb	0	; () banked
  1575  000900  07B2               	decf	sprintf@exp& (0+255),f,b
  1576  000902  A0D8               	btfss	status,0,c
  1577  000904  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  1578  000906                     l5021:
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;doprnt.c: 855: integ = scale(-exp);
  1582  000906  0100               	movlb	0	; () banked
  1583  000908  0100               	movlb	0	; () banked
  1584  00090A  51B2               	movf	sprintf@exp& (0+255),w,b
  1585  00090C  0800               	sublw	0
  1586  00090E  6E36               	movwf	?_scale,c
  1587  000910  EC8D  F00B         	call	_scale	;wreg free
  1588  000914  C038  F0AA         	movff	?_scale+2,sprintf@integ+2
  1589  000918  C037  F0A9         	movff	?_scale+1,sprintf@integ+1
  1590  00091C  C036  F0A8         	movff	?_scale,sprintf@integ
  1591                           
  1592                           ;doprnt.c: 856: integ *= fval;
  1593  000920  0100               	movlb	0	; () banked
  1594  000922  0E00               	movlw	high sprintf@integ
  1595  000924  0100               	movlb	0	; () banked
  1596  000926  0100               	movlb	0	; () banked
  1597  000928  6F81               	movwf	(?___asftmul+1)& (0+255),b
  1598  00092A  0100               	movlb	0	; () banked
  1599  00092C  0EA8               	movlw	low sprintf@integ
  1600  00092E  0100               	movlb	0	; () banked
  1601  000930  6F80               	movwf	?___asftmul& (0+255),b
  1602  000932  C0B6  F082         	movff	sprintf@fval,?___asftmul+2
  1603  000936  C0B7  F083         	movff	sprintf@fval+1,?___asftmul+3
  1604  00093A  C0B8  F084         	movff	sprintf@fval+2,?___asftmul+4
  1605  00093E  ECB0  F016         	call	___asftmul	;wreg free
  1606                           
  1607                           ;doprnt.c: 857: if(integ < 1.0)
  1608  000942  C0A8  F080         	movff	sprintf@integ,?___ftge
  1609  000946  C0A9  F081         	movff	sprintf@integ+1,?___ftge+1
  1610  00094A  C0AA  F082         	movff	sprintf@integ+2,?___ftge+2
  1611  00094E  0E00               	movlw	0
  1612  000950  0100               	movlb	0	; () banked
  1613  000952  0100               	movlb	0	; () banked
  1614  000954  6F83               	movwf	(?___ftge+3)& (0+255),b
  1615  000956  0E80               	movlw	128
  1616  000958  0100               	movlb	0	; () banked
  1617  00095A  0100               	movlb	0	; () banked
  1618  00095C  6F84               	movwf	(?___ftge+4)& (0+255),b
  1619  00095E  0E3F               	movlw	63
  1620  000960  0100               	movlb	0	; () banked
  1621  000962  0100               	movlb	0	; () banked
  1622  000964  6F85               	movwf	(?___ftge+5)& (0+255),b
  1623  000966  EC14  F013         	call	___ftge	;wreg free
  1624  00096A  B0D8               	btfsc	status,0,c
  1625  00096C  D006               	goto	l5029
  1626                           
  1627                           ;doprnt.c: 858: exp--;
  1628  00096E  0100               	movlb	0	; () banked
  1629  000970  0100               	movlb	0	; () banked
  1630  000972  07B2               	decf	sprintf@exp& (0+255),f,b
  1631  000974  A0D8               	btfss	status,0,c
  1632  000976  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  1633  000978  D01A               	goto	l5033
  1634  00097A                     l5029:
  1635                           
  1636                           ;doprnt.c: 859: else if(integ >= 10.0)
  1637  00097A  C0A8  F080         	movff	sprintf@integ,?___ftge
  1638  00097E  C0A9  F081         	movff	sprintf@integ+1,?___ftge+1
  1639  000982  C0AA  F082         	movff	sprintf@integ+2,?___ftge+2
  1640  000986  0E00               	movlw	0
  1641  000988  0100               	movlb	0	; () banked
  1642  00098A  0100               	movlb	0	; () banked
  1643  00098C  6F83               	movwf	(?___ftge+3)& (0+255),b
  1644  00098E  0E20               	movlw	32
  1645  000990  0100               	movlb	0	; () banked
  1646  000992  0100               	movlb	0	; () banked
  1647  000994  6F84               	movwf	(?___ftge+4)& (0+255),b
  1648  000996  0E41               	movlw	65
  1649  000998  0100               	movlb	0	; () banked
  1650  00099A  0100               	movlb	0	; () banked
  1651  00099C  6F85               	movwf	(?___ftge+5)& (0+255),b
  1652  00099E  EC14  F013         	call	___ftge	;wreg free
  1653  0009A2  A0D8               	btfss	status,0,c
  1654  0009A4  D004               	goto	l5033
  1655                           
  1656                           ;doprnt.c: 860: exp++;
  1657  0009A6  0100               	movlb	0	; () banked
  1658  0009A8  0100               	movlb	0	; () banked
  1659  0009AA  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  1660  0009AC  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  1661  0009AE                     l5033:
  1662                           
  1663                           ;doprnt.c: 861: }
  1664                           ;doprnt.c: 863: if(exp <= 0)
  1665  0009AE  0100               	movlb	0	; () banked
  1666  0009B0  0100               	movlb	0	; () banked
  1667  0009B2  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  1668  0009B4  0A80               	xorlw	128
  1669  0009B6  0F80               	addlw	-128
  1670  0009B8  0E01               	movlw	1
  1671  0009BA  B4D8               	btfsc	status,2,c
  1672  0009BC  5DB2               	subwf	sprintf@exp& (0+255),w,b
  1673  0009BE  B0D8               	btfsc	status,0,c
  1674  0009C0  D009               	goto	l154
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;doprnt.c: 864: c = 1;
  1678  0009C2  0100               	movlb	0	; () banked
  1679  0009C4  6F92               	movwf	??_sprintf& (0+255),b
  1680  0009C6  0E01               	movlw	1
  1681  0009C8  0100               	movlb	0	; () banked
  1682  0009CA  0100               	movlb	0	; () banked
  1683  0009CC  6FB9               	movwf	sprintf@c& (0+255),b
  1684  0009CE  0100               	movlb	0	; () banked
  1685  0009D0  5192               	movf	??_sprintf& (0+255),w,b
  1686  0009D2  D002               	goto	l155
  1687  0009D4                     l154:
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;doprnt.c: 865: else
  1691                           ;doprnt.c: 866: c = exp;
  1692  0009D4  C0B2  F0B9         	movff	sprintf@exp,sprintf@c
  1693  0009D8                     l155:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;doprnt.c: 867: if(
  1697                           ;doprnt.c: 875: flag & 0x200 && (exp < -4 || exp >= (int)prec)
  1698                           ;doprnt.c: 877: ) {
  1699  0009D8  0100               	movlb	0	; () banked
  1700  0009DA  0100               	movlb	0	; () banked
  1701  0009DC  A3AC               	btfss	(sprintf@flag+1)& (0+255),1,b
  1702  0009DE  D2B6               	goto	l156
  1703                           
  1704                           ; BSR set to: 0
  1705  0009E0  0100               	movlb	0	; () banked
  1706  0009E2  0100               	movlb	0	; () banked
  1707  0009E4  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  1708  0009E6  0A80               	xorlw	128
  1709  0009E8  0F81               	addlw	-127
  1710  0009EA  0EFC               	movlw	252
  1711  0009EC  B4D8               	btfsc	status,2,c
  1712  0009EE  5DB2               	subwf	sprintf@exp& (0+255),w,b
  1713  0009F0  A0D8               	btfss	status,0,c
  1714  0009F2  D013               	goto	l5041
  1715                           
  1716                           ; BSR set to: 0
  1717  0009F4  0100               	movlb	0	; () banked
  1718  0009F6  0100               	movlb	0	; () banked
  1719  0009F8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  1720  0009FA  0A80               	xorlw	128
  1721  0009FC  0100               	movlb	0	; () banked
  1722  0009FE  6F92               	movwf	??_sprintf& (0+255),b
  1723  000A00  0100               	movlb	0	; () banked
  1724  000A02  51B4               	movf	sprintf@prec& (0+255),w,b
  1725  000A04  0100               	movlb	0	; () banked
  1726  000A06  0100               	movlb	0	; () banked
  1727  000A08  5DB2               	subwf	sprintf@exp& (0+255),w,b
  1728  000A0A  0100               	movlb	0	; () banked
  1729  000A0C  0100               	movlb	0	; () banked
  1730  000A0E  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  1731  000A10  0A80               	xorlw	128
  1732  000A12  0100               	movlb	0	; () banked
  1733  000A14  5992               	subwfb	??_sprintf& (0+255),w,b
  1734  000A16  A0D8               	btfss	status,0,c
  1735  000A18  D299               	goto	l156
  1736  000A1A                     l5041:
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 879: if(prec && flag & 0x200)
  1740  000A1A  0100               	movlb	0	; () banked
  1741  000A1C  0100               	movlb	0	; () banked
  1742  000A1E  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  1743  000A20  11B4               	iorwf	sprintf@prec& (0+255),w,b
  1744  000A22  B4D8               	btfsc	status,2,c
  1745  000A24  D009               	goto	l5047
  1746                           
  1747                           ; BSR set to: 0
  1748  000A26  0100               	movlb	0	; () banked
  1749  000A28  0100               	movlb	0	; () banked
  1750  000A2A  A3AC               	btfss	(sprintf@flag+1)& (0+255),1,b
  1751  000A2C  D005               	goto	l5047
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;doprnt.c: 880: prec--;
  1755  000A2E  0100               	movlb	0	; () banked
  1756  000A30  0100               	movlb	0	; () banked
  1757  000A32  07B4               	decf	sprintf@prec& (0+255),f,b
  1758  000A34  A0D8               	btfss	status,0,c
  1759  000A36  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  1760  000A38                     l5047:
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;doprnt.c: 882: if((unsigned)prec > (sizeof dpowers/sizeof dpowers[0]) - 2)
  1764  000A38  0E09               	movlw	9
  1765  000A3A  0100               	movlb	0	; () banked
  1766  000A3C  0100               	movlb	0	; () banked
  1767  000A3E  5DB4               	subwf	sprintf@prec& (0+255),w,b
  1768  000A40  0E00               	movlw	0
  1769  000A42  0100               	movlb	0	; () banked
  1770  000A44  59B5               	subwfb	(sprintf@prec+1)& (0+255),w,b
  1771  000A46  A0D8               	btfss	status,0,c
  1772  000A48  D009               	goto	l160
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;doprnt.c: 883: c = (sizeof dpowers/sizeof dpowers[0]) - 2;
  1776  000A4A  0100               	movlb	0	; () banked
  1777  000A4C  6F92               	movwf	??_sprintf& (0+255),b
  1778  000A4E  0E08               	movlw	8
  1779  000A50  0100               	movlb	0	; () banked
  1780  000A52  0100               	movlb	0	; () banked
  1781  000A54  6FB9               	movwf	sprintf@c& (0+255),b
  1782  000A56  0100               	movlb	0	; () banked
  1783  000A58  5192               	movf	??_sprintf& (0+255),w,b
  1784  000A5A  D002               	goto	l5051
  1785  000A5C                     l160:
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;doprnt.c: 884: else
  1789                           ;doprnt.c: 885: c = prec;
  1790  000A5C  C0B4  F0B9         	movff	sprintf@prec,sprintf@c
  1791  000A60                     l5051:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;doprnt.c: 886: if( fval!=0) {
  1795  000A60  0E7F               	movlw	127
  1796  000A62  0100               	movlb	0	; () banked
  1797  000A64  0100               	movlb	0	; () banked
  1798  000A66  15B8               	andwf	(sprintf@fval+2)& (0+255),w,b
  1799  000A68  0100               	movlb	0	; () banked
  1800  000A6A  11B7               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1801  000A6C  0100               	movlb	0	; () banked
  1802  000A6E  11B6               	iorwf	sprintf@fval& (0+255),w,b
  1803  000A70  B4D8               	btfsc	status,2,c
  1804  000A72  D0F6               	goto	l5071
  1805                           
  1806                           ; BSR set to: 0
  1807                           ;doprnt.c: 887: fval /= scale(exp-c);
  1808  000A74  0100               	movlb	0	; () banked
  1809  000A76  0E00               	movlw	high sprintf@fval
  1810  000A78  6E48               	movwf	?___asftdiv+1,c
  1811  000A7A  0100               	movlb	0	; () banked
  1812  000A7C  0EB6               	movlw	low sprintf@fval
  1813  000A7E  6E47               	movwf	?___asftdiv,c
  1814  000A80  0100               	movlb	0	; () banked
  1815  000A82  0100               	movlb	0	; () banked
  1816  000A84  51B9               	movf	sprintf@c& (0+255),w,b
  1817  000A86  0800               	sublw	0
  1818  000A88  0100               	movlb	0	; () banked
  1819  000A8A  0100               	movlb	0	; () banked
  1820  000A8C  25B2               	addwf	sprintf@exp& (0+255),w,b
  1821  000A8E  6E36               	movwf	?_scale,c
  1822  000A90  EC8D  F00B         	call	_scale	;wreg free
  1823  000A94  C038  F04B         	movff	?_scale+2,?___asftdiv+4
  1824  000A98  C037  F04A         	movff	?_scale+1,?___asftdiv+3
  1825  000A9C  C036  F049         	movff	?_scale,?___asftdiv+2
  1826  000AA0  ECCE  F016         	call	___asftdiv	;wreg free
  1827                           
  1828                           ;doprnt.c: 902: if(fval - (double)(unsigned long)fval >= 0.5)
  1829  000AA4  C0B6  F060         	movff	sprintf@fval,?___ftadd+3
  1830  000AA8  C0B7  F061         	movff	sprintf@fval+1,?___ftadd+4
  1831  000AAC  C0B8  F062         	movff	sprintf@fval+2,?___ftadd+5
  1832  000AB0  C0B6  F042         	movff	sprintf@fval,?___fttol
  1833  000AB4  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  1834  000AB8  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  1835  000ABC  EC86  F013         	call	___fttol	;wreg free
  1836  000AC0  C045  F054         	movff	?___fttol+3,?___lltoft+3
  1837  000AC4  C044  F053         	movff	?___fttol+2,?___lltoft+2
  1838  000AC8  C043  F052         	movff	?___fttol+1,?___lltoft+1
  1839  000ACC  C042  F051         	movff	?___fttol,?___lltoft
  1840  000AD0  ECE7  F015         	call	___lltoft	;wreg free
  1841  000AD4  C053  F05C         	movff	?___lltoft+2,?___ftneg+2
  1842  000AD8  C052  F05B         	movff	?___lltoft+1,?___ftneg+1
  1843  000ADC  C051  F05A         	movff	?___lltoft,?___ftneg
  1844  000AE0  EC52  F017         	call	___ftneg	;wreg free
  1845  000AE4  C05C  F05F         	movff	?___ftneg+2,?___ftadd+2
  1846  000AE8  C05B  F05E         	movff	?___ftneg+1,?___ftadd+1
  1847  000AEC  C05A  F05D         	movff	?___ftneg,?___ftadd
  1848  000AF0  ECF5  F00E         	call	___ftadd	;wreg free
  1849  000AF4  C05F  F082         	movff	?___ftadd+2,?___ftge+2
  1850  000AF8  C05E  F081         	movff	?___ftadd+1,?___ftge+1
  1851  000AFC  C05D  F080         	movff	?___ftadd,?___ftge
  1852  000B00  0E00               	movlw	0
  1853  000B02  0100               	movlb	0	; () banked
  1854  000B04  0100               	movlb	0	; () banked
  1855  000B06  6F83               	movwf	(?___ftge+3)& (0+255),b
  1856  000B08  0E00               	movlw	0
  1857  000B0A  0100               	movlb	0	; () banked
  1858  000B0C  0100               	movlb	0	; () banked
  1859  000B0E  6F84               	movwf	(?___ftge+4)& (0+255),b
  1860  000B10  0E3F               	movlw	63
  1861  000B12  0100               	movlb	0	; () banked
  1862  000B14  0100               	movlb	0	; () banked
  1863  000B16  6F85               	movwf	(?___ftge+5)& (0+255),b
  1864  000B18  EC14  F013         	call	___ftge	;wreg free
  1865  000B1C  A0D8               	btfss	status,0,c
  1866  000B1E  D017               	goto	l5059
  1867                           
  1868                           ;doprnt.c: 903: fval += 0.5;
  1869  000B20  0100               	movlb	0	; () banked
  1870  000B22  0E00               	movlw	high sprintf@fval
  1871  000B24  0100               	movlb	0	; () banked
  1872  000B26  0100               	movlb	0	; () banked
  1873  000B28  6F81               	movwf	(?___asftadd+1)& (0+255),b
  1874  000B2A  0100               	movlb	0	; () banked
  1875  000B2C  0EB6               	movlw	low sprintf@fval
  1876  000B2E  0100               	movlb	0	; () banked
  1877  000B30  6F80               	movwf	?___asftadd& (0+255),b
  1878  000B32  0E00               	movlw	0
  1879  000B34  0100               	movlb	0	; () banked
  1880  000B36  0100               	movlb	0	; () banked
  1881  000B38  6F82               	movwf	(?___asftadd+2)& (0+255),b
  1882  000B3A  0E00               	movlw	0
  1883  000B3C  0100               	movlb	0	; () banked
  1884  000B3E  0100               	movlb	0	; () banked
  1885  000B40  6F83               	movwf	(?___asftadd+3)& (0+255),b
  1886  000B42  0E3F               	movlw	63
  1887  000B44  0100               	movlb	0	; () banked
  1888  000B46  0100               	movlb	0	; () banked
  1889  000B48  6F84               	movwf	(?___asftadd+4)& (0+255),b
  1890  000B4A  ECEC  F016         	call	___asftadd	;wreg free
  1891  000B4E                     l5059:
  1892                           
  1893                           ;doprnt.c: 904: if((unsigned long)fval >= dpowers[c+1]) {
  1894  000B4E  0100               	movlb	0	; () banked
  1895  000B50  C0B9  F092         	movff	sprintf@c,??_sprintf
  1896  000B54  0100               	movlb	0	; () banked
  1897  000B56  6B93               	clrf	(??_sprintf+1)& (0+255),b
  1898  000B58  BF92               	btfsc	??_sprintf& (0+255),7,b
  1899  000B5A  0793               	decf	(??_sprintf+1)& (0+255),f,b
  1900  000B5C  0100               	movlb	0	; () banked
  1901  000B5E  90D8               	bcf	status,0,c
  1902  000B60  3792               	rlcf	??_sprintf& (0+255),f,b
  1903  000B62  3793               	rlcf	(??_sprintf+1)& (0+255),f,b
  1904  000B64  0100               	movlb	0	; () banked
  1905  000B66  90D8               	bcf	status,0,c
  1906  000B68  3792               	rlcf	??_sprintf& (0+255),f,b
  1907  000B6A  3793               	rlcf	(??_sprintf+1)& (0+255),f,b
  1908  000B6C  0E04               	movlw	4
  1909  000B6E  0100               	movlb	0	; () banked
  1910  000B70  2792               	addwf	??_sprintf& (0+255),f,b
  1911  000B72  0E00               	movlw	0
  1912  000B74  2393               	addwfc	(??_sprintf+1)& (0+255),f,b
  1913  000B76  0E00               	movlw	low _dpowers
  1914  000B78  0100               	movlb	0	; () banked
  1915  000B7A  2592               	addwf	??_sprintf& (0+255),w,b
  1916  000B7C  6EF6               	movwf	tblptrl,c
  1917  000B7E  0E06               	movlw	high _dpowers
  1918  000B80  2193               	addwfc	(??_sprintf+1)& (0+255),w,b
  1919  000B82  6EF7               	movwf	tblptrh,c
  1920  000B84  C0B6  F042         	movff	sprintf@fval,?___fttol
  1921  000B88  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  1922  000B8C  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  1923  000B90  EC86  F013         	call	___fttol	;wreg free
  1924  000B94  0009               	tblrd		*+
  1925  000B96  50F5               	movf	tablat,w,c
  1926  000B98  5C42               	subwf	?___fttol,w,c
  1927  000B9A  0009               	tblrd		*+
  1928  000B9C  50F5               	movf	tablat,w,c
  1929  000B9E  5843               	subwfb	?___fttol+1,w,c
  1930  000BA0  0009               	tblrd		*+
  1931  000BA2  50F5               	movf	tablat,w,c
  1932  000BA4  5844               	subwfb	?___fttol+2,w,c
  1933  000BA6  0009               	tblrd		*+
  1934  000BA8  50F5               	movf	tablat,w,c
  1935  000BAA  5845               	subwfb	?___fttol+3,w,c
  1936  000BAC  A0D8               	btfss	status,0,c
  1937  000BAE  D01C               	goto	l5065
  1938                           
  1939                           ;doprnt.c: 905: fval *= 1e-1;
  1940  000BB0  0100               	movlb	0	; () banked
  1941  000BB2  0E00               	movlw	high sprintf@fval
  1942  000BB4  0100               	movlb	0	; () banked
  1943  000BB6  0100               	movlb	0	; () banked
  1944  000BB8  6F81               	movwf	(?___asftmul+1)& (0+255),b
  1945  000BBA  0100               	movlb	0	; () banked
  1946  000BBC  0EB6               	movlw	low sprintf@fval
  1947  000BBE  0100               	movlb	0	; () banked
  1948  000BC0  6F80               	movwf	?___asftmul& (0+255),b
  1949  000BC2  0ECD               	movlw	205
  1950  000BC4  0100               	movlb	0	; () banked
  1951  000BC6  0100               	movlb	0	; () banked
  1952  000BC8  6F82               	movwf	(?___asftmul+2)& (0+255),b
  1953  000BCA  0ECC               	movlw	204
  1954  000BCC  0100               	movlb	0	; () banked
  1955  000BCE  0100               	movlb	0	; () banked
  1956  000BD0  6F83               	movwf	(?___asftmul+3)& (0+255),b
  1957  000BD2  0E3D               	movlw	61
  1958  000BD4  0100               	movlb	0	; () banked
  1959  000BD6  0100               	movlb	0	; () banked
  1960  000BD8  6F84               	movwf	(?___asftmul+4)& (0+255),b
  1961  000BDA  ECB0  F016         	call	___asftmul	;wreg free
  1962                           
  1963                           ;doprnt.c: 906: exp++;
  1964  000BDE  0100               	movlb	0	; () banked
  1965  000BE0  0100               	movlb	0	; () banked
  1966  000BE2  4BB2               	infsnz	sprintf@exp& (0+255),f,b
  1967  000BE4  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  1968                           
  1969                           ;doprnt.c: 907: } else if((unsigned long)fval < dpowers[c]) {
  1970  000BE6  D03C               	goto	l5071
  1971  000BE8                     l5065:
  1972  000BE8  0100               	movlb	0	; () banked
  1973  000BEA  0100               	movlb	0	; () banked
  1974  000BEC  51B9               	movf	sprintf@c& (0+255),w,b
  1975  000BEE  0D04               	mullw	4
  1976  000BF0  0E00               	movlw	low _dpowers
  1977  000BF2  24F3               	addwf	prodl,w,c
  1978  000BF4  6EF6               	movwf	tblptrl,c
  1979  000BF6  0E06               	movlw	high _dpowers
  1980  000BF8  20F4               	addwfc	prodh,w,c
  1981  000BFA  6EF7               	movwf	tblptrh,c
  1982  000BFC  C0B6  F042         	movff	sprintf@fval,?___fttol
  1983  000C00  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  1984  000C04  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  1985  000C08  EC86  F013         	call	___fttol	;wreg free
  1986  000C0C  0009               	tblrd		*+
  1987  000C0E  50F5               	movf	tablat,w,c
  1988  000C10  5C42               	subwf	?___fttol,w,c
  1989  000C12  0009               	tblrd		*+
  1990  000C14  50F5               	movf	tablat,w,c
  1991  000C16  5843               	subwfb	?___fttol+1,w,c
  1992  000C18  0009               	tblrd		*+
  1993  000C1A  50F5               	movf	tablat,w,c
  1994  000C1C  5844               	subwfb	?___fttol+2,w,c
  1995  000C1E  0009               	tblrd		*+
  1996  000C20  50F5               	movf	tablat,w,c
  1997  000C22  5845               	subwfb	?___fttol+3,w,c
  1998  000C24  B0D8               	btfsc	status,0,c
  1999  000C26  D01C               	goto	l5071
  2000                           
  2001                           ;doprnt.c: 908: fval *= 10.0;
  2002  000C28  0100               	movlb	0	; () banked
  2003  000C2A  0E00               	movlw	high sprintf@fval
  2004  000C2C  0100               	movlb	0	; () banked
  2005  000C2E  0100               	movlb	0	; () banked
  2006  000C30  6F81               	movwf	(?___asftmul+1)& (0+255),b
  2007  000C32  0100               	movlb	0	; () banked
  2008  000C34  0EB6               	movlw	low sprintf@fval
  2009  000C36  0100               	movlb	0	; () banked
  2010  000C38  6F80               	movwf	?___asftmul& (0+255),b
  2011  000C3A  0E00               	movlw	0
  2012  000C3C  0100               	movlb	0	; () banked
  2013  000C3E  0100               	movlb	0	; () banked
  2014  000C40  6F82               	movwf	(?___asftmul+2)& (0+255),b
  2015  000C42  0E20               	movlw	32
  2016  000C44  0100               	movlb	0	; () banked
  2017  000C46  0100               	movlb	0	; () banked
  2018  000C48  6F83               	movwf	(?___asftmul+3)& (0+255),b
  2019  000C4A  0E41               	movlw	65
  2020  000C4C  0100               	movlb	0	; () banked
  2021  000C4E  0100               	movlb	0	; () banked
  2022  000C50  6F84               	movwf	(?___asftmul+4)& (0+255),b
  2023  000C52  ECB0  F016         	call	___asftmul	;wreg free
  2024                           
  2025                           ;doprnt.c: 909: exp--;
  2026  000C56  0100               	movlb	0	; () banked
  2027  000C58  0100               	movlb	0	; () banked
  2028  000C5A  07B2               	decf	sprintf@exp& (0+255),f,b
  2029  000C5C  A0D8               	btfss	status,0,c
  2030  000C5E  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  2031  000C60                     l5071:
  2032                           
  2033                           ;doprnt.c: 910: }
  2034                           ;doprnt.c: 912: }
  2035                           ;doprnt.c: 968: {
  2036                           ;doprnt.c: 982: if(flag & 0x03)
  2037  000C60  0E03               	movlw	3
  2038  000C62  0100               	movlb	0	; () banked
  2039  000C64  0100               	movlb	0	; () banked
  2040  000C66  15AB               	andwf	sprintf@flag& (0+255),w,b
  2041  000C68  0100               	movlb	0	; () banked
  2042  000C6A  6F92               	movwf	??_sprintf& (0+255),b
  2043  000C6C  0E00               	movlw	0
  2044  000C6E  0100               	movlb	0	; () banked
  2045  000C70  0100               	movlb	0	; () banked
  2046  000C72  15AC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2047  000C74  0100               	movlb	0	; () banked
  2048  000C76  6F93               	movwf	(??_sprintf+1)& (0+255),b
  2049  000C78  0100               	movlb	0	; () banked
  2050  000C7A  5193               	movf	(??_sprintf+1)& (0+255),w,b
  2051  000C7C  1192               	iorwf	??_sprintf& (0+255),w,b
  2052  000C7E  B4D8               	btfsc	status,2,c
  2053  000C80  D00A               	goto	l5077
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;doprnt.c: 983: ((*sp++ = ('-')));
  2057  000C82  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2058  000C86  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2059  000C8A  0E2D               	movlw	45
  2060  000C8C  6EDF               	movwf	indf2,c
  2061                           
  2062                           ; BSR set to: 0
  2063  000C8E  0100               	movlb	0	; () banked
  2064  000C90  0100               	movlb	0	; () banked
  2065  000C92  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2066  000C94  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2067  000C96                     l5077:
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;doprnt.c: 989: }
  2071                           ;doprnt.c: 994: _val._val = (unsigned long)fval;
  2072  000C96  C0B6  F042         	movff	sprintf@fval,?___fttol
  2073  000C9A  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  2074  000C9E  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  2075  000CA2  EC86  F013         	call	___fttol	;wreg free
  2076  000CA6  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  2077  000CAA  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  2078  000CAE  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  2079  000CB2  C042  F0AD         	movff	?___fttol,sprintf@_val
  2080                           
  2081                           ;doprnt.c: 995: ((*sp++ = (_val._val/dpowers[c] + '0')));
  2082  000CB6  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  2083  000CBA  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  2084  000CBE  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  2085  000CC2  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  2086  000CC6  0100               	movlb	0	; () banked
  2087  000CC8  0100               	movlb	0	; () banked
  2088  000CCA  51B9               	movf	sprintf@c& (0+255),w,b
  2089  000CCC  0D04               	mullw	4
  2090  000CCE  0E00               	movlw	low _dpowers
  2091  000CD0  24F3               	addwf	prodl,w,c
  2092  000CD2  6EF6               	movwf	tblptrl,c
  2093  000CD4  0E06               	movlw	high _dpowers
  2094  000CD6  20F4               	addwfc	prodh,w,c
  2095  000CD8  6EF7               	movwf	tblptrh,c
  2096  000CDA  0009               	tblrd		*+
  2097  000CDC  CFF5 F013          	movff	tablat,?___lldiv+4
  2098  000CE0  0009               	tblrd		*+
  2099  000CE2  CFF5 F014          	movff	tablat,?___lldiv+5
  2100  000CE6  0009               	tblrd		*+
  2101  000CE8  CFF5 F015          	movff	tablat,?___lldiv+6
  2102  000CEC  000A               	tblrd		*-
  2103  000CEE  CFF5 F016          	movff	tablat,?___lldiv+7
  2104  000CF2  ECEE  F014         	call	___lldiv	;wreg free
  2105  000CF6  500F               	movf	?___lldiv,w,c
  2106  000CF8  0F30               	addlw	48
  2107  000CFA  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2108  000CFE  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2109  000D02  6EDF               	movwf	indf2,c
  2110  000D04  0100               	movlb	0	; () banked
  2111  000D06  0100               	movlb	0	; () banked
  2112  000D08  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2113  000D0A  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;doprnt.c: 996: _val._val %= dpowers[c];
  2117  000D0C  C0AD  F00F         	movff	sprintf@_val,?___llmod
  2118  000D10  C0AE  F010         	movff	sprintf@_val+1,?___llmod+1
  2119  000D14  C0AF  F011         	movff	sprintf@_val+2,?___llmod+2
  2120  000D18  C0B0  F012         	movff	sprintf@_val+3,?___llmod+3
  2121  000D1C  0100               	movlb	0	; () banked
  2122  000D1E  0100               	movlb	0	; () banked
  2123  000D20  51B9               	movf	sprintf@c& (0+255),w,b
  2124  000D22  0D04               	mullw	4
  2125  000D24  0E00               	movlw	low _dpowers
  2126  000D26  24F3               	addwf	prodl,w,c
  2127  000D28  6EF6               	movwf	tblptrl,c
  2128  000D2A  0E06               	movlw	high _dpowers
  2129  000D2C  20F4               	addwfc	prodh,w,c
  2130  000D2E  6EF7               	movwf	tblptrh,c
  2131  000D30  0009               	tblrd		*+
  2132  000D32  CFF5 F013          	movff	tablat,?___llmod+4
  2133  000D36  0009               	tblrd		*+
  2134  000D38  CFF5 F014          	movff	tablat,?___llmod+5
  2135  000D3C  0009               	tblrd		*+
  2136  000D3E  CFF5 F015          	movff	tablat,?___llmod+6
  2137  000D42  000A               	tblrd		*-
  2138  000D44  CFF5 F016          	movff	tablat,?___llmod+7
  2139  000D48  ECB2  F015         	call	___llmod	;wreg free
  2140  000D4C  C012  F0B0         	movff	?___llmod+3,sprintf@_val+3
  2141  000D50  C011  F0AF         	movff	?___llmod+2,sprintf@_val+2
  2142  000D54  C010  F0AE         	movff	?___llmod+1,sprintf@_val+1
  2143  000D58  C00F  F0AD         	movff	?___llmod,sprintf@_val
  2144                           
  2145                           ;doprnt.c: 1001: if(prec)
  2146  000D5C  0100               	movlb	0	; () banked
  2147  000D5E  0100               	movlb	0	; () banked
  2148  000D60  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2149  000D62  11B4               	iorwf	sprintf@prec& (0+255),w,b
  2150  000D64  B4D8               	btfsc	status,2,c
  2151  000D66  D0A7               	goto	l5113
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;doprnt.c: 1003: {
  2155                           ;doprnt.c: 1004: ((*sp++ = ('.')));
  2156  000D68  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2157  000D6C  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2158  000D70  0E2E               	movlw	46
  2159  000D72  6EDF               	movwf	indf2,c
  2160                           
  2161                           ; BSR set to: 0
  2162  000D74  0100               	movlb	0	; () banked
  2163  000D76  0100               	movlb	0	; () banked
  2164  000D78  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2165  000D7A  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 1005: prec -= c;
  2169  000D7C  0100               	movlb	0	; () banked
  2170  000D7E  0100               	movlb	0	; () banked
  2171  000D80  51B9               	movf	sprintf@c& (0+255),w,b
  2172  000D82  0100               	movlb	0	; () banked
  2173  000D84  0100               	movlb	0	; () banked
  2174  000D86  5FB4               	subwf	sprintf@prec& (0+255),f,b
  2175  000D88  0E00               	movlw	0
  2176  000D8A  0100               	movlb	0	; () banked
  2177  000D8C  BFB9               	btfsc	sprintf@c& (0+255),7,b
  2178  000D8E  0EFF               	movlw	255
  2179  000D90  0100               	movlb	0	; () banked
  2180  000D92  0100               	movlb	0	; () banked
  2181  000D94  5BB5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2182                           
  2183                           ;doprnt.c: 1006: while(c--) {
  2184  000D96  D072               	goto	l5103
  2185  000D98                     l170:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;doprnt.c: 1011: if(flag & 0x200 && _val._val == 0) {
  2189  000D98  0100               	movlb	0	; () banked
  2190  000D9A  0100               	movlb	0	; () banked
  2191  000D9C  A3AC               	btfss	(sprintf@flag+1)& (0+255),1,b
  2192  000D9E  D01B               	goto	l5097
  2193                           
  2194                           ; BSR set to: 0
  2195  000DA0  0100               	movlb	0	; () banked
  2196  000DA2  0100               	movlb	0	; () banked
  2197  000DA4  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  2198  000DA6  11AD               	iorwf	sprintf@_val& (0+255),w,b
  2199  000DA8  11AE               	iorwf	(sprintf@_val+1)& (0+255),w,b
  2200  000DAA  11AF               	iorwf	(sprintf@_val+2)& (0+255),w,b
  2201  000DAC  A4D8               	btfss	status,2,c
  2202  000DAE  D013               	goto	l5097
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;doprnt.c: 1012: prec = c = 0;
  2206  000DB0  0100               	movlb	0	; () banked
  2207  000DB2  6F92               	movwf	??_sprintf& (0+255),b
  2208  000DB4  0E00               	movlw	0
  2209  000DB6  0100               	movlb	0	; () banked
  2210  000DB8  0100               	movlb	0	; () banked
  2211  000DBA  6FB9               	movwf	sprintf@c& (0+255),b
  2212  000DBC  0100               	movlb	0	; () banked
  2213  000DBE  5192               	movf	??_sprintf& (0+255),w,b
  2214  000DC0  0100               	movlb	0	; () banked
  2215  000DC2  51B9               	movf	sprintf@c& (0+255),w,b
  2216  000DC4  0100               	movlb	0	; () banked
  2217  000DC6  0100               	movlb	0	; () banked
  2218  000DC8  6FB4               	movwf	sprintf@prec& (0+255),b
  2219  000DCA  0100               	movlb	0	; () banked
  2220  000DCC  6BB5               	clrf	(sprintf@prec+1)& (0+255),b
  2221  000DCE  0100               	movlb	0	; () banked
  2222  000DD0  BFB4               	btfsc	sprintf@prec& (0+255),7,b
  2223  000DD2  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  2224                           
  2225                           ;doprnt.c: 1013: break;
  2226  000DD4  D06A               	goto	l5111
  2227  000DD6                     l5097:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 1014: }
  2231                           ;doprnt.c: 1016: ((*sp++ = ('0' + (_val._val/dpowers[c]))));
  2232  000DD6  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  2233  000DDA  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  2234  000DDE  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  2235  000DE2  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  2236  000DE6  0100               	movlb	0	; () banked
  2237  000DE8  0100               	movlb	0	; () banked
  2238  000DEA  51B9               	movf	sprintf@c& (0+255),w,b
  2239  000DEC  0D04               	mullw	4
  2240  000DEE  0E00               	movlw	low _dpowers
  2241  000DF0  24F3               	addwf	prodl,w,c
  2242  000DF2  6EF6               	movwf	tblptrl,c
  2243  000DF4  0E06               	movlw	high _dpowers
  2244  000DF6  20F4               	addwfc	prodh,w,c
  2245  000DF8  6EF7               	movwf	tblptrh,c
  2246  000DFA  0009               	tblrd		*+
  2247  000DFC  CFF5 F013          	movff	tablat,?___lldiv+4
  2248  000E00  0009               	tblrd		*+
  2249  000E02  CFF5 F014          	movff	tablat,?___lldiv+5
  2250  000E06  0009               	tblrd		*+
  2251  000E08  CFF5 F015          	movff	tablat,?___lldiv+6
  2252  000E0C  000A               	tblrd		*-
  2253  000E0E  CFF5 F016          	movff	tablat,?___lldiv+7
  2254  000E12  ECEE  F014         	call	___lldiv	;wreg free
  2255  000E16  500F               	movf	?___lldiv,w,c
  2256  000E18  0F30               	addlw	48
  2257  000E1A  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2258  000E1E  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2259  000E22  6EDF               	movwf	indf2,c
  2260  000E24  0100               	movlb	0	; () banked
  2261  000E26  0100               	movlb	0	; () banked
  2262  000E28  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2263  000E2A  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;doprnt.c: 1017: _val._val %= dpowers[c];
  2267  000E2C  C0AD  F00F         	movff	sprintf@_val,?___llmod
  2268  000E30  C0AE  F010         	movff	sprintf@_val+1,?___llmod+1
  2269  000E34  C0AF  F011         	movff	sprintf@_val+2,?___llmod+2
  2270  000E38  C0B0  F012         	movff	sprintf@_val+3,?___llmod+3
  2271  000E3C  0100               	movlb	0	; () banked
  2272  000E3E  0100               	movlb	0	; () banked
  2273  000E40  51B9               	movf	sprintf@c& (0+255),w,b
  2274  000E42  0D04               	mullw	4
  2275  000E44  0E00               	movlw	low _dpowers
  2276  000E46  24F3               	addwf	prodl,w,c
  2277  000E48  6EF6               	movwf	tblptrl,c
  2278  000E4A  0E06               	movlw	high _dpowers
  2279  000E4C  20F4               	addwfc	prodh,w,c
  2280  000E4E  6EF7               	movwf	tblptrh,c
  2281  000E50  0009               	tblrd		*+
  2282  000E52  CFF5 F013          	movff	tablat,?___llmod+4
  2283  000E56  0009               	tblrd		*+
  2284  000E58  CFF5 F014          	movff	tablat,?___llmod+5
  2285  000E5C  0009               	tblrd		*+
  2286  000E5E  CFF5 F015          	movff	tablat,?___llmod+6
  2287  000E62  000A               	tblrd		*-
  2288  000E64  CFF5 F016          	movff	tablat,?___llmod+7
  2289  000E68  ECB2  F015         	call	___llmod	;wreg free
  2290  000E6C  C012  F0B0         	movff	?___llmod+3,sprintf@_val+3
  2291  000E70  C011  F0AF         	movff	?___llmod+2,sprintf@_val+2
  2292  000E74  C010  F0AE         	movff	?___llmod+1,sprintf@_val+1
  2293  000E78  C00F  F0AD         	movff	?___llmod,sprintf@_val
  2294  000E7C                     l5103:
  2295  000E7C  0100               	movlb	0	; () banked
  2296  000E7E  0100               	movlb	0	; () banked
  2297  000E80  07B9               	decf	sprintf@c& (0+255),f,b
  2298  000E82  0100               	movlb	0	; () banked
  2299  000E84  29B9               	incf	sprintf@c& (0+255),w,b
  2300  000E86  B4D8               	btfsc	status,2,c
  2301  000E88  D010               	goto	l5111
  2302  000E8A  D786               	goto	l170
  2303  000E8C                     l5105:
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;doprnt.c: 1021: ((*sp++ = ('0')));
  2307  000E8C  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2308  000E90  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2309  000E94  0E30               	movlw	48
  2310  000E96  6EDF               	movwf	indf2,c
  2311                           
  2312                           ; BSR set to: 0
  2313  000E98  0100               	movlb	0	; () banked
  2314  000E9A  0100               	movlb	0	; () banked
  2315  000E9C  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2316  000E9E  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 1022: prec--;
  2320  000EA0  0100               	movlb	0	; () banked
  2321  000EA2  0100               	movlb	0	; () banked
  2322  000EA4  07B4               	decf	sprintf@prec& (0+255),f,b
  2323  000EA6  A0D8               	btfss	status,0,c
  2324  000EA8  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  2325  000EAA                     l5111:
  2326                           
  2327                           ; BSR set to: 0
  2328  000EAA  0100               	movlb	0	; () banked
  2329  000EAC  0100               	movlb	0	; () banked
  2330  000EAE  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2331  000EB0  11B4               	iorwf	sprintf@prec& (0+255),w,b
  2332  000EB2  A4D8               	btfss	status,2,c
  2333  000EB4  D7EB               	goto	l5105
  2334  000EB6                     l5113:
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;doprnt.c: 1023: }
  2338                           ;doprnt.c: 1024: }
  2339                           ;doprnt.c: 1030: ((*sp++ = ('e')));
  2340  000EB6  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2341  000EBA  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2342  000EBE  0E65               	movlw	101
  2343  000EC0  6EDF               	movwf	indf2,c
  2344                           
  2345                           ; BSR set to: 0
  2346  000EC2  0100               	movlb	0	; () banked
  2347  000EC4  0100               	movlb	0	; () banked
  2348  000EC6  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2349  000EC8  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;doprnt.c: 1031: if(exp < 0) {
  2353  000ECA  0100               	movlb	0	; () banked
  2354  000ECC  0100               	movlb	0	; () banked
  2355  000ECE  AFB3               	btfss	(sprintf@exp+1)& (0+255),7,b
  2356  000ED0  D00D               	goto	l5125
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;doprnt.c: 1032: exp = -exp;
  2360  000ED2  0100               	movlb	0	; () banked
  2361  000ED4  0100               	movlb	0	; () banked
  2362  000ED6  6DB2               	negf	sprintf@exp& (0+255),b
  2363  000ED8  0100               	movlb	0	; () banked
  2364  000EDA  1FB3               	comf	(sprintf@exp+1)& (0+255),f,b
  2365  000EDC  B0D8               	btfsc	status,0,c
  2366  000EDE  2BB3               	incf	(sprintf@exp+1)& (0+255),f,b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;doprnt.c: 1033: ((*sp++ = ('-')));
  2370  000EE0  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2371  000EE4  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2372  000EE8  0E2D               	movlw	45
  2373  000EEA  D005               	goto	L2
  2374  000EEC                     l5125:
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;doprnt.c: 1035: ((*sp++ = ('+')));
  2378  000EEC  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2379  000EF0  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2380  000EF4  0E2B               	movlw	43
  2381  000EF6                     L2:
  2382  000EF6  6EDF               	movwf	indf2,c
  2383                           
  2384                           ; BSR set to: 0
  2385  000EF8  0100               	movlb	0	; () banked
  2386  000EFA  0100               	movlb	0	; () banked
  2387  000EFC  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2388  000EFE  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;doprnt.c: 1048: ((*sp++ = (exp / 10 + '0')));
  2392                           
  2393                           ; BSR set to: 0
  2394  000F00  C0B2  F016         	movff	sprintf@exp,?___awdiv
  2395  000F04  C0B3  F017         	movff	sprintf@exp+1,?___awdiv+1
  2396  000F08  0E00               	movlw	0
  2397  000F0A  6E19               	movwf	?___awdiv+3,c
  2398  000F0C  0E0A               	movlw	10
  2399  000F0E  6E18               	movwf	?___awdiv+2,c
  2400  000F10  ECA6  F014         	call	___awdiv	;wreg free
  2401  000F14  5016               	movf	?___awdiv,w,c
  2402  000F16  0F30               	addlw	48
  2403  000F18  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2404  000F1C  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2405  000F20  6EDF               	movwf	indf2,c
  2406  000F22  0100               	movlb	0	; () banked
  2407  000F24  0100               	movlb	0	; () banked
  2408  000F26  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  2409  000F28  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;doprnt.c: 1049: ((*sp++ = (exp % 10 + '0')));
  2413  000F2A  C0B2  F00F         	movff	sprintf@exp,?___awmod
  2414  000F2E  C0B3  F010         	movff	sprintf@exp+1,?___awmod+1
  2415  000F32  0E00               	movlw	0
  2416  000F34  6E12               	movwf	?___awmod+3,c
  2417  000F36  0E0A               	movlw	10
  2418  000F38  6E11               	movwf	?___awmod+2,c
  2419  000F3A  EC74  F015         	call	___awmod	;wreg free
  2420  000F3E  500F               	movf	?___awmod,w,c
  2421  000F40  0F30               	addlw	48
  2422  000F42  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2423  000F46  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2424  000F4A  D3C9               	goto	L3
  2425  000F4C                     l156:
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;doprnt.c: 1057: }
  2429                           ;doprnt.c: 1096: if(flag & 0x200) {
  2430  000F4C  0100               	movlb	0	; () banked
  2431  000F4E  0100               	movlb	0	; () banked
  2432  000F50  A3AC               	btfss	(sprintf@flag+1)& (0+255),1,b
  2433  000F52  D10F               	goto	l5173
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;doprnt.c: 1097: if(exp < 0)
  2437  000F54  0100               	movlb	0	; () banked
  2438  000F56  0100               	movlb	0	; () banked
  2439  000F58  AFB3               	btfss	(sprintf@exp+1)& (0+255),7,b
  2440  000F5A  D016               	goto	l5141
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;doprnt.c: 1098: prec -= (exp+1);
  2444  000F5C  0E01               	movlw	1
  2445  000F5E  0100               	movlb	0	; () banked
  2446  000F60  0100               	movlb	0	; () banked
  2447  000F62  25B2               	addwf	sprintf@exp& (0+255),w,b
  2448  000F64  0100               	movlb	0	; () banked
  2449  000F66  6F92               	movwf	??_sprintf& (0+255),b
  2450  000F68  0E00               	movlw	0
  2451  000F6A  0100               	movlb	0	; () banked
  2452  000F6C  0100               	movlb	0	; () banked
  2453  000F6E  21B3               	addwfc	(sprintf@exp+1)& (0+255),w,b
  2454  000F70  0100               	movlb	0	; () banked
  2455  000F72  6F93               	movwf	(??_sprintf+1)& (0+255),b
  2456  000F74  0100               	movlb	0	; () banked
  2457  000F76  5192               	movf	??_sprintf& (0+255),w,b
  2458  000F78  0100               	movlb	0	; () banked
  2459  000F7A  0100               	movlb	0	; () banked
  2460  000F7C  5FB4               	subwf	sprintf@prec& (0+255),f,b
  2461  000F7E  0100               	movlb	0	; () banked
  2462  000F80  5193               	movf	(??_sprintf+1)& (0+255),w,b
  2463  000F82  0100               	movlb	0	; () banked
  2464  000F84  0100               	movlb	0	; () banked
  2465  000F86  5BB5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2466  000F88                     l5141:
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;doprnt.c: 1100: _val._val = (unsigned long)fval;
  2470  000F88  C0B6  F042         	movff	sprintf@fval,?___fttol
  2471  000F8C  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  2472  000F90  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  2473  000F94  EC86  F013         	call	___fttol	;wreg free
  2474  000F98  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  2475  000F9C  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  2476  000FA0  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  2477  000FA4  C042  F0AD         	movff	?___fttol,sprintf@_val
  2478                           
  2479                           ;doprnt.c: 1101: for(c = 0 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2480  000FA8  0100               	movlb	0	; () banked
  2481  000FAA  6F92               	movwf	??_sprintf& (0+255),b
  2482  000FAC  0E00               	movlw	0
  2483  000FAE  0100               	movlb	0	; () banked
  2484  000FB0  0100               	movlb	0	; () banked
  2485  000FB2  6FB9               	movwf	sprintf@c& (0+255),b
  2486  000FB4  0100               	movlb	0	; () banked
  2487  000FB6  5192               	movf	??_sprintf& (0+255),w,b
  2488  000FB8                     
  2489                           ; BSR set to: 0
  2490  000FB8  0100               	movlb	0	; () banked
  2491  000FBA  0100               	movlb	0	; () banked
  2492  000FBC  51B9               	movf	sprintf@c& (0+255),w,b
  2493  000FBE  0A0A               	xorlw	10
  2494  000FC0  B4D8               	btfsc	status,2,c
  2495  000FC2  D021               	goto	l5157
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;doprnt.c: 1102: if(_val._val < dpowers[c])
  2499                           
  2500                           ; BSR set to: 0
  2501                           
  2502                           ; BSR set to: 0
  2503  000FC4  0100               	movlb	0	; () banked
  2504  000FC6  0100               	movlb	0	; () banked
  2505  000FC8  51B9               	movf	sprintf@c& (0+255),w,b
  2506  000FCA  0D04               	mullw	4
  2507  000FCC  0E00               	movlw	low _dpowers
  2508  000FCE  24F3               	addwf	prodl,w,c
  2509  000FD0  6EF6               	movwf	tblptrl,c
  2510  000FD2  0E06               	movlw	high _dpowers
  2511  000FD4  20F4               	addwfc	prodh,w,c
  2512  000FD6  6EF7               	movwf	tblptrh,c
  2513  000FD8  0009               	tblrd		*+
  2514  000FDA  50F5               	movf	tablat,w,c
  2515  000FDC  0100               	movlb	0	; () banked
  2516  000FDE  0100               	movlb	0	; () banked
  2517  000FE0  5DAD               	subwf	sprintf@_val& (0+255),w,b
  2518  000FE2  0009               	tblrd		*+
  2519  000FE4  50F5               	movf	tablat,w,c
  2520  000FE6  0100               	movlb	0	; () banked
  2521  000FE8  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2522  000FEA  0009               	tblrd		*+
  2523  000FEC  50F5               	movf	tablat,w,c
  2524  000FEE  0100               	movlb	0	; () banked
  2525  000FF0  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2526  000FF2  0009               	tblrd		*+
  2527  000FF4  50F5               	movf	tablat,w,c
  2528  000FF6  0100               	movlb	0	; () banked
  2529  000FF8  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2530  000FFA  A0D8               	btfss	status,0,c
  2531  000FFC  D004               	goto	l5157
  2532                           
  2533                           ; BSR set to: 0
  2534                           
  2535                           ; BSR set to: 0
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;doprnt.c: 1103: break;
  2539  000FFE  0100               	movlb	0	; () banked
  2540  001000  0100               	movlb	0	; () banked
  2541  001002  2BB9               	incf	sprintf@c& (0+255),f,b
  2542  001004  D7D9               	goto	L4
  2543  001006                     l5157:
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;doprnt.c: 1104: prec -= c;
  2547  001006  0100               	movlb	0	; () banked
  2548  001008  0100               	movlb	0	; () banked
  2549  00100A  51B9               	movf	sprintf@c& (0+255),w,b
  2550  00100C  0100               	movlb	0	; () banked
  2551  00100E  0100               	movlb	0	; () banked
  2552  001010  5FB4               	subwf	sprintf@prec& (0+255),f,b
  2553  001012  0E00               	movlw	0
  2554  001014  0100               	movlb	0	; () banked
  2555  001016  BFB9               	btfsc	sprintf@c& (0+255),7,b
  2556  001018  0EFF               	movlw	255
  2557  00101A  0100               	movlb	0	; () banked
  2558  00101C  0100               	movlb	0	; () banked
  2559  00101E  5BB5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2560                           
  2561                           ;doprnt.c: 1105: if(prec <= 12)
  2562  001020  0100               	movlb	0	; () banked
  2563  001022  0100               	movlb	0	; () banked
  2564  001024  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2565  001026  0A80               	xorlw	128
  2566  001028  0F80               	addlw	-128
  2567  00102A  0E0D               	movlw	13
  2568  00102C  B4D8               	btfsc	status,2,c
  2569  00102E  5DB4               	subwf	sprintf@prec& (0+255),w,b
  2570  001030  B0D8               	btfsc	status,0,c
  2571  001032  D015               	goto	l5161
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;doprnt.c: 1106: fval += fround(prec);
  2575  001034  0100               	movlb	0	; () banked
  2576  001036  0E00               	movlw	high sprintf@fval
  2577  001038  0100               	movlb	0	; () banked
  2578  00103A  0100               	movlb	0	; () banked
  2579  00103C  6F81               	movwf	(?___asftadd+1)& (0+255),b
  2580  00103E  0100               	movlb	0	; () banked
  2581  001040  0EB6               	movlw	low sprintf@fval
  2582  001042  0100               	movlb	0	; () banked
  2583  001044  6F80               	movwf	?___asftadd& (0+255),b
  2584  001046  C0B4  F036         	movff	sprintf@prec,?_fround
  2585  00104A  ECB5  F00D         	call	_fround	;wreg free
  2586  00104E  C038  F084         	movff	?_fround+2,?___asftadd+4
  2587  001052  C037  F083         	movff	?_fround+1,?___asftadd+3
  2588  001056  C036  F082         	movff	?_fround,?___asftadd+2
  2589  00105A  ECEC  F016         	call	___asftadd	;wreg free
  2590  00105E                     l5161:
  2591                           
  2592                           ;doprnt.c: 1109: {
  2593                           ;doprnt.c: 1110: double temp;
  2594                           ;doprnt.c: 1111: temp = scale(prec);
  2595  00105E  C0B4  F036         	movff	sprintf@prec,?_scale
  2596  001062  EC8D  F00B         	call	_scale	;wreg free
  2597  001066  C038  F0A7         	movff	?_scale+2,sprintf@temp+2
  2598  00106A  C037  F0A6         	movff	?_scale+1,sprintf@temp+1
  2599  00106E  C036  F0A5         	movff	?_scale,sprintf@temp
  2600                           
  2601                           ;doprnt.c: 1112: temp *= fval - (double)_val._val;
  2602  001072  0100               	movlb	0	; () banked
  2603  001074  0E00               	movlw	high sprintf@temp
  2604  001076  0100               	movlb	0	; () banked
  2605  001078  0100               	movlb	0	; () banked
  2606  00107A  6F81               	movwf	(?___asftmul+1)& (0+255),b
  2607  00107C  0100               	movlb	0	; () banked
  2608  00107E  0EA5               	movlw	low sprintf@temp
  2609  001080  0100               	movlb	0	; () banked
  2610  001082  6F80               	movwf	?___asftmul& (0+255),b
  2611  001084  C0B6  F060         	movff	sprintf@fval,?___ftadd+3
  2612  001088  C0B7  F061         	movff	sprintf@fval+1,?___ftadd+4
  2613  00108C  C0B8  F062         	movff	sprintf@fval+2,?___ftadd+5
  2614  001090  C0AD  F051         	movff	sprintf@_val,?___lltoft
  2615  001094  C0AE  F052         	movff	sprintf@_val+1,?___lltoft+1
  2616  001098  C0AF  F053         	movff	sprintf@_val+2,?___lltoft+2
  2617  00109C  C0B0  F054         	movff	sprintf@_val+3,?___lltoft+3
  2618  0010A0  ECE7  F015         	call	___lltoft	;wreg free
  2619  0010A4  C053  F05C         	movff	?___lltoft+2,?___ftneg+2
  2620  0010A8  C052  F05B         	movff	?___lltoft+1,?___ftneg+1
  2621  0010AC  C051  F05A         	movff	?___lltoft,?___ftneg
  2622  0010B0  EC52  F017         	call	___ftneg	;wreg free
  2623  0010B4  C05C  F05F         	movff	?___ftneg+2,?___ftadd+2
  2624  0010B8  C05B  F05E         	movff	?___ftneg+1,?___ftadd+1
  2625  0010BC  C05A  F05D         	movff	?___ftneg,?___ftadd
  2626  0010C0  ECF5  F00E         	call	___ftadd	;wreg free
  2627  0010C4  C05F  F084         	movff	?___ftadd+2,?___asftmul+4
  2628  0010C8  C05E  F083         	movff	?___ftadd+1,?___asftmul+3
  2629  0010CC  C05D  F082         	movff	?___ftadd,?___asftmul+2
  2630  0010D0  ECB0  F016         	call	___asftmul	;wreg free
  2631                           
  2632                           ;doprnt.c: 1113: _val._val = (unsigned long)temp;
  2633  0010D4  C0A5  F042         	movff	sprintf@temp,?___fttol
  2634  0010D8  C0A6  F043         	movff	sprintf@temp+1,?___fttol+1
  2635  0010DC  C0A7  F044         	movff	sprintf@temp+2,?___fttol+2
  2636  0010E0  EC86  F013         	call	___fttol	;wreg free
  2637  0010E4  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  2638  0010E8  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  2639  0010EC  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  2640  0010F0  C042  F0AD         	movff	?___fttol,sprintf@_val
  2641                           
  2642                           ;doprnt.c: 1114: }
  2643                           ;doprnt.c: 1115: while(prec && _val._val % 10 == 0) {
  2644  0010F4  D01F               	goto	l5169
  2645  0010F6                     l5165:
  2646                           
  2647                           ;doprnt.c: 1116: _val._val /= 10;
  2648  0010F6  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  2649  0010FA  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  2650  0010FE  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  2651  001102  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  2652  001106  0E0A               	movlw	10
  2653  001108  6E13               	movwf	?___lldiv+4,c
  2654  00110A  0E00               	movlw	0
  2655  00110C  6E14               	movwf	?___lldiv+5,c
  2656  00110E  0E00               	movlw	0
  2657  001110  6E15               	movwf	?___lldiv+6,c
  2658  001112  0E00               	movlw	0
  2659  001114  6E16               	movwf	?___lldiv+7,c
  2660  001116  ECEE  F014         	call	___lldiv	;wreg free
  2661  00111A  C012  F0B0         	movff	?___lldiv+3,sprintf@_val+3
  2662  00111E  C011  F0AF         	movff	?___lldiv+2,sprintf@_val+2
  2663  001122  C010  F0AE         	movff	?___lldiv+1,sprintf@_val+1
  2664  001126  C00F  F0AD         	movff	?___lldiv,sprintf@_val
  2665                           
  2666                           ;doprnt.c: 1117: prec--;
  2667  00112A  0100               	movlb	0	; () banked
  2668  00112C  0100               	movlb	0	; () banked
  2669  00112E  07B4               	decf	sprintf@prec& (0+255),f,b
  2670  001130  A0D8               	btfss	status,0,c
  2671  001132  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  2672  001134                     l5169:
  2673  001134  0100               	movlb	0	; () banked
  2674  001136  0100               	movlb	0	; () banked
  2675  001138  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2676  00113A  11B4               	iorwf	sprintf@prec& (0+255),w,b
  2677  00113C  B4D8               	btfsc	status,2,c
  2678  00113E  D038               	goto	l5177
  2679                           
  2680                           ; BSR set to: 0
  2681  001140  C0AD  F00F         	movff	sprintf@_val,?___llmod
  2682  001144  C0AE  F010         	movff	sprintf@_val+1,?___llmod+1
  2683  001148  C0AF  F011         	movff	sprintf@_val+2,?___llmod+2
  2684  00114C  C0B0  F012         	movff	sprintf@_val+3,?___llmod+3
  2685  001150  0E0A               	movlw	10
  2686  001152  6E13               	movwf	?___llmod+4,c
  2687  001154  0E00               	movlw	0
  2688  001156  6E14               	movwf	?___llmod+5,c
  2689  001158  0E00               	movlw	0
  2690  00115A  6E15               	movwf	?___llmod+6,c
  2691  00115C  0E00               	movlw	0
  2692  00115E  6E16               	movwf	?___llmod+7,c
  2693  001160  ECB2  F015         	call	___llmod	;wreg free
  2694  001164  5012               	movf	?___llmod+3,w,c
  2695  001166  100F               	iorwf	?___llmod,w,c
  2696  001168  1010               	iorwf	?___llmod+1,w,c
  2697  00116A  1011               	iorwf	?___llmod+2,w,c
  2698  00116C  A4D8               	btfss	status,2,c
  2699  00116E  D020               	goto	l5177
  2700  001170  D7C2               	goto	l5165
  2701  001172                     l5173:
  2702                           
  2703                           ;doprnt.c: 1121: if(prec <= 12)
  2704  001172  0100               	movlb	0	; () banked
  2705  001174  0100               	movlb	0	; () banked
  2706  001176  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  2707  001178  0A80               	xorlw	128
  2708  00117A  0F80               	addlw	-128
  2709  00117C  0E0D               	movlw	13
  2710  00117E  B4D8               	btfsc	status,2,c
  2711  001180  5DB4               	subwf	sprintf@prec& (0+255),w,b
  2712  001182  B0D8               	btfsc	status,0,c
  2713  001184  D015               	goto	l5177
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;doprnt.c: 1122: fval += fround(prec);
  2717  001186  0100               	movlb	0	; () banked
  2718  001188  0E00               	movlw	high sprintf@fval
  2719  00118A  0100               	movlb	0	; () banked
  2720  00118C  0100               	movlb	0	; () banked
  2721  00118E  6F81               	movwf	(?___asftadd+1)& (0+255),b
  2722  001190  0100               	movlb	0	; () banked
  2723  001192  0EB6               	movlw	low sprintf@fval
  2724  001194  0100               	movlb	0	; () banked
  2725  001196  6F80               	movwf	?___asftadd& (0+255),b
  2726  001198  C0B4  F036         	movff	sprintf@prec,?_fround
  2727  00119C  ECB5  F00D         	call	_fround	;wreg free
  2728  0011A0  C038  F084         	movff	?_fround+2,?___asftadd+4
  2729  0011A4  C037  F083         	movff	?_fround+1,?___asftadd+3
  2730  0011A8  C036  F082         	movff	?_fround,?___asftadd+2
  2731  0011AC  ECEC  F016         	call	___asftadd	;wreg free
  2732  0011B0                     l5177:
  2733                           
  2734                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2735  0011B0  0100               	movlb	0	; () banked
  2736  0011B2  0100               	movlb	0	; () banked
  2737  0011B4  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  2738  0011B6  0A80               	xorlw	128
  2739  0011B8  0F80               	addlw	-128
  2740  0011BA  0E0A               	movlw	10
  2741  0011BC  B4D8               	btfsc	status,2,c
  2742  0011BE  5DB2               	subwf	sprintf@exp& (0+255),w,b
  2743  0011C0  B0D8               	btfsc	status,0,c
  2744  0011C2  D022               	goto	l5185
  2745                           
  2746                           ; BSR set to: 0
  2747  0011C4  0E7F               	movlw	127
  2748  0011C6  0100               	movlb	0	; () banked
  2749  0011C8  0100               	movlb	0	; () banked
  2750  0011CA  15B8               	andwf	(sprintf@fval+2)& (0+255),w,b
  2751  0011CC  0100               	movlb	0	; () banked
  2752  0011CE  11B7               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2753  0011D0  0100               	movlb	0	; () banked
  2754  0011D2  11B6               	iorwf	sprintf@fval& (0+255),w,b
  2755  0011D4  B4D8               	btfsc	status,2,c
  2756  0011D6  D06D               	goto	l5201
  2757                           
  2758                           ; BSR set to: 0
  2759  0011D8  C0B6  F042         	movff	sprintf@fval,?___fttol
  2760  0011DC  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  2761  0011E0  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  2762  0011E4  EC86  F013         	call	___fttol	;wreg free
  2763  0011E8  5045               	movf	?___fttol+3,w,c
  2764  0011EA  1042               	iorwf	?___fttol,w,c
  2765  0011EC  1043               	iorwf	?___fttol+1,w,c
  2766  0011EE  1044               	iorwf	?___fttol+2,w,c
  2767  0011F0  A4D8               	btfss	status,2,c
  2768  0011F2  D05F               	goto	l5201
  2769  0011F4  0100               	movlb	0	; () banked
  2770  0011F6  0100               	movlb	0	; () banked
  2771  0011F8  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  2772  0011FA  0A80               	xorlw	128
  2773  0011FC  0F80               	addlw	-128
  2774  0011FE  0E02               	movlw	2
  2775  001200  B4D8               	btfsc	status,2,c
  2776  001202  5DB2               	subwf	sprintf@exp& (0+255),w,b
  2777  001204  A0D8               	btfss	status,0,c
  2778  001206  D055               	goto	l5201
  2779  001208                     l5185:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;doprnt.c: 1129: if(integ < 4.294967296){
  2783  001208  C0A8  F080         	movff	sprintf@integ,?___ftge
  2784  00120C  C0A9  F081         	movff	sprintf@integ+1,?___ftge+1
  2785  001210  C0AA  F082         	movff	sprintf@integ+2,?___ftge+2
  2786  001214  0E70               	movlw	112
  2787  001216  0100               	movlb	0	; () banked
  2788  001218  0100               	movlb	0	; () banked
  2789  00121A  6F83               	movwf	(?___ftge+3)& (0+255),b
  2790  00121C  0E89               	movlw	137
  2791  00121E  0100               	movlb	0	; () banked
  2792  001220  0100               	movlb	0	; () banked
  2793  001222  6F84               	movwf	(?___ftge+4)& (0+255),b
  2794  001224  0E40               	movlw	64
  2795  001226  0100               	movlb	0	; () banked
  2796  001228  0100               	movlb	0	; () banked
  2797  00122A  6F85               	movwf	(?___ftge+5)& (0+255),b
  2798  00122C  EC14  F013         	call	___ftge	;wreg free
  2799  001230  B0D8               	btfsc	status,0,c
  2800  001232  D003               	goto	l5189
  2801                           
  2802                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2803  001234  0100               	movlb	0	; () banked
  2804  001236  0EF7               	movlw	247
  2805  001238  D002               	goto	L5
  2806  00123A                     l5189:
  2807                           
  2808                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2809  00123A  0100               	movlb	0	; () banked
  2810  00123C  0EF8               	movlw	248
  2811  00123E                     L5:
  2812  00123E  0100               	movlb	0	; () banked
  2813  001240  27B2               	addwf	sprintf@exp& (0+255),f,b
  2814  001242  0EFF               	movlw	255
  2815  001244  0100               	movlb	0	; () banked
  2816  001246  23B3               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;doprnt.c: 1133: }
  2820                           ;doprnt.c: 1134: integ = scale(exp);
  2821                           
  2822                           ; BSR set to: 0
  2823  001248  C0B2  F036         	movff	sprintf@exp,?_scale
  2824  00124C  EC8D  F00B         	call	_scale	;wreg free
  2825  001250  C038  F0AA         	movff	?_scale+2,sprintf@integ+2
  2826  001254  C037  F0A9         	movff	?_scale+1,sprintf@integ+1
  2827  001258  C036  F0A8         	movff	?_scale,sprintf@integ
  2828                           
  2829                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2830  00125C  C0B6  F00F         	movff	sprintf@fval,?__tdiv_to_l_
  2831  001260  C0B7  F010         	movff	sprintf@fval+1,?__tdiv_to_l_+1
  2832  001264  C0B8  F011         	movff	sprintf@fval+2,?__tdiv_to_l_+2
  2833  001268  C0A8  F012         	movff	sprintf@integ,?__tdiv_to_l_+3
  2834  00126C  C0A9  F013         	movff	sprintf@integ+1,?__tdiv_to_l_+4
  2835  001270  C0AA  F014         	movff	sprintf@integ+2,?__tdiv_to_l_+5
  2836  001274  EC8A  F010         	call	__tdiv_to_l_	;wreg free
  2837  001278  C012  F09E         	movff	?__tdiv_to_l_+3,_sprintf$526+3
  2838  00127C  C011  F09D         	movff	?__tdiv_to_l_+2,_sprintf$526+2
  2839  001280  C010  F09C         	movff	?__tdiv_to_l_+1,_sprintf$526+1
  2840  001284  C00F  F09B         	movff	?__tdiv_to_l_,_sprintf$526
  2841  001288  C09B  F0AD         	movff	_sprintf$526,sprintf@_val
  2842  00128C  C09C  F0AE         	movff	_sprintf$526+1,sprintf@_val+1
  2843  001290  C09D  F0AF         	movff	_sprintf$526+2,sprintf@_val+2
  2844  001294  C09E  F0B0         	movff	_sprintf$526+3,sprintf@_val+3
  2845                           
  2846                           ;doprnt.c: 1138: fval = 0.0;
  2847  001298  0E00               	movlw	0
  2848  00129A  0100               	movlb	0	; () banked
  2849  00129C  0100               	movlb	0	; () banked
  2850  00129E  6FB6               	movwf	sprintf@fval& (0+255),b
  2851  0012A0  0E00               	movlw	0
  2852  0012A2  0100               	movlb	0	; () banked
  2853  0012A4  0100               	movlb	0	; () banked
  2854  0012A6  6FB7               	movwf	(sprintf@fval+1)& (0+255),b
  2855  0012A8  0E00               	movlw	0
  2856  0012AA  0100               	movlb	0	; () banked
  2857  0012AC  0100               	movlb	0	; () banked
  2858  0012AE  6FB8               	movwf	(sprintf@fval+2)& (0+255),b
  2859                           
  2860                           ;doprnt.c: 1139: } else {
  2861  0012B0  D032               	goto	l5207
  2862  0012B2                     l5201:
  2863                           
  2864                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2865  0012B2  C0B6  F042         	movff	sprintf@fval,?___fttol
  2866  0012B6  C0B7  F043         	movff	sprintf@fval+1,?___fttol+1
  2867  0012BA  C0B8  F044         	movff	sprintf@fval+2,?___fttol+2
  2868  0012BE  EC86  F013         	call	___fttol	;wreg free
  2869  0012C2  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  2870  0012C6  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  2871  0012CA  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  2872  0012CE  C042  F0AD         	movff	?___fttol,sprintf@_val
  2873                           
  2874                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2875  0012D2  0100               	movlb	0	; () banked
  2876  0012D4  0E00               	movlw	high sprintf@fval
  2877  0012D6  0100               	movlb	0	; () banked
  2878  0012D8  0100               	movlb	0	; () banked
  2879  0012DA  6F87               	movwf	(?___asftsub+1)& (0+255),b
  2880  0012DC  0100               	movlb	0	; () banked
  2881  0012DE  0EB6               	movlw	low sprintf@fval
  2882  0012E0  0100               	movlb	0	; () banked
  2883  0012E2  6F86               	movwf	?___asftsub& (0+255),b
  2884  0012E4  C0AD  F051         	movff	sprintf@_val,?___lltoft
  2885  0012E8  C0AE  F052         	movff	sprintf@_val+1,?___lltoft+1
  2886  0012EC  C0AF  F053         	movff	sprintf@_val+2,?___lltoft+2
  2887  0012F0  C0B0  F054         	movff	sprintf@_val+3,?___lltoft+3
  2888  0012F4  ECE7  F015         	call	___lltoft	;wreg free
  2889  0012F8  C053  F08A         	movff	?___lltoft+2,?___asftsub+4
  2890  0012FC  C052  F089         	movff	?___lltoft+1,?___asftsub+3
  2891  001300  C051  F088         	movff	?___lltoft,?___asftsub+2
  2892  001304  EC6E  F016         	call	___asftsub	;wreg free
  2893                           
  2894                           ;doprnt.c: 1142: exp = 0;
  2895  001308  0E00               	movlw	0
  2896  00130A  0100               	movlb	0	; () banked
  2897  00130C  0100               	movlb	0	; () banked
  2898  00130E  6FB3               	movwf	(sprintf@exp+1)& (0+255),b
  2899  001310  0E00               	movlw	0
  2900  001312  0100               	movlb	0	; () banked
  2901  001314  6FB2               	movwf	sprintf@exp& (0+255),b
  2902  001316                     l5207:
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;doprnt.c: 1143: }
  2906                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2907  001316  0100               	movlb	0	; () banked
  2908  001318  6F92               	movwf	??_sprintf& (0+255),b
  2909  00131A  0E01               	movlw	1
  2910  00131C  0100               	movlb	0	; () banked
  2911  00131E  0100               	movlb	0	; () banked
  2912  001320  6FB9               	movwf	sprintf@c& (0+255),b
  2913  001322  0100               	movlb	0	; () banked
  2914  001324  5192               	movf	??_sprintf& (0+255),w,b
  2915  001326                     
  2916                           ; BSR set to: 0
  2917  001326  0100               	movlb	0	; () banked
  2918  001328  0100               	movlb	0	; () banked
  2919  00132A  51B9               	movf	sprintf@c& (0+255),w,b
  2920  00132C  0A0A               	xorlw	10
  2921  00132E  B4D8               	btfsc	status,2,c
  2922  001330  D021               	goto	l5221
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2926                           
  2927                           ; BSR set to: 0
  2928                           
  2929                           ; BSR set to: 0
  2930  001332  0100               	movlb	0	; () banked
  2931  001334  0100               	movlb	0	; () banked
  2932  001336  51B9               	movf	sprintf@c& (0+255),w,b
  2933  001338  0D04               	mullw	4
  2934  00133A  0E00               	movlw	low _dpowers
  2935  00133C  24F3               	addwf	prodl,w,c
  2936  00133E  6EF6               	movwf	tblptrl,c
  2937  001340  0E06               	movlw	high _dpowers
  2938  001342  20F4               	addwfc	prodh,w,c
  2939  001344  6EF7               	movwf	tblptrh,c
  2940  001346  0009               	tblrd		*+
  2941  001348  50F5               	movf	tablat,w,c
  2942  00134A  0100               	movlb	0	; () banked
  2943  00134C  0100               	movlb	0	; () banked
  2944  00134E  5DAD               	subwf	sprintf@_val& (0+255),w,b
  2945  001350  0009               	tblrd		*+
  2946  001352  50F5               	movf	tablat,w,c
  2947  001354  0100               	movlb	0	; () banked
  2948  001356  59AE               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2949  001358  0009               	tblrd		*+
  2950  00135A  50F5               	movf	tablat,w,c
  2951  00135C  0100               	movlb	0	; () banked
  2952  00135E  59AF               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2953  001360  0009               	tblrd		*+
  2954  001362  50F5               	movf	tablat,w,c
  2955  001364  0100               	movlb	0	; () banked
  2956  001366  59B0               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2957  001368  A0D8               	btfss	status,0,c
  2958  00136A  D004               	goto	l5221
  2959                           
  2960                           ; BSR set to: 0
  2961                           
  2962                           ; BSR set to: 0
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;doprnt.c: 1147: break;
  2966  00136C  0100               	movlb	0	; () banked
  2967  00136E  0100               	movlb	0	; () banked
  2968  001370  2BB9               	incf	sprintf@c& (0+255),f,b
  2969  001372  D7D9               	goto	L6
  2970  001374                     l5221:
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;doprnt.c: 1182: {
  2974                           ;doprnt.c: 1195: if(flag & 0x03)
  2975  001374  0E03               	movlw	3
  2976  001376  0100               	movlb	0	; () banked
  2977  001378  0100               	movlb	0	; () banked
  2978  00137A  15AB               	andwf	sprintf@flag& (0+255),w,b
  2979  00137C  0100               	movlb	0	; () banked
  2980  00137E  6F92               	movwf	??_sprintf& (0+255),b
  2981  001380  0E00               	movlw	0
  2982  001382  0100               	movlb	0	; () banked
  2983  001384  0100               	movlb	0	; () banked
  2984  001386  15AC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2985  001388  0100               	movlb	0	; () banked
  2986  00138A  6F93               	movwf	(??_sprintf+1)& (0+255),b
  2987  00138C  0100               	movlb	0	; () banked
  2988  00138E  5193               	movf	(??_sprintf+1)& (0+255),w,b
  2989  001390  1192               	iorwf	??_sprintf& (0+255),w,b
  2990  001392  B4D8               	btfsc	status,2,c
  2991  001394  D045               	goto	l5235
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;doprnt.c: 1197: ((*sp++ = ('-')));
  2995  001396  C08B  FFD9         	movff	sprintf@sp,fsr2l
  2996  00139A  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  2997  00139E  0E2D               	movlw	45
  2998  0013A0  D03A               	goto	L7
  2999  0013A2                     l5227:
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;doprnt.c: 1207: {
  3003                           ;doprnt.c: 1208: unsigned vd = _val._val/dpowers[c];
  3004  0013A2  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  3005  0013A6  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  3006  0013AA  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  3007  0013AE  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  3008  0013B2  0100               	movlb	0	; () banked
  3009  0013B4  0100               	movlb	0	; () banked
  3010  0013B6  51B9               	movf	sprintf@c& (0+255),w,b
  3011  0013B8  0D04               	mullw	4
  3012  0013BA  0E00               	movlw	low _dpowers
  3013  0013BC  24F3               	addwf	prodl,w,c
  3014  0013BE  6EF6               	movwf	tblptrl,c
  3015  0013C0  0E06               	movlw	high _dpowers
  3016  0013C2  20F4               	addwfc	prodh,w,c
  3017  0013C4  6EF7               	movwf	tblptrh,c
  3018  0013C6  0009               	tblrd		*+
  3019  0013C8  CFF5 F013          	movff	tablat,?___lldiv+4
  3020  0013CC  0009               	tblrd		*+
  3021  0013CE  CFF5 F014          	movff	tablat,?___lldiv+5
  3022  0013D2  0009               	tblrd		*+
  3023  0013D4  CFF5 F015          	movff	tablat,?___lldiv+6
  3024  0013D8  000A               	tblrd		*-
  3025  0013DA  CFF5 F016          	movff	tablat,?___lldiv+7
  3026  0013DE  ECEE  F014         	call	___lldiv	;wreg free
  3027  0013E2  C00F  F0A1         	movff	?___lldiv,sprintf@vd
  3028  0013E6  C010  F0A2         	movff	?___lldiv+1,sprintf@vd+1
  3029                           
  3030                           ;doprnt.c: 1209: vd %= 10;
  3031  0013EA  C0A1  F00F         	movff	sprintf@vd,?___lwmod
  3032  0013EE  C0A2  F010         	movff	sprintf@vd+1,?___lwmod+1
  3033  0013F2  0E00               	movlw	0
  3034  0013F4  6E12               	movwf	?___lwmod+3,c
  3035  0013F6  0E0A               	movlw	10
  3036  0013F8  6E11               	movwf	?___lwmod+2,c
  3037  0013FA  EC4B  F016         	call	___lwmod	;wreg free
  3038  0013FE  C00F  F0A1         	movff	?___lwmod,sprintf@vd
  3039  001402  C010  F0A2         	movff	?___lwmod+1,sprintf@vd+1
  3040                           
  3041                           ;doprnt.c: 1210: ((*sp++ = ('0' + vd)));
  3042  001406  0100               	movlb	0	; () banked
  3043  001408  0100               	movlb	0	; () banked
  3044  00140A  51A1               	movf	sprintf@vd& (0+255),w,b
  3045  00140C  0F30               	addlw	48
  3046  00140E  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3047  001412  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3048  001416                     L7:
  3049  001416  6EDF               	movwf	indf2,c
  3050                           
  3051                           ; BSR set to: 0
  3052  001418  0100               	movlb	0	; () banked
  3053  00141A  0100               	movlb	0	; () banked
  3054  00141C  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3055  00141E  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3056  001420                     l5235:
  3057                           
  3058                           ; BSR set to: 0
  3059  001420  0100               	movlb	0	; () banked
  3060  001422  0100               	movlb	0	; () banked
  3061  001424  07B9               	decf	sprintf@c& (0+255),f,b
  3062  001426  0100               	movlb	0	; () banked
  3063  001428  29B9               	incf	sprintf@c& (0+255),w,b
  3064  00142A  B4D8               	btfsc	status,2,c
  3065  00142C  D010               	goto	l5243
  3066  00142E  D7B9               	goto	l5227
  3067  001430                     l5237:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;doprnt.c: 1215: ((*sp++ = ('0')));
  3071  001430  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3072  001434  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3073  001438  0E30               	movlw	48
  3074  00143A  6EDF               	movwf	indf2,c
  3075                           
  3076                           ; BSR set to: 0
  3077  00143C  0100               	movlb	0	; () banked
  3078  00143E  0100               	movlb	0	; () banked
  3079  001440  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3080  001442  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;doprnt.c: 1216: exp--;
  3084  001444  0100               	movlb	0	; () banked
  3085  001446  0100               	movlb	0	; () banked
  3086  001448  07B2               	decf	sprintf@exp& (0+255),f,b
  3087  00144A  A0D8               	btfss	status,0,c
  3088  00144C  07B3               	decf	(sprintf@exp+1)& (0+255),f,b
  3089  00144E                     l5243:
  3090                           
  3091                           ; BSR set to: 0
  3092  00144E  0100               	movlb	0	; () banked
  3093  001450  0100               	movlb	0	; () banked
  3094  001452  51B3               	movf	(sprintf@exp+1)& (0+255),w,b
  3095  001454  0A80               	xorlw	128
  3096  001456  0F80               	addlw	-128
  3097  001458  0E01               	movlw	1
  3098  00145A  B4D8               	btfsc	status,2,c
  3099  00145C  5DB2               	subwf	sprintf@exp& (0+255),w,b
  3100  00145E  B0D8               	btfsc	status,0,c
  3101  001460  D7E7               	goto	l5237
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;doprnt.c: 1217: }
  3105                           ;doprnt.c: 1218: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3106                           
  3107                           ; BSR set to: 0
  3108  001462  0100               	movlb	0	; () banked
  3109  001464  0100               	movlb	0	; () banked
  3110  001466  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3111  001468  0A80               	xorlw	128
  3112  00146A  0F80               	addlw	-128
  3113  00146C  0E09               	movlw	9
  3114  00146E  B4D8               	btfsc	status,2,c
  3115  001470  5DB4               	subwf	sprintf@prec& (0+255),w,b
  3116  001472  A0D8               	btfss	status,0,c
  3117  001474  D009               	goto	l211
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;doprnt.c: 1219: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3121  001476  0100               	movlb	0	; () banked
  3122  001478  6F92               	movwf	??_sprintf& (0+255),b
  3123  00147A  0E08               	movlw	8
  3124  00147C  0100               	movlb	0	; () banked
  3125  00147E  0100               	movlb	0	; () banked
  3126  001480  6FB9               	movwf	sprintf@c& (0+255),b
  3127  001482  0100               	movlb	0	; () banked
  3128  001484  5192               	movf	??_sprintf& (0+255),w,b
  3129  001486  D002               	goto	l5249
  3130  001488                     l211:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 1220: else
  3134                           ;doprnt.c: 1221: c = prec;
  3135  001488  C0B4  F0B9         	movff	sprintf@prec,sprintf@c
  3136  00148C                     l5249:
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;doprnt.c: 1222: prec -= c;
  3140  00148C  0100               	movlb	0	; () banked
  3141  00148E  0100               	movlb	0	; () banked
  3142  001490  51B9               	movf	sprintf@c& (0+255),w,b
  3143  001492  0100               	movlb	0	; () banked
  3144  001494  0100               	movlb	0	; () banked
  3145  001496  5FB4               	subwf	sprintf@prec& (0+255),f,b
  3146  001498  0E00               	movlw	0
  3147  00149A  0100               	movlb	0	; () banked
  3148  00149C  BFB9               	btfsc	sprintf@c& (0+255),7,b
  3149  00149E  0EFF               	movlw	255
  3150  0014A0  0100               	movlb	0	; () banked
  3151  0014A2  0100               	movlb	0	; () banked
  3152  0014A4  5BB5               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;doprnt.c: 1226: if(c)
  3156  0014A6  0100               	movlb	0	; () banked
  3157  0014A8  0100               	movlb	0	; () banked
  3158  0014AA  51B9               	movf	sprintf@c& (0+255),w,b
  3159  0014AC  B4D8               	btfsc	status,2,c
  3160  0014AE  D00A               	goto	l5257
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;doprnt.c: 1228: ((*sp++ = ('.')));
  3164  0014B0  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3165  0014B4  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3166  0014B8  0E2E               	movlw	46
  3167  0014BA  6EDF               	movwf	indf2,c
  3168                           
  3169                           ; BSR set to: 0
  3170  0014BC  0100               	movlb	0	; () banked
  3171  0014BE  0100               	movlb	0	; () banked
  3172  0014C0  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3173  0014C2  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3174  0014C4                     l5257:
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  3178  0014C4  C0B9  F036         	movff	sprintf@c,?_scale
  3179  0014C8  EC8D  F00B         	call	_scale	;wreg free
  3180  0014CC  C038  F09A         	movff	?_scale+2,_sprintf$1138+2
  3181  0014D0  C037  F099         	movff	?_scale+1,_sprintf$1138+1
  3182  0014D4  C036  F098         	movff	?_scale,_sprintf$1138
  3183                           
  3184                           ;doprnt.c: 1234: _val._val = (long)(fval * scale(c));
  3185  0014D8  C0B6  F028         	movff	sprintf@fval,?___ftmul+3
  3186  0014DC  C0B7  F029         	movff	sprintf@fval+1,?___ftmul+4
  3187  0014E0  C0B8  F02A         	movff	sprintf@fval+2,?___ftmul+5
  3188  0014E4  C098  F025         	movff	_sprintf$1138,?___ftmul
  3189  0014E8  C099  F026         	movff	_sprintf$1138+1,?___ftmul+1
  3190  0014EC  C09A  F027         	movff	_sprintf$1138+2,?___ftmul+2
  3191  0014F0  EC1B  F011         	call	___ftmul	;wreg free
  3192  0014F4  C027  F044         	movff	?___ftmul+2,?___fttol+2
  3193  0014F8  C026  F043         	movff	?___ftmul+1,?___fttol+1
  3194  0014FC  C025  F042         	movff	?___ftmul,?___fttol
  3195  001500  EC86  F013         	call	___fttol	;wreg free
  3196  001504  C045  F0B0         	movff	?___fttol+3,sprintf@_val+3
  3197  001508  C044  F0AF         	movff	?___fttol+2,sprintf@_val+2
  3198  00150C  C043  F0AE         	movff	?___fttol+1,sprintf@_val+1
  3199  001510  C042  F0AD         	movff	?___fttol,sprintf@_val
  3200                           
  3201                           ;doprnt.c: 1235: while(c--) {
  3202  001514  D067               	goto	l5271
  3203  001516                     l5261:
  3204                           
  3205                           ;doprnt.c: 1236: unsigned vd = _val._val/dpowers[c];
  3206  001516  C0AD  F00F         	movff	sprintf@_val,?___lldiv
  3207  00151A  C0AE  F010         	movff	sprintf@_val+1,?___lldiv+1
  3208  00151E  C0AF  F011         	movff	sprintf@_val+2,?___lldiv+2
  3209  001522  C0B0  F012         	movff	sprintf@_val+3,?___lldiv+3
  3210  001526  0100               	movlb	0	; () banked
  3211  001528  0100               	movlb	0	; () banked
  3212  00152A  51B9               	movf	sprintf@c& (0+255),w,b
  3213  00152C  0D04               	mullw	4
  3214  00152E  0E00               	movlw	low _dpowers
  3215  001530  24F3               	addwf	prodl,w,c
  3216  001532  6EF6               	movwf	tblptrl,c
  3217  001534  0E06               	movlw	high _dpowers
  3218  001536  20F4               	addwfc	prodh,w,c
  3219  001538  6EF7               	movwf	tblptrh,c
  3220  00153A  0009               	tblrd		*+
  3221  00153C  CFF5 F013          	movff	tablat,?___lldiv+4
  3222  001540  0009               	tblrd		*+
  3223  001542  CFF5 F014          	movff	tablat,?___lldiv+5
  3224  001546  0009               	tblrd		*+
  3225  001548  CFF5 F015          	movff	tablat,?___lldiv+6
  3226  00154C  000A               	tblrd		*-
  3227  00154E  CFF5 F016          	movff	tablat,?___lldiv+7
  3228  001552  ECEE  F014         	call	___lldiv	;wreg free
  3229  001556  C00F  F0A3         	movff	?___lldiv,sprintf@vd_528
  3230  00155A  C010  F0A4         	movff	?___lldiv+1,sprintf@vd_528+1
  3231                           
  3232                           ;doprnt.c: 1237: vd %= 10;
  3233  00155E  C0A3  F00F         	movff	sprintf@vd_528,?___lwmod
  3234  001562  C0A4  F010         	movff	sprintf@vd_528+1,?___lwmod+1
  3235  001566  0E00               	movlw	0
  3236  001568  6E12               	movwf	?___lwmod+3,c
  3237  00156A  0E0A               	movlw	10
  3238  00156C  6E11               	movwf	?___lwmod+2,c
  3239  00156E  EC4B  F016         	call	___lwmod	;wreg free
  3240  001572  C00F  F0A3         	movff	?___lwmod,sprintf@vd_528
  3241  001576  C010  F0A4         	movff	?___lwmod+1,sprintf@vd_528+1
  3242                           
  3243                           ;doprnt.c: 1238: ((*sp++ = ('0' + vd)));
  3244  00157A  0100               	movlb	0	; () banked
  3245  00157C  0100               	movlb	0	; () banked
  3246  00157E  51A3               	movf	sprintf@vd_528& (0+255),w,b
  3247  001580  0F30               	addlw	48
  3248  001582  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3249  001586  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3250  00158A  6EDF               	movwf	indf2,c
  3251                           
  3252                           ; BSR set to: 0
  3253  00158C  0100               	movlb	0	; () banked
  3254  00158E  0100               	movlb	0	; () banked
  3255  001590  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3256  001592  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;doprnt.c: 1239: _val._val %= dpowers[c];
  3260  001594  C0AD  F00F         	movff	sprintf@_val,?___llmod
  3261  001598  C0AE  F010         	movff	sprintf@_val+1,?___llmod+1
  3262  00159C  C0AF  F011         	movff	sprintf@_val+2,?___llmod+2
  3263  0015A0  C0B0  F012         	movff	sprintf@_val+3,?___llmod+3
  3264  0015A4  0100               	movlb	0	; () banked
  3265  0015A6  0100               	movlb	0	; () banked
  3266  0015A8  51B9               	movf	sprintf@c& (0+255),w,b
  3267  0015AA  0D04               	mullw	4
  3268  0015AC  0E00               	movlw	low _dpowers
  3269  0015AE  24F3               	addwf	prodl,w,c
  3270  0015B0  6EF6               	movwf	tblptrl,c
  3271  0015B2  0E06               	movlw	high _dpowers
  3272  0015B4  20F4               	addwfc	prodh,w,c
  3273  0015B6  6EF7               	movwf	tblptrh,c
  3274  0015B8  0009               	tblrd		*+
  3275  0015BA  CFF5 F013          	movff	tablat,?___llmod+4
  3276  0015BE  0009               	tblrd		*+
  3277  0015C0  CFF5 F014          	movff	tablat,?___llmod+5
  3278  0015C4  0009               	tblrd		*+
  3279  0015C6  CFF5 F015          	movff	tablat,?___llmod+6
  3280  0015CA  000A               	tblrd		*-
  3281  0015CC  CFF5 F016          	movff	tablat,?___llmod+7
  3282  0015D0  ECB2  F015         	call	___llmod	;wreg free
  3283  0015D4  C012  F0B0         	movff	?___llmod+3,sprintf@_val+3
  3284  0015D8  C011  F0AF         	movff	?___llmod+2,sprintf@_val+2
  3285  0015DC  C010  F0AE         	movff	?___llmod+1,sprintf@_val+1
  3286  0015E0  C00F  F0AD         	movff	?___llmod,sprintf@_val
  3287  0015E4                     l5271:
  3288  0015E4  0100               	movlb	0	; () banked
  3289  0015E6  0100               	movlb	0	; () banked
  3290  0015E8  07B9               	decf	sprintf@c& (0+255),f,b
  3291  0015EA  0100               	movlb	0	; () banked
  3292  0015EC  29B9               	incf	sprintf@c& (0+255),w,b
  3293  0015EE  B4D8               	btfsc	status,2,c
  3294  0015F0  D010               	goto	l5279
  3295  0015F2  D791               	goto	l5261
  3296  0015F4                     l5273:
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;doprnt.c: 1243: ((*sp++ = ('0')));
  3300  0015F4  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3301  0015F8  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3302  0015FC  0E30               	movlw	48
  3303  0015FE  6EDF               	movwf	indf2,c
  3304                           
  3305                           ; BSR set to: 0
  3306  001600  0100               	movlb	0	; () banked
  3307  001602  0100               	movlb	0	; () banked
  3308  001604  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3309  001606  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;doprnt.c: 1244: prec--;
  3313  001608  0100               	movlb	0	; () banked
  3314  00160A  0100               	movlb	0	; () banked
  3315  00160C  07B4               	decf	sprintf@prec& (0+255),f,b
  3316  00160E  A0D8               	btfss	status,0,c
  3317  001610  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  3318  001612                     l5279:
  3319                           
  3320                           ; BSR set to: 0
  3321  001612  0100               	movlb	0	; () banked
  3322  001614  0100               	movlb	0	; () banked
  3323  001616  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3324  001618  11B4               	iorwf	sprintf@prec& (0+255),w,b
  3325  00161A  B4D8               	btfsc	status,2,c
  3326  00161C  D065               	goto	l5301
  3327  00161E  D7EA               	goto	l5273
  3328  001620                     l5281:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;doprnt.c: 1253: }
  3332                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
  3333  001620  0100               	movlb	0	; () banked
  3334  001622  0100               	movlb	0	; () banked
  3335  001624  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3336  001626  11B4               	iorwf	sprintf@prec& (0+255),w,b
  3337  001628  A4D8               	btfss	status,2,c
  3338  00162A  D00C               	goto	l5287
  3339                           
  3340                           ; BSR set to: 0
  3341  00162C  0100               	movlb	0	; () banked
  3342  00162E  0100               	movlb	0	; () banked
  3343  001630  51B0               	movf	(sprintf@_val+3)& (0+255),w,b
  3344  001632  11AD               	iorwf	sprintf@_val& (0+255),w,b
  3345  001634  11AE               	iorwf	(sprintf@_val+1)& (0+255),w,b
  3346  001636  11AF               	iorwf	(sprintf@_val+2)& (0+255),w,b
  3347  001638  A4D8               	btfss	status,2,c
  3348  00163A  D004               	goto	l5287
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;doprnt.c: 1298: prec++;
  3352  00163C  0100               	movlb	0	; () banked
  3353  00163E  0100               	movlb	0	; () banked
  3354  001640  4BB4               	infsnz	sprintf@prec& (0+255),f,b
  3355  001642  2BB5               	incf	(sprintf@prec+1)& (0+255),f,b
  3356  001644                     l5287:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;doprnt.c: 1346: if(c < prec)
  3360  001644  0E80               	movlw	128
  3361  001646  0100               	movlb	0	; () banked
  3362  001648  0100               	movlb	0	; () banked
  3363  00164A  BFB9               	btfsc	sprintf@c& (0+255),7,b
  3364  00164C  0E7F               	movlw	127
  3365  00164E  6F92               	movwf	??_sprintf& (0+255),b
  3366  001650  0100               	movlb	0	; () banked
  3367  001652  0100               	movlb	0	; () banked
  3368  001654  51B4               	movf	sprintf@prec& (0+255),w,b
  3369  001656  0100               	movlb	0	; () banked
  3370  001658  0100               	movlb	0	; () banked
  3371  00165A  5DB9               	subwf	sprintf@c& (0+255),w,b
  3372  00165C  0100               	movlb	0	; () banked
  3373  00165E  0100               	movlb	0	; () banked
  3374  001660  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3375  001662  0A80               	xorlw	128
  3376  001664  0100               	movlb	0	; () banked
  3377  001666  5992               	subwfb	??_sprintf& (0+255),w,b
  3378  001668  B0D8               	btfsc	status,0,c
  3379  00166A  D003               	goto	l5291
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;doprnt.c: 1347: c = prec;
  3383  00166C  C0B4  F0B9         	movff	sprintf@prec,sprintf@c
  3384  001670  D020               	goto	l5295
  3385  001672                     l5291:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;doprnt.c: 1348: else if(prec < c)
  3389  001672  0100               	movlb	0	; () banked
  3390  001674  0100               	movlb	0	; () banked
  3391  001676  51B5               	movf	(sprintf@prec+1)& (0+255),w,b
  3392  001678  0A80               	xorlw	128
  3393  00167A  0100               	movlb	0	; () banked
  3394  00167C  6F92               	movwf	??_sprintf& (0+255),b
  3395  00167E  0100               	movlb	0	; () banked
  3396  001680  0100               	movlb	0	; () banked
  3397  001682  51B9               	movf	sprintf@c& (0+255),w,b
  3398  001684  0100               	movlb	0	; () banked
  3399  001686  0100               	movlb	0	; () banked
  3400  001688  5DB4               	subwf	sprintf@prec& (0+255),w,b
  3401  00168A  0E80               	movlw	128
  3402  00168C  0100               	movlb	0	; () banked
  3403  00168E  0100               	movlb	0	; () banked
  3404  001690  BFB9               	btfsc	sprintf@c& (0+255),7,b
  3405  001692  0E7F               	movlw	127
  3406  001694  0100               	movlb	0	; () banked
  3407  001696  5992               	subwfb	??_sprintf& (0+255),w,b
  3408  001698  B0D8               	btfsc	status,0,c
  3409  00169A  D00B               	goto	l5295
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;doprnt.c: 1349: prec = c;
  3413  00169C  0100               	movlb	0	; () banked
  3414  00169E  0100               	movlb	0	; () banked
  3415  0016A0  51B9               	movf	sprintf@c& (0+255),w,b
  3416  0016A2  0100               	movlb	0	; () banked
  3417  0016A4  0100               	movlb	0	; () banked
  3418  0016A6  6FB4               	movwf	sprintf@prec& (0+255),b
  3419  0016A8  0100               	movlb	0	; () banked
  3420  0016AA  6BB5               	clrf	(sprintf@prec+1)& (0+255),b
  3421  0016AC  0100               	movlb	0	; () banked
  3422  0016AE  BFB4               	btfsc	sprintf@prec& (0+255),7,b
  3423  0016B0  07B5               	decf	(sprintf@prec+1)& (0+255),f,b
  3424  0016B2                     l5295:
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;doprnt.c: 1429: {
  3428                           ;doprnt.c: 1445: if(flag & 0x03)
  3429  0016B2  0E03               	movlw	3
  3430  0016B4  0100               	movlb	0	; () banked
  3431  0016B6  0100               	movlb	0	; () banked
  3432  0016B8  15AB               	andwf	sprintf@flag& (0+255),w,b
  3433  0016BA  0100               	movlb	0	; () banked
  3434  0016BC  6F92               	movwf	??_sprintf& (0+255),b
  3435  0016BE  0E00               	movlw	0
  3436  0016C0  0100               	movlb	0	; () banked
  3437  0016C2  0100               	movlb	0	; () banked
  3438  0016C4  15AC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3439  0016C6  0100               	movlb	0	; () banked
  3440  0016C8  6F93               	movwf	(??_sprintf+1)& (0+255),b
  3441  0016CA  0100               	movlb	0	; () banked
  3442  0016CC  5193               	movf	(??_sprintf+1)& (0+255),w,b
  3443  0016CE  1192               	iorwf	??_sprintf& (0+255),w,b
  3444  0016D0  B4D8               	btfsc	status,2,c
  3445  0016D2  D00A               	goto	l5301
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  3449  0016D4  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3450  0016D8  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3451  0016DC  0E2D               	movlw	45
  3452  0016DE                     L3:
  3453  0016DE  6EDF               	movwf	indf2,c
  3454  0016E0                     L8:
  3455                           
  3456                           ; BSR set to: 0
  3457  0016E0  0100               	movlb	0	; () banked
  3458  0016E2  0100               	movlb	0	; () banked
  3459  0016E4  4B8B               	infsnz	sprintf@sp& (0+255),f,b
  3460  0016E6  2B8C               	incf	(sprintf@sp+1)& (0+255),f,b
  3461  0016E8                     l5301:
  3462                           
  3463                           ; BSR set to: 0
  3464  0016E8  0100               	movlb	0	; () banked
  3465  0016EA  C08D  FFF6         	movff	sprintf@f,tblptrl
  3466  0016EE  0100               	movlb	0	; () banked
  3467  0016F0  C08E  FFF7         	movff	sprintf@f+1,tblptrh
  3468  0016F4  0100               	movlb	0	; () banked
  3469  0016F6  0100               	movlb	0	; () banked
  3470  0016F8  4B8D               	infsnz	sprintf@f& (0+255),f,b
  3471  0016FA  2B8E               	incf	(sprintf@f+1)& (0+255),f,b
  3472  0016FC  0008               	tblrd		*
  3473  0016FE  0100               	movlb	0	; () banked
  3474  001700  CFF5 F0B9          	movff	tablat,sprintf@c
  3475  001704  0100               	movlb	0	; () banked
  3476  001706  67B9               	tstfsz	sprintf@c& (0+255),b
  3477  001708  EF52  F003         	goto	l4959
  3478  00170C                     l5303:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;doprnt.c: 1545: *sp = 0;
  3482  00170C  C08B  FFD9         	movff	sprintf@sp,fsr2l
  3483  001710  C08C  FFDA         	movff	sprintf@sp+1,fsr2h
  3484  001714  0E00               	movlw	0
  3485  001716  6EDF               	movwf	indf2,c
  3486                           
  3487                           ; BSR set to: 0
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;doprnt.c: 1547: return 0;
  3491                           ;	Return value of _sprintf is never used
  3492  001718  0012               	return	
  3493  00171A                     __end_of_sprintf:
  3494                           	opt stack 0
  3495                           tblptru	equ	0xFF8
  3496                           tblptrh	equ	0xFF7
  3497                           tblptrl	equ	0xFF6
  3498                           tablat	equ	0xFF5
  3499                           prodh	equ	0xFF4
  3500                           prodl	equ	0xFF3
  3501                           intcon	equ	0xFF2
  3502                           wreg	equ	0xFE8
  3503                           indf2	equ	0xFDF
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function ___lwmod *****************
  3511 ;; Defined at:
  3512 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  dividend        2   14[COMRAM] unsigned int 
  3515 ;;  divisor         2   16[COMRAM] unsigned int 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  counter         1   19[COMRAM] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  2   14[COMRAM] unsigned int 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3527 ;;      Params:         4       0       0       0       0       0       0
  3528 ;;      Locals:         1       0       0       0       0       0       0
  3529 ;;      Temps:          1       0       0       0       0       0       0
  3530 ;;      Totals:         6       0       0       0       0       0       0
  3531 ;;Total ram usage:        6 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    1
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_sprintf
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text3
  3542  002C96                     __ptext3:
  3543                           	opt stack 0
  3544  002C96                     ___lwmod:
  3545                           	opt stack 27
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;incstack = 0
  3549                           ;incstack = 0
  3550  002C96  5012               	movf	___lwmod@divisor+1,w,c
  3551  002C98  1011               	iorwf	___lwmod@divisor,w,c
  3552  002C9A  B4D8               	btfsc	status,2,c
  3553  002C9C  D01A               	goto	l781
  3554  002C9E  6E13               	movwf	??___lwmod& (0+255),c
  3555  002CA0  0E01               	movlw	1
  3556  002CA2  6E14               	movwf	___lwmod@counter,c
  3557  002CA4  5013               	movf	??___lwmod& (0+255),w,c
  3558  002CA6  D004               	goto	l4799
  3559  002CA8                     l4797:
  3560  002CA8  90D8               	bcf	status,0,c
  3561  002CAA  3611               	rlcf	___lwmod@divisor,f,c
  3562  002CAC  3612               	rlcf	___lwmod@divisor+1,f,c
  3563  002CAE  2A14               	incf	___lwmod@counter,f,c
  3564  002CB0                     l4799:
  3565  002CB0  AE12               	btfss	___lwmod@divisor+1,7,c
  3566  002CB2  D7FA               	goto	l4797
  3567  002CB4                     l4801:
  3568  002CB4  5011               	movf	___lwmod@divisor,w,c
  3569  002CB6  5C0F               	subwf	___lwmod@dividend,w,c
  3570  002CB8  5012               	movf	___lwmod@divisor+1,w,c
  3571  002CBA  5810               	subwfb	___lwmod@dividend+1,w,c
  3572  002CBC  A0D8               	btfss	status,0,c
  3573  002CBE  D004               	goto	l4805
  3574  002CC0  5011               	movf	___lwmod@divisor,w,c
  3575  002CC2  5E0F               	subwf	___lwmod@dividend,f,c
  3576  002CC4  5012               	movf	___lwmod@divisor+1,w,c
  3577  002CC6  5A10               	subwfb	___lwmod@dividend+1,f,c
  3578  002CC8                     l4805:
  3579  002CC8  90D8               	bcf	status,0,c
  3580  002CCA  3212               	rrcf	___lwmod@divisor+1,f,c
  3581  002CCC  3211               	rrcf	___lwmod@divisor,f,c
  3582  002CCE  2E14               	decfsz	___lwmod@counter,f,c
  3583  002CD0  D7F1               	goto	l4801
  3584  002CD2                     l781:
  3585  002CD2  C00F  F00F         	movff	___lwmod@dividend,?___lwmod
  3586  002CD6  C010  F010         	movff	___lwmod@dividend+1,?___lwmod+1
  3587  002CDA  0012               	return	
  3588  002CDC                     __end_of___lwmod:
  3589                           	opt stack 0
  3590                           tblptru	equ	0xFF8
  3591                           tblptrh	equ	0xFF7
  3592                           tblptrl	equ	0xFF6
  3593                           tablat	equ	0xFF5
  3594                           prodh	equ	0xFF4
  3595                           prodl	equ	0xFF3
  3596                           intcon	equ	0xFF2
  3597                           wreg	equ	0xFE8
  3598                           indf2	equ	0xFDF
  3599                           postinc2	equ	0xFDE
  3600                           postdec2	equ	0xFDD
  3601                           fsr2h	equ	0xFDA
  3602                           fsr2l	equ	0xFD9
  3603                           status	equ	0xFD8
  3604                           
  3605 ;; *************** function ___lltoft *****************
  3606 ;; Defined at:
  3607 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lltoft.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;  c               4   80[COMRAM] unsigned long 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;  exp             1   88[COMRAM] unsigned char 
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  3   80[COMRAM] float 
  3614 ;; Registers used:
  3615 ;;		wreg, status,2, status,0, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3621 ;;      Params:         4       0       0       0       0       0       0
  3622 ;;      Locals:         1       0       0       0       0       0       0
  3623 ;;      Temps:          4       0       0       0       0       0       0
  3624 ;;      Totals:         9       0       0       0       0       0       0
  3625 ;;Total ram usage:        9 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    2
  3628 ;; This function calls:
  3629 ;;		___ftpack
  3630 ;; This function is called by:
  3631 ;;		_sprintf
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text4
  3636  002BCE                     __ptext4:
  3637                           	opt stack 0
  3638  002BCE                     ___lltoft:
  3639                           	opt stack 26
  3640                           
  3641                           ;incstack = 0
  3642                           ;incstack = 0
  3643  002BCE  6E55               	movwf	??___lltoft& (0+255),c
  3644  002BD0  0E8E               	movlw	142
  3645  002BD2  6E59               	movwf	___lltoft@exp,c
  3646  002BD4  5055               	movf	??___lltoft& (0+255),w,c
  3647  002BD6  D006               	goto	l4787
  3648  002BD8                     l4785:
  3649  002BD8  90D8               	bcf	status,0,c
  3650  002BDA  3254               	rrcf	___lltoft@c+3,f,c
  3651  002BDC  3253               	rrcf	___lltoft@c+2,f,c
  3652  002BDE  3252               	rrcf	___lltoft@c+1,f,c
  3653  002BE0  3251               	rrcf	___lltoft@c,f,c
  3654  002BE2  2A59               	incf	___lltoft@exp,f,c
  3655  002BE4                     l4787:
  3656  002BE4  0E00               	movlw	0
  3657  002BE6  1451               	andwf	___lltoft@c,w,c
  3658  002BE8  6E55               	movwf	??___lltoft& (0+255),c
  3659  002BEA  0E00               	movlw	0
  3660  002BEC  1452               	andwf	___lltoft@c+1,w,c
  3661  002BEE  6E56               	movwf	(??___lltoft+1)& (0+255),c
  3662  002BF0  0E00               	movlw	0
  3663  002BF2  1453               	andwf	___lltoft@c+2,w,c
  3664  002BF4  6E57               	movwf	(??___lltoft+2)& (0+255),c
  3665  002BF6  0EFF               	movlw	255
  3666  002BF8  1454               	andwf	___lltoft@c+3,w,c
  3667  002BFA  6E58               	movwf	(??___lltoft+3)& (0+255),c
  3668  002BFC  5058               	movf	??___lltoft+3,w,c
  3669  002BFE  1055               	iorwf	??___lltoft,w,c
  3670  002C00  1056               	iorwf	??___lltoft+1,w,c
  3671  002C02  1057               	iorwf	??___lltoft+2,w,c
  3672  002C04  A4D8               	btfss	status,2,c
  3673  002C06  D7E8               	goto	l4785
  3674  002C08  C051  F00F         	movff	___lltoft@c,?___ftpack
  3675  002C0C  C052  F010         	movff	___lltoft@c+1,?___ftpack+1
  3676  002C10  C053  F011         	movff	___lltoft@c+2,?___ftpack+2
  3677  002C14  C059  F012         	movff	___lltoft@exp,?___ftpack+3
  3678  002C18  6E55               	movwf	??___lltoft& (0+255),c
  3679  002C1A  0E00               	movlw	0
  3680  002C1C  6E13               	movwf	?___ftpack+4,c
  3681  002C1E  5055               	movf	??___lltoft& (0+255),w,c
  3682  002C20  ECF6  F013         	call	___ftpack	;wreg free
  3683  002C24  C011  F053         	movff	?___ftpack+2,?___lltoft+2
  3684  002C28  C010  F052         	movff	?___ftpack+1,?___lltoft+1
  3685  002C2C  C00F  F051         	movff	?___ftpack,?___lltoft
  3686  002C30  0012               	return	
  3687  002C32                     __end_of___lltoft:
  3688                           	opt stack 0
  3689                           tblptru	equ	0xFF8
  3690                           tblptrh	equ	0xFF7
  3691                           tblptrl	equ	0xFF6
  3692                           tablat	equ	0xFF5
  3693                           prodh	equ	0xFF4
  3694                           prodl	equ	0xFF3
  3695                           intcon	equ	0xFF2
  3696                           wreg	equ	0xFE8
  3697                           indf2	equ	0xFDF
  3698                           postinc2	equ	0xFDE
  3699                           postdec2	equ	0xFDD
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704 ;; *************** function ___llmod *****************
  3705 ;; Defined at:
  3706 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;  dividend        4   14[COMRAM] unsigned long 
  3709 ;;  divisor         4   18[COMRAM] unsigned long 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  counter         1   23[COMRAM] unsigned char 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  4   14[COMRAM] unsigned long 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2, status,0
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3721 ;;      Params:         8       0       0       0       0       0       0
  3722 ;;      Locals:         1       0       0       0       0       0       0
  3723 ;;      Temps:          1       0       0       0       0       0       0
  3724 ;;      Totals:        10       0       0       0       0       0       0
  3725 ;;Total ram usage:       10 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    1
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_sprintf
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text5
  3736  002B64                     __ptext5:
  3737                           	opt stack 0
  3738  002B64                     ___llmod:
  3739                           	opt stack 27
  3740                           
  3741                           ;incstack = 0
  3742                           ;incstack = 0
  3743  002B64  5016               	movf	___llmod@divisor+3,w,c
  3744  002B66  1013               	iorwf	___llmod@divisor,w,c
  3745  002B68  1014               	iorwf	___llmod@divisor+1,w,c
  3746  002B6A  1015               	iorwf	___llmod@divisor+2,w,c
  3747  002B6C  B4D8               	btfsc	status,2,c
  3748  002B6E  D026               	goto	l712
  3749  002B70  6E17               	movwf	??___llmod& (0+255),c
  3750  002B72  0E01               	movlw	1
  3751  002B74  6E18               	movwf	___llmod@counter,c
  3752  002B76  5017               	movf	??___llmod& (0+255),w,c
  3753  002B78  D006               	goto	l4773
  3754  002B7A                     l4771:
  3755  002B7A  90D8               	bcf	status,0,c
  3756  002B7C  3613               	rlcf	___llmod@divisor,f,c
  3757  002B7E  3614               	rlcf	___llmod@divisor+1,f,c
  3758  002B80  3615               	rlcf	___llmod@divisor+2,f,c
  3759  002B82  3616               	rlcf	___llmod@divisor+3,f,c
  3760  002B84  2A18               	incf	___llmod@counter,f,c
  3761  002B86                     l4773:
  3762  002B86  AE16               	btfss	___llmod@divisor+3,7,c
  3763  002B88  D7F8               	goto	l4771
  3764  002B8A                     l4775:
  3765  002B8A  5013               	movf	___llmod@divisor,w,c
  3766  002B8C  5C0F               	subwf	___llmod@dividend,w,c
  3767  002B8E  5014               	movf	___llmod@divisor+1,w,c
  3768  002B90  5810               	subwfb	___llmod@dividend+1,w,c
  3769  002B92  5015               	movf	___llmod@divisor+2,w,c
  3770  002B94  5811               	subwfb	___llmod@dividend+2,w,c
  3771  002B96  5016               	movf	___llmod@divisor+3,w,c
  3772  002B98  5812               	subwfb	___llmod@dividend+3,w,c
  3773  002B9A  A0D8               	btfss	status,0,c
  3774  002B9C  D008               	goto	l4779
  3775  002B9E  5013               	movf	___llmod@divisor,w,c
  3776  002BA0  5E0F               	subwf	___llmod@dividend,f,c
  3777  002BA2  5014               	movf	___llmod@divisor+1,w,c
  3778  002BA4  5A10               	subwfb	___llmod@dividend+1,f,c
  3779  002BA6  5015               	movf	___llmod@divisor+2,w,c
  3780  002BA8  5A11               	subwfb	___llmod@dividend+2,f,c
  3781  002BAA  5016               	movf	___llmod@divisor+3,w,c
  3782  002BAC  5A12               	subwfb	___llmod@dividend+3,f,c
  3783  002BAE                     l4779:
  3784  002BAE  90D8               	bcf	status,0,c
  3785  002BB0  3216               	rrcf	___llmod@divisor+3,f,c
  3786  002BB2  3215               	rrcf	___llmod@divisor+2,f,c
  3787  002BB4  3214               	rrcf	___llmod@divisor+1,f,c
  3788  002BB6  3213               	rrcf	___llmod@divisor,f,c
  3789  002BB8  2E18               	decfsz	___llmod@counter,f,c
  3790  002BBA  D7E7               	goto	l4775
  3791  002BBC                     l712:
  3792  002BBC  C00F  F00F         	movff	___llmod@dividend,?___llmod
  3793  002BC0  C010  F010         	movff	___llmod@dividend+1,?___llmod+1
  3794  002BC4  C011  F011         	movff	___llmod@dividend+2,?___llmod+2
  3795  002BC8  C012  F012         	movff	___llmod@dividend+3,?___llmod+3
  3796  002BCC  0012               	return	
  3797  002BCE                     __end_of___llmod:
  3798                           	opt stack 0
  3799                           tblptru	equ	0xFF8
  3800                           tblptrh	equ	0xFF7
  3801                           tblptrl	equ	0xFF6
  3802                           tablat	equ	0xFF5
  3803                           prodh	equ	0xFF4
  3804                           prodl	equ	0xFF3
  3805                           intcon	equ	0xFF2
  3806                           wreg	equ	0xFE8
  3807                           indf2	equ	0xFDF
  3808                           postinc2	equ	0xFDE
  3809                           postdec2	equ	0xFDD
  3810                           fsr2h	equ	0xFDA
  3811                           fsr2l	equ	0xFD9
  3812                           status	equ	0xFD8
  3813                           
  3814 ;; *************** function ___lldiv *****************
  3815 ;; Defined at:
  3816 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;  dividend        4   14[COMRAM] unsigned long 
  3819 ;;  divisor         4   18[COMRAM] unsigned long 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  quotient        4   23[COMRAM] unsigned long 
  3822 ;;  counter         1   27[COMRAM] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  4   14[COMRAM] unsigned long 
  3825 ;; Registers used:
  3826 ;;		wreg, status,2, status,0
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3832 ;;      Params:         8       0       0       0       0       0       0
  3833 ;;      Locals:         5       0       0       0       0       0       0
  3834 ;;      Temps:          1       0       0       0       0       0       0
  3835 ;;      Totals:        14       0       0       0       0       0       0
  3836 ;;Total ram usage:       14 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    1
  3839 ;; This function calls:
  3840 ;;		Nothing
  3841 ;; This function is called by:
  3842 ;;		_sprintf
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text6
  3847  0029DC                     __ptext6:
  3848                           	opt stack 0
  3849  0029DC                     ___lldiv:
  3850                           	opt stack 27
  3851                           
  3852                           ;incstack = 0
  3853                           ;incstack = 0
  3854  0029DC  0E00               	movlw	0
  3855  0029DE  6E18               	movwf	___lldiv@quotient,c
  3856  0029E0  0E00               	movlw	0
  3857  0029E2  6E19               	movwf	___lldiv@quotient+1,c
  3858  0029E4  0E00               	movlw	0
  3859  0029E6  6E1A               	movwf	___lldiv@quotient+2,c
  3860  0029E8  0E00               	movlw	0
  3861  0029EA  6E1B               	movwf	___lldiv@quotient+3,c
  3862  0029EC  5016               	movf	___lldiv@divisor+3,w,c
  3863  0029EE  1013               	iorwf	___lldiv@divisor,w,c
  3864  0029F0  1014               	iorwf	___lldiv@divisor+1,w,c
  3865  0029F2  1015               	iorwf	___lldiv@divisor+2,w,c
  3866  0029F4  B4D8               	btfsc	status,2,c
  3867  0029F6  D02C               	goto	l702
  3868  0029F8  6E17               	movwf	??___lldiv& (0+255),c
  3869  0029FA  0E01               	movlw	1
  3870  0029FC  6E1C               	movwf	___lldiv@counter,c
  3871  0029FE  5017               	movf	??___lldiv& (0+255),w,c
  3872  002A00  D006               	goto	l4753
  3873  002A02                     l4751:
  3874  002A02  90D8               	bcf	status,0,c
  3875  002A04  3613               	rlcf	___lldiv@divisor,f,c
  3876  002A06  3614               	rlcf	___lldiv@divisor+1,f,c
  3877  002A08  3615               	rlcf	___lldiv@divisor+2,f,c
  3878  002A0A  3616               	rlcf	___lldiv@divisor+3,f,c
  3879  002A0C  2A1C               	incf	___lldiv@counter,f,c
  3880  002A0E                     l4753:
  3881  002A0E  AE16               	btfss	___lldiv@divisor+3,7,c
  3882  002A10  D7F8               	goto	l4751
  3883  002A12                     l4755:
  3884  002A12  90D8               	bcf	status,0,c
  3885  002A14  3618               	rlcf	___lldiv@quotient,f,c
  3886  002A16  3619               	rlcf	___lldiv@quotient+1,f,c
  3887  002A18  361A               	rlcf	___lldiv@quotient+2,f,c
  3888  002A1A  361B               	rlcf	___lldiv@quotient+3,f,c
  3889  002A1C  5013               	movf	___lldiv@divisor,w,c
  3890  002A1E  5C0F               	subwf	___lldiv@dividend,w,c
  3891  002A20  5014               	movf	___lldiv@divisor+1,w,c
  3892  002A22  5810               	subwfb	___lldiv@dividend+1,w,c
  3893  002A24  5015               	movf	___lldiv@divisor+2,w,c
  3894  002A26  5811               	subwfb	___lldiv@dividend+2,w,c
  3895  002A28  5016               	movf	___lldiv@divisor+3,w,c
  3896  002A2A  5812               	subwfb	___lldiv@dividend+3,w,c
  3897  002A2C  A0D8               	btfss	status,0,c
  3898  002A2E  D009               	goto	l4763
  3899  002A30  5013               	movf	___lldiv@divisor,w,c
  3900  002A32  5E0F               	subwf	___lldiv@dividend,f,c
  3901  002A34  5014               	movf	___lldiv@divisor+1,w,c
  3902  002A36  5A10               	subwfb	___lldiv@dividend+1,f,c
  3903  002A38  5015               	movf	___lldiv@divisor+2,w,c
  3904  002A3A  5A11               	subwfb	___lldiv@dividend+2,f,c
  3905  002A3C  5016               	movf	___lldiv@divisor+3,w,c
  3906  002A3E  5A12               	subwfb	___lldiv@dividend+3,f,c
  3907  002A40  8018               	bsf	___lldiv@quotient,0,c
  3908  002A42                     l4763:
  3909  002A42  90D8               	bcf	status,0,c
  3910  002A44  3216               	rrcf	___lldiv@divisor+3,f,c
  3911  002A46  3215               	rrcf	___lldiv@divisor+2,f,c
  3912  002A48  3214               	rrcf	___lldiv@divisor+1,f,c
  3913  002A4A  3213               	rrcf	___lldiv@divisor,f,c
  3914  002A4C  2E1C               	decfsz	___lldiv@counter,f,c
  3915  002A4E  D7E1               	goto	l4755
  3916  002A50                     l702:
  3917  002A50  C018  F00F         	movff	___lldiv@quotient,?___lldiv
  3918  002A54  C019  F010         	movff	___lldiv@quotient+1,?___lldiv+1
  3919  002A58  C01A  F011         	movff	___lldiv@quotient+2,?___lldiv+2
  3920  002A5C  C01B  F012         	movff	___lldiv@quotient+3,?___lldiv+3
  3921  002A60  0012               	return	
  3922  002A62                     __end_of___lldiv:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           wreg	equ	0xFE8
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function ___fttol *****************
  3940 ;; Defined at:
  3941 ;;		line 45 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fttol.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  f1              3   65[COMRAM] float 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  lval            4   75[COMRAM] unsigned long 
  3946 ;;  exp1            1   79[COMRAM] unsigned char 
  3947 ;;  sign1           1   74[COMRAM] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  4   65[COMRAM] long 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3957 ;;      Params:         4       0       0       0       0       0       0
  3958 ;;      Locals:         6       0       0       0       0       0       0
  3959 ;;      Temps:          5       0       0       0       0       0       0
  3960 ;;      Totals:        15       0       0       0       0       0       0
  3961 ;;Total ram usage:       15 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    1
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_sprintf
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text7
  3972  00270C                     __ptext7:
  3973                           	opt stack 0
  3974  00270C                     ___fttol:
  3975                           	opt stack 27
  3976                           
  3977                           ;incstack = 0
  3978                           ;incstack = 0
  3979  00270C  0E0F               	movlw	15
  3980  00270E  6E46               	movwf	??___fttol& (0+255),c
  3981  002710  C042  F047         	movff	___fttol@f1,??___fttol+1
  3982  002714  C043  F048         	movff	___fttol@f1+1,??___fttol+2
  3983  002718  C044  F049         	movff	___fttol@f1+2,??___fttol+3
  3984  00271C  2846               	incf	??___fttol,w,c
  3985  00271E  6E4A               	movwf	(??___fttol+4)& (0+255),c
  3986  002720  D004               	goto	u3190
  3987  002722                     u3195:
  3988  002722  90D8               	bcf	status,0,c
  3989  002724  3249               	rrcf	??___fttol+3,f,c
  3990  002726  3248               	rrcf	??___fttol+2,f,c
  3991  002728  3247               	rrcf	??___fttol+1,f,c
  3992  00272A                     u3190:
  3993  00272A  2E4A               	decfsz	(??___fttol+4)& (0+255),f,c
  3994  00272C  D7FA               	goto	u3195
  3995  00272E  5047               	movf	??___fttol+1,w,c
  3996  002730  6E50               	movwf	___fttol@exp1,c
  3997  002732  6650               	tstfsz	___fttol@exp1& (0+255),c
  3998  002734  D001               	goto	l4705
  3999  002736  D035               	goto	u3240
  4000  002738                     l4705:
  4001  002738  0E17               	movlw	23
  4002  00273A  6E46               	movwf	??___fttol& (0+255),c
  4003  00273C  C042  F047         	movff	___fttol@f1,??___fttol+1
  4004  002740  C043  F048         	movff	___fttol@f1+1,??___fttol+2
  4005  002744  C044  F049         	movff	___fttol@f1+2,??___fttol+3
  4006  002748  2846               	incf	??___fttol,w,c
  4007  00274A  6E4A               	movwf	(??___fttol+4)& (0+255),c
  4008  00274C  D004               	goto	u3210
  4009  00274E                     u3215:
  4010  00274E  90D8               	bcf	status,0,c
  4011  002750  3249               	rrcf	??___fttol+3,f,c
  4012  002752  3248               	rrcf	??___fttol+2,f,c
  4013  002754  3247               	rrcf	??___fttol+1,f,c
  4014  002756                     u3210:
  4015  002756  2E4A               	decfsz	(??___fttol+4)& (0+255),f,c
  4016  002758  D7FA               	goto	u3215
  4017  00275A  5047               	movf	??___fttol+1,w,c
  4018  00275C  6E4B               	movwf	___fttol@sign1,c
  4019  00275E  8E43               	bsf	___fttol@f1+1,7,c
  4020  002760  0EFF               	movlw	255
  4021  002762  1642               	andwf	___fttol@f1,f,c
  4022  002764  0EFF               	movlw	255
  4023  002766  1643               	andwf	___fttol@f1+1,f,c
  4024  002768  0E00               	movlw	0
  4025  00276A  1644               	andwf	___fttol@f1+2,f,c
  4026  00276C  5042               	movf	___fttol@f1,w,c
  4027  00276E  6E4C               	movwf	___fttol@lval,c
  4028  002770  5043               	movf	___fttol@f1+1,w,c
  4029  002772  6E4D               	movwf	___fttol@lval+1,c
  4030  002774  5044               	movf	___fttol@f1+2,w,c
  4031  002776  6E4E               	movwf	___fttol@lval+2,c
  4032  002778  6A4F               	clrf	___fttol@lval+3,c
  4033  00277A  0E8E               	movlw	142
  4034  00277C  5E50               	subwf	___fttol@exp1,f,c
  4035  00277E  AE50               	btfss	___fttol@exp1,7,c
  4036  002780  D00D               	goto	l4727
  4037  002782  5050               	movf	___fttol@exp1,w,c
  4038  002784  0A80               	xorlw	128
  4039  002786  0F8F               	addlw	143
  4040  002788  A0D8               	btfss	status,0,c
  4041  00278A  D00B               	goto	u3240
  4042  00278C                     l4723:
  4043  00278C  90D8               	bcf	status,0,c
  4044  00278E  324F               	rrcf	___fttol@lval+3,f,c
  4045  002790  324E               	rrcf	___fttol@lval+2,f,c
  4046  002792  324D               	rrcf	___fttol@lval+1,f,c
  4047  002794  324C               	rrcf	___fttol@lval,f,c
  4048  002796  3E50               	incfsz	___fttol@exp1,f,c
  4049  002798  D7F9               	goto	l4723
  4050  00279A  D014               	goto	l4737
  4051  00279C                     l4727:
  4052  00279C  0E17               	movlw	23
  4053  00279E  6450               	cpfsgt	___fttol@exp1,c
  4054  0027A0  D00F               	goto	l4735
  4055  0027A2                     u3240:
  4056  0027A2  0E00               	movlw	0
  4057  0027A4  6E42               	movwf	?___fttol,c
  4058  0027A6  0E00               	movlw	0
  4059  0027A8  6E43               	movwf	?___fttol+1,c
  4060  0027AA  0E00               	movlw	0
  4061  0027AC  6E44               	movwf	?___fttol+2,c
  4062  0027AE  0E00               	movlw	0
  4063  0027B0  6E45               	movwf	?___fttol+3,c
  4064  0027B2  D01B               	goto	l658
  4065  0027B4                     l4733:
  4066  0027B4  90D8               	bcf	status,0,c
  4067  0027B6  364C               	rlcf	___fttol@lval,f,c
  4068  0027B8  364D               	rlcf	___fttol@lval+1,f,c
  4069  0027BA  364E               	rlcf	___fttol@lval+2,f,c
  4070  0027BC  364F               	rlcf	___fttol@lval+3,f,c
  4071  0027BE  0650               	decf	___fttol@exp1,f,c
  4072  0027C0                     l4735:
  4073  0027C0  6650               	tstfsz	___fttol@exp1,c
  4074  0027C2  D7F8               	goto	l4733
  4075  0027C4                     l4737:
  4076  0027C4  504B               	movf	___fttol@sign1,w,c
  4077  0027C6  B4D8               	btfsc	status,2,c
  4078  0027C8  D008               	goto	l4741
  4079  0027CA  1E4F               	comf	___fttol@lval+3,f,c
  4080  0027CC  1E4E               	comf	___fttol@lval+2,f,c
  4081  0027CE  1E4D               	comf	___fttol@lval+1,f,c
  4082  0027D0  6C4C               	negf	___fttol@lval,c
  4083  0027D2  0E00               	movlw	0
  4084  0027D4  224D               	addwfc	___fttol@lval+1,f,c
  4085  0027D6  224E               	addwfc	___fttol@lval+2,f,c
  4086  0027D8  224F               	addwfc	___fttol@lval+3,f,c
  4087  0027DA                     l4741:
  4088  0027DA  C04C  F042         	movff	___fttol@lval,?___fttol
  4089  0027DE  C04D  F043         	movff	___fttol@lval+1,?___fttol+1
  4090  0027E2  C04E  F044         	movff	___fttol@lval+2,?___fttol+2
  4091  0027E6  C04F  F045         	movff	___fttol@lval+3,?___fttol+3
  4092  0027EA                     l658:
  4093  0027EA  0012               	return	
  4094  0027EC                     __end_of___fttol:
  4095                           	opt stack 0
  4096                           tblptru	equ	0xFF8
  4097                           tblptrh	equ	0xFF7
  4098                           tblptrl	equ	0xFF6
  4099                           tablat	equ	0xFF5
  4100                           prodh	equ	0xFF4
  4101                           prodl	equ	0xFF3
  4102                           intcon	equ	0xFF2
  4103                           wreg	equ	0xFE8
  4104                           indf2	equ	0xFDF
  4105                           postinc2	equ	0xFDE
  4106                           postdec2	equ	0xFDD
  4107                           fsr2h	equ	0xFDA
  4108                           fsr2l	equ	0xFD9
  4109                           status	equ	0xFD8
  4110                           
  4111 ;; *************** function ___ftneg *****************
  4112 ;; Defined at:
  4113 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftneg.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;  f1              3   89[COMRAM] float 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  3   89[COMRAM] float 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2, status,0
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4127 ;;      Params:         3       0       0       0       0       0       0
  4128 ;;      Locals:         0       0       0       0       0       0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0
  4130 ;;      Totals:         3       0       0       0       0       0       0
  4131 ;;Total ram usage:        3 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    1
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_sprintf
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           	psect	text8
  4142  002EA4                     __ptext8:
  4143                           	opt stack 0
  4144  002EA4                     ___ftneg:
  4145                           	opt stack 27
  4146                           
  4147                           ;incstack = 0
  4148                           ;incstack = 0
  4149  002EA4  0E7F               	movlw	127
  4150  002EA6  145C               	andwf	___ftneg@f1+2,w,c
  4151  002EA8  105B               	iorwf	___ftneg@f1+1,w,c
  4152  002EAA  105A               	iorwf	___ftneg@f1,w,c
  4153  002EAC  B4D8               	btfsc	status,2,c
  4154  002EAE  D006               	goto	l648
  4155  002EB0  0E00               	movlw	0
  4156  002EB2  1A5A               	xorwf	___ftneg@f1,f,c
  4157  002EB4  0E00               	movlw	0
  4158  002EB6  1A5B               	xorwf	___ftneg@f1+1,f,c
  4159  002EB8  0E80               	movlw	128
  4160  002EBA  1A5C               	xorwf	___ftneg@f1+2,f,c
  4161  002EBC                     l648:
  4162  002EBC  C05A  F05A         	movff	___ftneg@f1,?___ftneg
  4163  002EC0  C05B  F05B         	movff	___ftneg@f1+1,?___ftneg+1
  4164  002EC4  C05C  F05C         	movff	___ftneg@f1+2,?___ftneg+2
  4165  002EC8  0012               	return	
  4166  002ECA                     __end_of___ftneg:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           prodh	equ	0xFF4
  4173                           prodl	equ	0xFF3
  4174                           intcon	equ	0xFF2
  4175                           wreg	equ	0xFE8
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function ___ftge *****************
  4184 ;; Defined at:
  4185 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftge.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;  ff1             3    0[BANK0 ] float 
  4188 ;;  ff2             3    3[BANK0 ] float 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;		None
  4191 ;; Return value:  Size  Location     Type
  4192 ;;		None               void
  4193 ;; Registers used:
  4194 ;;		wreg, status,2, status,0
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4200 ;;      Params:         0       6       0       0       0       0       0
  4201 ;;      Locals:         0       0       0       0       0       0       0
  4202 ;;      Temps:          3       0       0       0       0       0       0
  4203 ;;      Totals:         3       6       0       0       0       0       0
  4204 ;;Total ram usage:        9 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    1
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_sprintf
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text9
  4215  002628                     __ptext9:
  4216                           	opt stack 0
  4217  002628                     ___ftge:
  4218                           	opt stack 27
  4219                           
  4220                           ;incstack = 0
  4221                           ;incstack = 0
  4222  002628  0100               	movlb	0	; () banked
  4223  00262A  0100               	movlb	0	; () banked
  4224  00262C  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  4225  00262E  D01D               	goto	l5329
  4226                           
  4227                           ; BSR set to: 0
  4228  002630  0100               	movlb	0	; () banked
  4229  002632  C080  F06B         	movff	___ftge@ff1,??___ftge
  4230  002636  0100               	movlb	0	; () banked
  4231  002638  C081  F06C         	movff	___ftge@ff1+1,??___ftge+1
  4232  00263C  0100               	movlb	0	; () banked
  4233  00263E  C082  F06D         	movff	___ftge@ff1+2,??___ftge+2
  4234  002642  1E6B               	comf	??___ftge,f,c
  4235  002644  1E6C               	comf	??___ftge+1,f,c
  4236  002646  1E6D               	comf	??___ftge+2,f,c
  4237  002648  2A6B               	incf	??___ftge,f,c
  4238  00264A  0E00               	movlw	0
  4239  00264C  226C               	addwfc	??___ftge+1,f,c
  4240  00264E  226D               	addwfc	??___ftge+2,f,c
  4241  002650  0E00               	movlw	0
  4242  002652  246B               	addwf	??___ftge,w,c
  4243  002654  0100               	movlb	0	; () banked
  4244  002656  0100               	movlb	0	; () banked
  4245  002658  6F80               	movwf	___ftge@ff1& (0+255),b
  4246  00265A  0E00               	movlw	0
  4247  00265C  206C               	addwfc	??___ftge+1,w,c
  4248  00265E  0100               	movlb	0	; () banked
  4249  002660  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  4250  002662  0E80               	movlw	128
  4251  002664  206D               	addwfc	??___ftge+2,w,c
  4252  002666  0100               	movlb	0	; () banked
  4253  002668  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  4254  00266A                     l5329:
  4255                           
  4256                           ; BSR set to: 0
  4257  00266A  0100               	movlb	0	; () banked
  4258  00266C  0100               	movlb	0	; () banked
  4259  00266E  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  4260  002670  D01D               	goto	l5333
  4261                           
  4262                           ; BSR set to: 0
  4263  002672  0100               	movlb	0	; () banked
  4264  002674  C083  F06B         	movff	___ftge@ff2,??___ftge
  4265  002678  0100               	movlb	0	; () banked
  4266  00267A  C084  F06C         	movff	___ftge@ff2+1,??___ftge+1
  4267  00267E  0100               	movlb	0	; () banked
  4268  002680  C085  F06D         	movff	___ftge@ff2+2,??___ftge+2
  4269  002684  1E6B               	comf	??___ftge,f,c
  4270  002686  1E6C               	comf	??___ftge+1,f,c
  4271  002688  1E6D               	comf	??___ftge+2,f,c
  4272  00268A  2A6B               	incf	??___ftge,f,c
  4273  00268C  0E00               	movlw	0
  4274  00268E  226C               	addwfc	??___ftge+1,f,c
  4275  002690  226D               	addwfc	??___ftge+2,f,c
  4276  002692  0E00               	movlw	0
  4277  002694  246B               	addwf	??___ftge,w,c
  4278  002696  0100               	movlb	0	; () banked
  4279  002698  0100               	movlb	0	; () banked
  4280  00269A  6F83               	movwf	___ftge@ff2& (0+255),b
  4281  00269C  0E00               	movlw	0
  4282  00269E  206C               	addwfc	??___ftge+1,w,c
  4283  0026A0  0100               	movlb	0	; () banked
  4284  0026A2  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  4285  0026A4  0E80               	movlw	128
  4286  0026A6  206D               	addwfc	??___ftge+2,w,c
  4287  0026A8  0100               	movlb	0	; () banked
  4288  0026AA  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  4289  0026AC                     l5333:
  4290                           
  4291                           ; BSR set to: 0
  4292  0026AC  0E00               	movlw	0
  4293  0026AE  0100               	movlb	0	; () banked
  4294  0026B0  0100               	movlb	0	; () banked
  4295  0026B2  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  4296  0026B4  0E00               	movlw	0
  4297  0026B6  0100               	movlb	0	; () banked
  4298  0026B8  0100               	movlb	0	; () banked
  4299  0026BA  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  4300  0026BC  0E80               	movlw	128
  4301  0026BE  0100               	movlb	0	; () banked
  4302  0026C0  0100               	movlb	0	; () banked
  4303  0026C2  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  4304                           
  4305                           ; BSR set to: 0
  4306  0026C4  0E00               	movlw	0
  4307  0026C6  0100               	movlb	0	; () banked
  4308  0026C8  0100               	movlb	0	; () banked
  4309  0026CA  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  4310  0026CC  0E00               	movlw	0
  4311  0026CE  0100               	movlb	0	; () banked
  4312  0026D0  0100               	movlb	0	; () banked
  4313  0026D2  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  4314  0026D4  0E80               	movlw	128
  4315  0026D6  0100               	movlb	0	; () banked
  4316  0026D8  0100               	movlb	0	; () banked
  4317  0026DA  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  4318  0026DC  0100               	movlb	0	; () banked
  4319  0026DE  0100               	movlb	0	; () banked
  4320  0026E0  5183               	movf	___ftge@ff2& (0+255),w,b
  4321  0026E2  0100               	movlb	0	; () banked
  4322  0026E4  0100               	movlb	0	; () banked
  4323  0026E6  5D80               	subwf	___ftge@ff1& (0+255),w,b
  4324  0026E8  0100               	movlb	0	; () banked
  4325  0026EA  0100               	movlb	0	; () banked
  4326  0026EC  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  4327  0026EE  0100               	movlb	0	; () banked
  4328  0026F0  0100               	movlb	0	; () banked
  4329  0026F2  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  4330  0026F4  0100               	movlb	0	; () banked
  4331  0026F6  0100               	movlb	0	; () banked
  4332  0026F8  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  4333  0026FA  0100               	movlb	0	; () banked
  4334  0026FC  0100               	movlb	0	; () banked
  4335  0026FE  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  4336  002700  B0D8               	btfsc	status,0,c
  4337  002702  D002               	goto	l5339
  4338                           
  4339                           ; BSR set to: 0
  4340  002704  90D8               	bcf	status,0,c
  4341  002706  D001               	goto	l632
  4342  002708                     l5339:
  4343                           
  4344                           ; BSR set to: 0
  4345  002708  80D8               	bsf	status,0,c
  4346  00270A                     l632:
  4347                           
  4348                           ; BSR set to: 0
  4349  00270A  0012               	return	
  4350  00270C                     __end_of___ftge:
  4351                           	opt stack 0
  4352                           tblptru	equ	0xFF8
  4353                           tblptrh	equ	0xFF7
  4354                           tblptrl	equ	0xFF6
  4355                           tablat	equ	0xFF5
  4356                           prodh	equ	0xFF4
  4357                           prodl	equ	0xFF3
  4358                           intcon	equ	0xFF2
  4359                           wreg	equ	0xFE8
  4360                           indf2	equ	0xFDF
  4361                           postinc2	equ	0xFDE
  4362                           postdec2	equ	0xFDD
  4363                           fsr2h	equ	0xFDA
  4364                           fsr2l	equ	0xFD9
  4365                           status	equ	0xFD8
  4366                           
  4367 ;; *************** function ___asftsub *****************
  4368 ;; Defined at:
  4369 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftsub.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  f1p             2    6[BANK0 ] PTR float 
  4372 ;;		 -> sprintf@fval(3), 
  4373 ;;  f2              3    8[BANK0 ] float 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  3    6[BANK0 ] float 
  4378 ;; Registers used:
  4379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4385 ;;      Params:         0       5       0       0       0       0       0
  4386 ;;      Locals:         0       0       0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0
  4388 ;;      Totals:         0       5       0       0       0       0       0
  4389 ;;Total ram usage:        5 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:    4
  4392 ;; This function calls:
  4393 ;;		___ftsub
  4394 ;; This function is called by:
  4395 ;;		_sprintf
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text10
  4400  002CDC                     __ptext10:
  4401                           	opt stack 0
  4402  002CDC                     ___asftsub:
  4403                           	opt stack 24
  4404                           
  4405                           ;	Return value of ___asftsub is never used
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;incstack = 0
  4409                           ;incstack = 0
  4410  002CDC  C086  FFD9         	movff	___asftsub@f1p,fsr2l
  4411  002CE0  C087  FFDA         	movff	___asftsub@f1p+1,fsr2h
  4412  002CE4  0100               	movlb	0	; () banked
  4413  002CE6  CFDE F080          	movff	postinc2,?___ftsub
  4414  002CEA  0100               	movlb	0	; () banked
  4415  002CEC  CFDE F081          	movff	postinc2,?___ftsub+1
  4416  002CF0  0100               	movlb	0	; () banked
  4417  002CF2  CFDD F082          	movff	postdec2,?___ftsub+2
  4418  002CF6  C088  F083         	movff	___asftsub@f2,?___ftsub+3
  4419  002CFA  C089  F084         	movff	___asftsub@f2+1,?___ftsub+4
  4420  002CFE  C08A  F085         	movff	___asftsub@f2+2,?___ftsub+5
  4421  002D02  EC8F  F016         	call	___ftsub	;wreg free
  4422  002D06  C086  FFD9         	movff	___asftsub@f1p,fsr2l
  4423  002D0A  C087  FFDA         	movff	___asftsub@f1p+1,fsr2h
  4424  002D0E  C080  FFDE         	movff	?___ftsub,postinc2
  4425  002D12  C081  FFDE         	movff	?___ftsub+1,postinc2
  4426  002D16  C082  FFDD         	movff	?___ftsub+2,postdec2
  4427  002D1A  52DD               	movf	postdec2,f,c
  4428  002D1C  0012               	return	
  4429  002D1E                     __end_of___asftsub:
  4430                           	opt stack 0
  4431                           tblptru	equ	0xFF8
  4432                           tblptrh	equ	0xFF7
  4433                           tblptrl	equ	0xFF6
  4434                           tablat	equ	0xFF5
  4435                           prodh	equ	0xFF4
  4436                           prodl	equ	0xFF3
  4437                           intcon	equ	0xFF2
  4438                           wreg	equ	0xFE8
  4439                           indf2	equ	0xFDF
  4440                           postinc2	equ	0xFDE
  4441                           postdec2	equ	0xFDD
  4442                           fsr2h	equ	0xFDA
  4443                           fsr2l	equ	0xFD9
  4444                           status	equ	0xFD8
  4445                           
  4446 ;; *************** function ___ftsub *****************
  4447 ;; Defined at:
  4448 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftsub.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  f1              3    0[BANK0 ] float 
  4451 ;;  f2              3    3[BANK0 ] float 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  3    0[BANK0 ] float 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4463 ;;      Params:         0       6       0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0
  4466 ;;      Totals:         0       6       0       0       0       0       0
  4467 ;;Total ram usage:        6 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    3
  4470 ;; This function calls:
  4471 ;;		___ftadd
  4472 ;; This function is called by:
  4473 ;;		___asftsub
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text11
  4478  002D1E                     __ptext11:
  4479                           	opt stack 0
  4480  002D1E                     ___ftsub:
  4481                           	opt stack 24
  4482                           
  4483                           ;incstack = 0
  4484                           ;incstack = 0
  4485  002D1E  0E00               	movlw	0
  4486  002D20  0100               	movlb	0	; () banked
  4487  002D22  0100               	movlb	0	; () banked
  4488  002D24  1B83               	xorwf	___ftsub@f2& (0+255),f,b
  4489  002D26  0E00               	movlw	0
  4490  002D28  0100               	movlb	0	; () banked
  4491  002D2A  0100               	movlb	0	; () banked
  4492  002D2C  1B84               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4493  002D2E  0E80               	movlw	128
  4494  002D30  0100               	movlb	0	; () banked
  4495  002D32  0100               	movlb	0	; () banked
  4496  002D34  1B85               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4497                           
  4498                           ; BSR set to: 0
  4499  002D36  C080  F05D         	movff	___ftsub@f1,?___ftadd
  4500  002D3A  C081  F05E         	movff	___ftsub@f1+1,?___ftadd+1
  4501  002D3E  C082  F05F         	movff	___ftsub@f1+2,?___ftadd+2
  4502  002D42  C083  F060         	movff	___ftsub@f2,?___ftadd+3
  4503  002D46  C084  F061         	movff	___ftsub@f2+1,?___ftadd+4
  4504  002D4A  C085  F062         	movff	___ftsub@f2+2,?___ftadd+5
  4505  002D4E  ECF5  F00E         	call	___ftadd	;wreg free
  4506  002D52  C05F  F082         	movff	?___ftadd+2,?___ftsub+2
  4507  002D56  C05E  F081         	movff	?___ftadd+1,?___ftsub+1
  4508  002D5A  C05D  F080         	movff	?___ftadd,?___ftsub
  4509  002D5E  0012               	return	
  4510  002D60                     __end_of___ftsub:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           prodh	equ	0xFF4
  4517                           prodl	equ	0xFF3
  4518                           intcon	equ	0xFF2
  4519                           wreg	equ	0xFE8
  4520                           indf2	equ	0xFDF
  4521                           postinc2	equ	0xFDE
  4522                           postdec2	equ	0xFDD
  4523                           fsr2h	equ	0xFDA
  4524                           fsr2l	equ	0xFD9
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function ___ftadd *****************
  4528 ;; Defined at:
  4529 ;;		line 87 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftadd.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  f1              3   92[COMRAM] float 
  4532 ;;  f2              3   95[COMRAM] float 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  exp1            1  105[COMRAM] unsigned char 
  4535 ;;  exp2            1  104[COMRAM] unsigned char 
  4536 ;;  sign            1  103[COMRAM] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  3   92[COMRAM] float 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2, status,0, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : 0/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4546 ;;      Params:         6       0       0       0       0       0       0
  4547 ;;      Locals:         3       0       0       0       0       0       0
  4548 ;;      Temps:          5       0       0       0       0       0       0
  4549 ;;      Totals:        14       0       0       0       0       0       0
  4550 ;;Total ram usage:       14 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    2
  4553 ;; This function calls:
  4554 ;;		___ftpack
  4555 ;; This function is called by:
  4556 ;;		_sprintf
  4557 ;;		___asftadd
  4558 ;;		___ftsub
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text12
  4563  001DEA                     __ptext12:
  4564                           	opt stack 0
  4565  001DEA                     ___ftadd:
  4566                           	opt stack 24
  4567                           
  4568                           ;incstack = 0
  4569                           ;incstack = 0
  4570  001DEA  0E0F               	movlw	15
  4571  001DEC  6E63               	movwf	??___ftadd& (0+255),c
  4572  001DEE  C05D  F064         	movff	___ftadd@f1,??___ftadd+1
  4573  001DF2  C05E  F065         	movff	___ftadd@f1+1,??___ftadd+2
  4574  001DF6  C05F  F066         	movff	___ftadd@f1+2,??___ftadd+3
  4575  001DFA  2863               	incf	??___ftadd,w,c
  4576  001DFC  6E67               	movwf	(??___ftadd+4)& (0+255),c
  4577  001DFE  D004               	goto	u2710
  4578  001E00                     u2715:
  4579  001E00  90D8               	bcf	status,0,c
  4580  001E02  3266               	rrcf	??___ftadd+3,f,c
  4581  001E04  3265               	rrcf	??___ftadd+2,f,c
  4582  001E06  3264               	rrcf	??___ftadd+1,f,c
  4583  001E08                     u2710:
  4584  001E08  2E67               	decfsz	(??___ftadd+4)& (0+255),f,c
  4585  001E0A  D7FA               	goto	u2715
  4586  001E0C  5064               	movf	??___ftadd+1,w,c
  4587  001E0E  6E6A               	movwf	___ftadd@exp1,c
  4588  001E10  0E0F               	movlw	15
  4589  001E12  6E63               	movwf	??___ftadd& (0+255),c
  4590  001E14  C060  F064         	movff	___ftadd@f2,??___ftadd+1
  4591  001E18  C061  F065         	movff	___ftadd@f2+1,??___ftadd+2
  4592  001E1C  C062  F066         	movff	___ftadd@f2+2,??___ftadd+3
  4593  001E20  2863               	incf	??___ftadd,w,c
  4594  001E22  6E67               	movwf	(??___ftadd+4)& (0+255),c
  4595  001E24  D004               	goto	u2720
  4596  001E26                     u2725:
  4597  001E26  90D8               	bcf	status,0,c
  4598  001E28  3266               	rrcf	??___ftadd+3,f,c
  4599  001E2A  3265               	rrcf	??___ftadd+2,f,c
  4600  001E2C  3264               	rrcf	??___ftadd+1,f,c
  4601  001E2E                     u2720:
  4602  001E2E  2E67               	decfsz	(??___ftadd+4)& (0+255),f,c
  4603  001E30  D7FA               	goto	u2725
  4604  001E32  5064               	movf	??___ftadd+1,w,c
  4605  001E34  6E69               	movwf	___ftadd@exp2,c
  4606  001E36  506A               	movf	___ftadd@exp1,w,c
  4607  001E38  B4D8               	btfsc	status,2,c
  4608  001E3A  D00B               	goto	l574
  4609  001E3C  5069               	movf	___ftadd@exp2,w,c
  4610  001E3E  606A               	cpfslt	___ftadd@exp1,c
  4611  001E40  D00F               	goto	l4425
  4612  001E42  506A               	movf	___ftadd@exp1,w,c
  4613  001E44  0800               	sublw	0
  4614  001E46  2469               	addwf	___ftadd@exp2,w,c
  4615  001E48  6E63               	movwf	??___ftadd& (0+255),c
  4616  001E4A  0E19               	movlw	25
  4617  001E4C  5C63               	subwf	??___ftadd,w,c
  4618  001E4E  A0D8               	btfss	status,0,c
  4619  001E50  D007               	goto	l4425
  4620  001E52                     l574:
  4621  001E52  C060  F05D         	movff	___ftadd@f2,?___ftadd
  4622  001E56  C061  F05E         	movff	___ftadd@f2+1,?___ftadd+1
  4623  001E5A  C062  F05F         	movff	___ftadd@f2+2,?___ftadd+2
  4624  001E5E  D0AA               	goto	l575
  4625  001E60                     l4425:
  4626  001E60  5069               	movf	___ftadd@exp2,w,c
  4627  001E62  B4D8               	btfsc	status,2,c
  4628  001E64  D00B               	goto	l578
  4629  001E66  506A               	movf	___ftadd@exp1,w,c
  4630  001E68  6069               	cpfslt	___ftadd@exp2,c
  4631  001E6A  D00F               	goto	l4431
  4632  001E6C  5069               	movf	___ftadd@exp2,w,c
  4633  001E6E  0800               	sublw	0
  4634  001E70  246A               	addwf	___ftadd@exp1,w,c
  4635  001E72  6E63               	movwf	??___ftadd& (0+255),c
  4636  001E74  0E19               	movlw	25
  4637  001E76  5C63               	subwf	??___ftadd,w,c
  4638  001E78  A0D8               	btfss	status,0,c
  4639  001E7A  D007               	goto	l4431
  4640  001E7C                     l578:
  4641  001E7C  C05D  F05D         	movff	___ftadd@f1,?___ftadd
  4642  001E80  C05E  F05E         	movff	___ftadd@f1+1,?___ftadd+1
  4643  001E84  C05F  F05F         	movff	___ftadd@f1+2,?___ftadd+2
  4644  001E88  D095               	goto	l575
  4645  001E8A                     l4431:
  4646  001E8A  6E63               	movwf	??___ftadd& (0+255),c
  4647  001E8C  0E06               	movlw	6
  4648  001E8E  6E68               	movwf	___ftadd@sign,c
  4649  001E90  5063               	movf	??___ftadd& (0+255),w,c
  4650  001E92  BE5F               	btfsc	___ftadd@f1+2,7,c
  4651  001E94  8E68               	bsf	___ftadd@sign,7,c
  4652  001E96  BE62               	btfsc	___ftadd@f2+2,7,c
  4653  001E98  8C68               	bsf	___ftadd@sign,6,c
  4654  001E9A  8E5E               	bsf	___ftadd@f1+1,7,c
  4655  001E9C  0EFF               	movlw	255
  4656  001E9E  165D               	andwf	___ftadd@f1,f,c
  4657  001EA0  0EFF               	movlw	255
  4658  001EA2  165E               	andwf	___ftadd@f1+1,f,c
  4659  001EA4  0E00               	movlw	0
  4660  001EA6  165F               	andwf	___ftadd@f1+2,f,c
  4661  001EA8  8E61               	bsf	___ftadd@f2+1,7,c
  4662  001EAA  0EFF               	movlw	255
  4663  001EAC  1660               	andwf	___ftadd@f2,f,c
  4664  001EAE  0EFF               	movlw	255
  4665  001EB0  1661               	andwf	___ftadd@f2+1,f,c
  4666  001EB2  0E00               	movlw	0
  4667  001EB4  1662               	andwf	___ftadd@f2+2,f,c
  4668  001EB6  5069               	movf	___ftadd@exp2,w,c
  4669  001EB8  606A               	cpfslt	___ftadd@exp1,c
  4670  001EBA  D018               	goto	l4457
  4671  001EBC                     l4447:
  4672  001EBC  90D8               	bcf	status,0,c
  4673  001EBE  3660               	rlcf	___ftadd@f2,f,c
  4674  001EC0  3661               	rlcf	___ftadd@f2+1,f,c
  4675  001EC2  3662               	rlcf	___ftadd@f2+2,f,c
  4676  001EC4  0669               	decf	___ftadd@exp2,f,c
  4677  001EC6  5069               	movf	___ftadd@exp2,w,c
  4678  001EC8  186A               	xorwf	___ftadd@exp1,w,c
  4679  001ECA  B4D8               	btfsc	status,2,c
  4680  001ECC  D00B               	goto	l4455
  4681  001ECE  0668               	decf	___ftadd@sign,f,c
  4682  001ED0  5068               	movf	___ftadd@sign& (0+255),w,c
  4683  001ED2  0B07               	andlw	7
  4684  001ED4  B4D8               	btfsc	status,2,c
  4685  001ED6  D006               	goto	l4455
  4686  001ED8  D7F1               	goto	l4447
  4687  001EDA                     l4453:
  4688  001EDA  90D8               	bcf	status,0,c
  4689  001EDC  325F               	rrcf	___ftadd@f1+2,f,c
  4690  001EDE  325E               	rrcf	___ftadd@f1+1,f,c
  4691  001EE0  325D               	rrcf	___ftadd@f1,f,c
  4692  001EE2  2A6A               	incf	___ftadd@exp1,f,c
  4693  001EE4                     l4455:
  4694  001EE4  5069               	movf	___ftadd@exp2,w,c
  4695  001EE6  626A               	cpfseq	___ftadd@exp1,c
  4696  001EE8  D7F8               	goto	l4453
  4697  001EEA  D01A               	goto	l589
  4698  001EEC                     l4457:
  4699  001EEC  506A               	movf	___ftadd@exp1,w,c
  4700  001EEE  6069               	cpfslt	___ftadd@exp2,c
  4701  001EF0  D017               	goto	l589
  4702  001EF2                     l4459:
  4703  001EF2  90D8               	bcf	status,0,c
  4704  001EF4  365D               	rlcf	___ftadd@f1,f,c
  4705  001EF6  365E               	rlcf	___ftadd@f1+1,f,c
  4706  001EF8  365F               	rlcf	___ftadd@f1+2,f,c
  4707  001EFA  066A               	decf	___ftadd@exp1,f,c
  4708  001EFC  5069               	movf	___ftadd@exp2,w,c
  4709  001EFE  186A               	xorwf	___ftadd@exp1,w,c
  4710  001F00  B4D8               	btfsc	status,2,c
  4711  001F02  D00B               	goto	l4467
  4712  001F04  0668               	decf	___ftadd@sign,f,c
  4713  001F06  5068               	movf	___ftadd@sign& (0+255),w,c
  4714  001F08  0B07               	andlw	7
  4715  001F0A  B4D8               	btfsc	status,2,c
  4716  001F0C  D006               	goto	l4467
  4717  001F0E  D7F1               	goto	l4459
  4718  001F10                     l4465:
  4719  001F10  90D8               	bcf	status,0,c
  4720  001F12  3262               	rrcf	___ftadd@f2+2,f,c
  4721  001F14  3261               	rrcf	___ftadd@f2+1,f,c
  4722  001F16  3260               	rrcf	___ftadd@f2,f,c
  4723  001F18  2A69               	incf	___ftadd@exp2,f,c
  4724  001F1A                     l4467:
  4725  001F1A  5069               	movf	___ftadd@exp2,w,c
  4726  001F1C  626A               	cpfseq	___ftadd@exp1,c
  4727  001F1E  D7F8               	goto	l4465
  4728  001F20                     l589:
  4729  001F20  AE68               	btfss	___ftadd@sign,7,c
  4730  001F22  D00C               	goto	l598
  4731  001F24  0EFF               	movlw	255
  4732  001F26  1A5D               	xorwf	___ftadd@f1,f,c
  4733  001F28  0EFF               	movlw	255
  4734  001F2A  1A5E               	xorwf	___ftadd@f1+1,f,c
  4735  001F2C  0EFF               	movlw	255
  4736  001F2E  1A5F               	xorwf	___ftadd@f1+2,f,c
  4737  001F30  0E01               	movlw	1
  4738  001F32  265D               	addwf	___ftadd@f1,f,c
  4739  001F34  0E00               	movlw	0
  4740  001F36  225E               	addwfc	___ftadd@f1+1,f,c
  4741  001F38  0E00               	movlw	0
  4742  001F3A  225F               	addwfc	___ftadd@f1+2,f,c
  4743  001F3C                     l598:
  4744  001F3C  AC68               	btfss	___ftadd@sign,6,c
  4745  001F3E  D00C               	goto	l4473
  4746  001F40  0EFF               	movlw	255
  4747  001F42  1A60               	xorwf	___ftadd@f2,f,c
  4748  001F44  0EFF               	movlw	255
  4749  001F46  1A61               	xorwf	___ftadd@f2+1,f,c
  4750  001F48  0EFF               	movlw	255
  4751  001F4A  1A62               	xorwf	___ftadd@f2+2,f,c
  4752  001F4C  0E01               	movlw	1
  4753  001F4E  2660               	addwf	___ftadd@f2,f,c
  4754  001F50  0E00               	movlw	0
  4755  001F52  2261               	addwfc	___ftadd@f2+1,f,c
  4756  001F54  0E00               	movlw	0
  4757  001F56  2262               	addwfc	___ftadd@f2+2,f,c
  4758  001F58                     l4473:
  4759  001F58  6E63               	movwf	??___ftadd& (0+255),c
  4760  001F5A  0E00               	movlw	0
  4761  001F5C  6E68               	movwf	___ftadd@sign,c
  4762  001F5E  5063               	movf	??___ftadd& (0+255),w,c
  4763  001F60  505D               	movf	___ftadd@f1,w,c
  4764  001F62  2660               	addwf	___ftadd@f2,f,c
  4765  001F64  505E               	movf	___ftadd@f1+1,w,c
  4766  001F66  2261               	addwfc	___ftadd@f2+1,f,c
  4767  001F68  505F               	movf	___ftadd@f1+2,w,c
  4768  001F6A  2262               	addwfc	___ftadd@f2+2,f,c
  4769  001F6C  AE62               	btfss	___ftadd@f2+2,7,c
  4770  001F6E  D010               	goto	l4483
  4771  001F70  0EFF               	movlw	255
  4772  001F72  1A60               	xorwf	___ftadd@f2,f,c
  4773  001F74  0EFF               	movlw	255
  4774  001F76  1A61               	xorwf	___ftadd@f2+1,f,c
  4775  001F78  0EFF               	movlw	255
  4776  001F7A  1A62               	xorwf	___ftadd@f2+2,f,c
  4777  001F7C  0E01               	movlw	1
  4778  001F7E  2660               	addwf	___ftadd@f2,f,c
  4779  001F80  0E00               	movlw	0
  4780  001F82  2261               	addwfc	___ftadd@f2+1,f,c
  4781  001F84  0E00               	movlw	0
  4782  001F86  2262               	addwfc	___ftadd@f2+2,f,c
  4783  001F88  6E63               	movwf	??___ftadd& (0+255),c
  4784  001F8A  0E01               	movlw	1
  4785  001F8C  6E68               	movwf	___ftadd@sign,c
  4786  001F8E  5063               	movf	??___ftadd& (0+255),w,c
  4787  001F90                     l4483:
  4788  001F90  C060  F00F         	movff	___ftadd@f2,?___ftpack
  4789  001F94  C061  F010         	movff	___ftadd@f2+1,?___ftpack+1
  4790  001F98  C062  F011         	movff	___ftadd@f2+2,?___ftpack+2
  4791  001F9C  C06A  F012         	movff	___ftadd@exp1,?___ftpack+3
  4792  001FA0  C068  F013         	movff	___ftadd@sign,?___ftpack+4
  4793  001FA4  ECF6  F013         	call	___ftpack	;wreg free
  4794  001FA8  C011  F05F         	movff	?___ftpack+2,?___ftadd+2
  4795  001FAC  C010  F05E         	movff	?___ftpack+1,?___ftadd+1
  4796  001FB0  C00F  F05D         	movff	?___ftpack,?___ftadd
  4797  001FB4                     l575:
  4798  001FB4  0012               	return	
  4799  001FB6                     __end_of___ftadd:
  4800                           	opt stack 0
  4801                           tblptru	equ	0xFF8
  4802                           tblptrh	equ	0xFF7
  4803                           tblptrl	equ	0xFF6
  4804                           tablat	equ	0xFF5
  4805                           prodh	equ	0xFF4
  4806                           prodl	equ	0xFF3
  4807                           intcon	equ	0xFF2
  4808                           wreg	equ	0xFE8
  4809                           indf2	equ	0xFDF
  4810                           postinc2	equ	0xFDE
  4811                           postdec2	equ	0xFDD
  4812                           fsr2h	equ	0xFDA
  4813                           fsr2l	equ	0xFD9
  4814                           status	equ	0xFD8
  4815                           
  4816 ;; *************** function ___asftmul *****************
  4817 ;; Defined at:
  4818 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftmul.c"
  4819 ;; Parameters:    Size  Location     Type
  4820 ;;  f1p             2    0[BANK0 ] PTR float 
  4821 ;;		 -> sprintf@temp(3), sprintf@integ(3), sprintf@fval(3), 
  4822 ;;  f2              3    2[BANK0 ] float 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  3    0[BANK0 ] float 
  4827 ;; Registers used:
  4828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4834 ;;      Params:         0       5       0       0       0       0       0
  4835 ;;      Locals:         0       0       0       0       0       0       0
  4836 ;;      Temps:          0       0       0       0       0       0       0
  4837 ;;      Totals:         0       5       0       0       0       0       0
  4838 ;;Total ram usage:        5 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    3
  4841 ;; This function calls:
  4842 ;;		___ftmul
  4843 ;; This function is called by:
  4844 ;;		_sprintf
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text13
  4849  002D60                     __ptext13:
  4850                           	opt stack 0
  4851  002D60                     ___asftmul:
  4852                           	opt stack 25
  4853                           
  4854                           ;	Return value of ___asftmul is never used
  4855                           
  4856                           ;incstack = 0
  4857                           ;incstack = 0
  4858  002D60  C080  FFD9         	movff	___asftmul@f1p,fsr2l
  4859  002D64  C081  FFDA         	movff	___asftmul@f1p+1,fsr2h
  4860  002D68  CFDE F025          	movff	postinc2,?___ftmul
  4861  002D6C  CFDE F026          	movff	postinc2,?___ftmul+1
  4862  002D70  CFDD F027          	movff	postdec2,?___ftmul+2
  4863  002D74  C082  F028         	movff	___asftmul@f2,?___ftmul+3
  4864  002D78  C083  F029         	movff	___asftmul@f2+1,?___ftmul+4
  4865  002D7C  C084  F02A         	movff	___asftmul@f2+2,?___ftmul+5
  4866  002D80  EC1B  F011         	call	___ftmul	;wreg free
  4867  002D84  C080  FFD9         	movff	___asftmul@f1p,fsr2l
  4868  002D88  C081  FFDA         	movff	___asftmul@f1p+1,fsr2h
  4869  002D8C  C025  FFDE         	movff	?___ftmul,postinc2
  4870  002D90  C026  FFDE         	movff	?___ftmul+1,postinc2
  4871  002D94  C027  FFDD         	movff	?___ftmul+2,postdec2
  4872  002D98  52DD               	movf	postdec2,f,c
  4873  002D9A  0012               	return	
  4874  002D9C                     __end_of___asftmul:
  4875                           	opt stack 0
  4876                           tblptru	equ	0xFF8
  4877                           tblptrh	equ	0xFF7
  4878                           tblptrl	equ	0xFF6
  4879                           tablat	equ	0xFF5
  4880                           prodh	equ	0xFF4
  4881                           prodl	equ	0xFF3
  4882                           intcon	equ	0xFF2
  4883                           wreg	equ	0xFE8
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function ___asftdiv *****************
  4892 ;; Defined at:
  4893 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftdiv.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;  f1p             2   70[COMRAM] PTR float 
  4896 ;;		 -> sprintf@fval(3), 
  4897 ;;  f2              3   72[COMRAM] float 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  3   70[COMRAM] float 
  4902 ;; Registers used:
  4903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4909 ;;      Params:         5       0       0       0       0       0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0
  4912 ;;      Totals:         5       0       0       0       0       0       0
  4913 ;;Total ram usage:        5 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    3
  4916 ;; This function calls:
  4917 ;;		___ftdiv
  4918 ;; This function is called by:
  4919 ;;		_sprintf
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text14
  4924  002D9C                     __ptext14:
  4925                           	opt stack 0
  4926  002D9C                     ___asftdiv:
  4927                           	opt stack 25
  4928                           
  4929                           ;	Return value of ___asftdiv is never used
  4930                           
  4931                           ;incstack = 0
  4932                           ;incstack = 0
  4933  002D9C  C047  FFD9         	movff	___asftdiv@f1p,fsr2l
  4934  002DA0  C048  FFDA         	movff	___asftdiv@f1p+1,fsr2h
  4935  002DA4  CFDE F036          	movff	postinc2,?___ftdiv
  4936  002DA8  CFDE F037          	movff	postinc2,?___ftdiv+1
  4937  002DAC  CFDD F038          	movff	postdec2,?___ftdiv+2
  4938  002DB0  C049  F039         	movff	___asftdiv@f2,?___ftdiv+3
  4939  002DB4  C04A  F03A         	movff	___asftdiv@f2+1,?___ftdiv+4
  4940  002DB8  C04B  F03B         	movff	___asftdiv@f2+2,?___ftdiv+5
  4941  002DBC  ECA3  F011         	call	___ftdiv	;wreg free
  4942  002DC0  C047  FFD9         	movff	___asftdiv@f1p,fsr2l
  4943  002DC4  C048  FFDA         	movff	___asftdiv@f1p+1,fsr2h
  4944  002DC8  C036  FFDE         	movff	?___ftdiv,postinc2
  4945  002DCC  C037  FFDE         	movff	?___ftdiv+1,postinc2
  4946  002DD0  C038  FFDD         	movff	?___ftdiv+2,postdec2
  4947  002DD4  52DD               	movf	postdec2,f,c
  4948  002DD6  0012               	return	
  4949  002DD8                     __end_of___asftdiv:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           intcon	equ	0xFF2
  4958                           wreg	equ	0xFE8
  4959                           indf2	equ	0xFDF
  4960                           postinc2	equ	0xFDE
  4961                           postdec2	equ	0xFDD
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function ___ftdiv *****************
  4967 ;; Defined at:
  4968 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftdiv.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  f1              3   53[COMRAM] float 
  4971 ;;  f2              3   56[COMRAM] float 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;  f3              3   65[COMRAM] float 
  4974 ;;  sign            1   69[COMRAM] unsigned char 
  4975 ;;  exp             1   68[COMRAM] unsigned char 
  4976 ;;  cntr            1   64[COMRAM] unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  3   53[COMRAM] float 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4986 ;;      Params:         6       0       0       0       0       0       0
  4987 ;;      Locals:         6       0       0       0       0       0       0
  4988 ;;      Temps:          5       0       0       0       0       0       0
  4989 ;;      Totals:        17       0       0       0       0       0       0
  4990 ;;Total ram usage:       17 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    2
  4993 ;; This function calls:
  4994 ;;		___ftpack
  4995 ;; This function is called by:
  4996 ;;		_main
  4997 ;;		___asftdiv
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text15
  5002  002346                     __ptext15:
  5003                           	opt stack 0
  5004  002346                     ___ftdiv:
  5005                           	opt stack 27
  5006                           
  5007                           ;incstack = 0
  5008                           ;incstack = 0
  5009  002346  0E0F               	movlw	15
  5010  002348  6E3C               	movwf	??___ftdiv& (0+255),c
  5011  00234A  C036  F03D         	movff	___ftdiv@f1,??___ftdiv+1
  5012  00234E  C037  F03E         	movff	___ftdiv@f1+1,??___ftdiv+2
  5013  002352  C038  F03F         	movff	___ftdiv@f1+2,??___ftdiv+3
  5014  002356  283C               	incf	??___ftdiv,w,c
  5015  002358  6E40               	movwf	(??___ftdiv+4)& (0+255),c
  5016  00235A  D004               	goto	u2920
  5017  00235C                     u2925:
  5018  00235C  90D8               	bcf	status,0,c
  5019  00235E  323F               	rrcf	??___ftdiv+3,f,c
  5020  002360  323E               	rrcf	??___ftdiv+2,f,c
  5021  002362  323D               	rrcf	??___ftdiv+1,f,c
  5022  002364                     u2920:
  5023  002364  2E40               	decfsz	(??___ftdiv+4)& (0+255),f,c
  5024  002366  D7FA               	goto	u2925
  5025  002368  503D               	movf	??___ftdiv+1,w,c
  5026  00236A  6E45               	movwf	___ftdiv@exp,c
  5027  00236C  6645               	tstfsz	___ftdiv@exp& (0+255),c
  5028  00236E  D001               	goto	l4497
  5029  002370  D015               	goto	u2950
  5030  002372                     l4497:
  5031  002372  0E0F               	movlw	15
  5032  002374  6E3C               	movwf	??___ftdiv& (0+255),c
  5033  002376  C039  F03D         	movff	___ftdiv@f2,??___ftdiv+1
  5034  00237A  C03A  F03E         	movff	___ftdiv@f2+1,??___ftdiv+2
  5035  00237E  C03B  F03F         	movff	___ftdiv@f2+2,??___ftdiv+3
  5036  002382  283C               	incf	??___ftdiv,w,c
  5037  002384  6E40               	movwf	(??___ftdiv+4)& (0+255),c
  5038  002386  D004               	goto	u2940
  5039  002388                     u2945:
  5040  002388  90D8               	bcf	status,0,c
  5041  00238A  323F               	rrcf	??___ftdiv+3,f,c
  5042  00238C  323E               	rrcf	??___ftdiv+2,f,c
  5043  00238E  323D               	rrcf	??___ftdiv+1,f,c
  5044  002390                     u2940:
  5045  002390  2E40               	decfsz	(??___ftdiv+4)& (0+255),f,c
  5046  002392  D7FA               	goto	u2945
  5047  002394  503D               	movf	??___ftdiv+1,w,c
  5048  002396  6E46               	movwf	___ftdiv@sign,c
  5049  002398  6646               	tstfsz	___ftdiv@sign& (0+255),c
  5050  00239A  D007               	goto	l4503
  5051  00239C                     u2950:
  5052  00239C  0E00               	movlw	0
  5053  00239E  6E36               	movwf	?___ftdiv,c
  5054  0023A0  0E00               	movlw	0
  5055  0023A2  6E37               	movwf	?___ftdiv+1,c
  5056  0023A4  0E00               	movlw	0
  5057  0023A6  6E38               	movwf	?___ftdiv+2,c
  5058  0023A8  D04C               	goto	l606
  5059  0023AA                     l4503:
  5060  0023AA  0E00               	movlw	0
  5061  0023AC  6E42               	movwf	___ftdiv@f3,c
  5062  0023AE  0E00               	movlw	0
  5063  0023B0  6E43               	movwf	___ftdiv@f3+1,c
  5064  0023B2  0E00               	movlw	0
  5065  0023B4  6E44               	movwf	___ftdiv@f3+2,c
  5066  0023B6  5046               	movf	___ftdiv@sign,w,c
  5067  0023B8  0F89               	addlw	137
  5068  0023BA  5E45               	subwf	___ftdiv@exp,f,c
  5069  0023BC  C038  F046         	movff	___ftdiv@f1+2,___ftdiv@sign
  5070  0023C0  503B               	movf	(___ftdiv@f2+2)& (0+255),w,c
  5071  0023C2  1A46               	xorwf	___ftdiv@sign,f,c
  5072  0023C4  0E80               	movlw	128
  5073  0023C6  1646               	andwf	___ftdiv@sign,f,c
  5074  0023C8  8E37               	bsf	___ftdiv@f1+1,7,c
  5075  0023CA  0EFF               	movlw	255
  5076  0023CC  1636               	andwf	___ftdiv@f1,f,c
  5077  0023CE  0EFF               	movlw	255
  5078  0023D0  1637               	andwf	___ftdiv@f1+1,f,c
  5079  0023D2  0E00               	movlw	0
  5080  0023D4  1638               	andwf	___ftdiv@f1+2,f,c
  5081  0023D6  8E3A               	bsf	___ftdiv@f2+1,7,c
  5082  0023D8  0EFF               	movlw	255
  5083  0023DA  1639               	andwf	___ftdiv@f2,f,c
  5084  0023DC  0EFF               	movlw	255
  5085  0023DE  163A               	andwf	___ftdiv@f2+1,f,c
  5086  0023E0  0E00               	movlw	0
  5087  0023E2  163B               	andwf	___ftdiv@f2+2,f,c
  5088  0023E4  6E3C               	movwf	??___ftdiv& (0+255),c
  5089  0023E6  0E18               	movlw	24
  5090  0023E8  6E41               	movwf	___ftdiv@cntr,c
  5091  0023EA  503C               	movf	??___ftdiv& (0+255),w,c
  5092  0023EC                     l608:
  5093  0023EC  90D8               	bcf	status,0,c
  5094  0023EE  3642               	rlcf	___ftdiv@f3,f,c
  5095  0023F0  3643               	rlcf	___ftdiv@f3+1,f,c
  5096  0023F2  3644               	rlcf	___ftdiv@f3+2,f,c
  5097  0023F4  5039               	movf	___ftdiv@f2,w,c
  5098  0023F6  5C36               	subwf	___ftdiv@f1,w,c
  5099  0023F8  503A               	movf	___ftdiv@f2+1,w,c
  5100  0023FA  5837               	subwfb	___ftdiv@f1+1,w,c
  5101  0023FC  503B               	movf	___ftdiv@f2+2,w,c
  5102  0023FE  5838               	subwfb	___ftdiv@f1+2,w,c
  5103  002400  A0D8               	btfss	status,0,c
  5104  002402  D007               	goto	l609
  5105  002404  5039               	movf	___ftdiv@f2,w,c
  5106  002406  5E36               	subwf	___ftdiv@f1,f,c
  5107  002408  503A               	movf	___ftdiv@f2+1,w,c
  5108  00240A  5A37               	subwfb	___ftdiv@f1+1,f,c
  5109  00240C  503B               	movf	___ftdiv@f2+2,w,c
  5110  00240E  5A38               	subwfb	___ftdiv@f1+2,f,c
  5111  002410  8042               	bsf	___ftdiv@f3,0,c
  5112  002412                     l609:
  5113  002412  90D8               	bcf	status,0,c
  5114  002414  3636               	rlcf	___ftdiv@f1,f,c
  5115  002416  3637               	rlcf	___ftdiv@f1+1,f,c
  5116  002418  3638               	rlcf	___ftdiv@f1+2,f,c
  5117  00241A  2E41               	decfsz	___ftdiv@cntr,f,c
  5118  00241C  D7E7               	goto	l608
  5119  00241E  C042  F00F         	movff	___ftdiv@f3,?___ftpack
  5120  002422  C043  F010         	movff	___ftdiv@f3+1,?___ftpack+1
  5121  002426  C044  F011         	movff	___ftdiv@f3+2,?___ftpack+2
  5122  00242A  C045  F012         	movff	___ftdiv@exp,?___ftpack+3
  5123  00242E  C046  F013         	movff	___ftdiv@sign,?___ftpack+4
  5124  002432  ECF6  F013         	call	___ftpack	;wreg free
  5125  002436  C011  F038         	movff	?___ftpack+2,?___ftdiv+2
  5126  00243A  C010  F037         	movff	?___ftpack+1,?___ftdiv+1
  5127  00243E  C00F  F036         	movff	?___ftpack,?___ftdiv
  5128  002442                     l606:
  5129  002442  0012               	return	
  5130  002444                     __end_of___ftdiv:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodh	equ	0xFF4
  5137                           prodl	equ	0xFF3
  5138                           intcon	equ	0xFF2
  5139                           wreg	equ	0xFE8
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function ___asftadd *****************
  5148 ;; Defined at:
  5149 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asftadd.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  f1p             2    0[BANK0 ] PTR float 
  5152 ;;		 -> sprintf@fval(3), 
  5153 ;;  f2              3    2[BANK0 ] float 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;		None
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  3    0[BANK0 ] float 
  5158 ;; Registers used:
  5159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5165 ;;      Params:         0       5       0       0       0       0       0
  5166 ;;      Locals:         0       0       0       0       0       0       0
  5167 ;;      Temps:          0       0       0       0       0       0       0
  5168 ;;      Totals:         0       5       0       0       0       0       0
  5169 ;;Total ram usage:        5 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    3
  5172 ;; This function calls:
  5173 ;;		___ftadd
  5174 ;; This function is called by:
  5175 ;;		_sprintf
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text16
  5180  002DD8                     __ptext16:
  5181                           	opt stack 0
  5182  002DD8                     ___asftadd:
  5183                           	opt stack 25
  5184                           
  5185                           ;	Return value of ___asftadd is never used
  5186                           
  5187                           ;incstack = 0
  5188                           ;incstack = 0
  5189  002DD8  C080  FFD9         	movff	___asftadd@f1p,fsr2l
  5190  002DDC  C081  FFDA         	movff	___asftadd@f1p+1,fsr2h
  5191  002DE0  CFDE F05D          	movff	postinc2,?___ftadd
  5192  002DE4  CFDE F05E          	movff	postinc2,?___ftadd+1
  5193  002DE8  CFDD F05F          	movff	postdec2,?___ftadd+2
  5194  002DEC  C082  F060         	movff	___asftadd@f2,?___ftadd+3
  5195  002DF0  C083  F061         	movff	___asftadd@f2+1,?___ftadd+4
  5196  002DF4  C084  F062         	movff	___asftadd@f2+2,?___ftadd+5
  5197  002DF8  ECF5  F00E         	call	___ftadd	;wreg free
  5198  002DFC  C080  FFD9         	movff	___asftadd@f1p,fsr2l
  5199  002E00  C081  FFDA         	movff	___asftadd@f1p+1,fsr2h
  5200  002E04  C05D  FFDE         	movff	?___ftadd,postinc2
  5201  002E08  C05E  FFDE         	movff	?___ftadd+1,postinc2
  5202  002E0C  C05F  FFDD         	movff	?___ftadd+2,postdec2
  5203  002E10  52DD               	movf	postdec2,f,c
  5204  002E12  0012               	return	
  5205  002E14                     __end_of___asftadd:
  5206                           	opt stack 0
  5207                           tblptru	equ	0xFF8
  5208                           tblptrh	equ	0xFF7
  5209                           tblptrl	equ	0xFF6
  5210                           tablat	equ	0xFF5
  5211                           prodh	equ	0xFF4
  5212                           prodl	equ	0xFF3
  5213                           intcon	equ	0xFF2
  5214                           wreg	equ	0xFE8
  5215                           indf2	equ	0xFDF
  5216                           postinc2	equ	0xFDE
  5217                           postdec2	equ	0xFDD
  5218                           fsr2h	equ	0xFDA
  5219                           fsr2l	equ	0xFD9
  5220                           status	equ	0xFD8
  5221                           
  5222 ;; *************** function __div_to_l_ *****************
  5223 ;; Defined at:
  5224 ;;		line 61 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldivl.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  f1              3   14[COMRAM] float 
  5227 ;;  f2              3   17[COMRAM] float 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  quot            4   21[COMRAM] unsigned long 
  5230 ;;  exp1            1   26[COMRAM] unsigned char 
  5231 ;;  cntr            1   25[COMRAM] unsigned char 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  4   14[COMRAM] unsigned long 
  5234 ;; Registers used:
  5235 ;;		wreg, status,2, status,0
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5241 ;;      Params:         6       0       0       0       0       0       0
  5242 ;;      Locals:         6       0       0       0       0       0       0
  5243 ;;      Temps:          1       0       0       0       0       0       0
  5244 ;;      Totals:        13       0       0       0       0       0       0
  5245 ;;Total ram usage:       13 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    1
  5248 ;; This function calls:
  5249 ;;		Nothing
  5250 ;; This function is called by:
  5251 ;;		_sprintf
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text17
  5256  002444                     __ptext17:
  5257                           	opt stack 0
  5258  002444                     __div_to_l_:
  5259                           	opt stack 27
  5260                           
  5261                           ;incstack = 0
  5262                           ;incstack = 0
  5263  002444  3411               	rlcf	(__div_to_l_@f1+2)& (0+255),w,c
  5264  002446  3412               	rlcf	(__div_to_l_@f1+3)& (0+255),w,c
  5265  002448  6E1B               	movwf	__div_to_l_@exp1,c
  5266  00244A  661B               	tstfsz	__div_to_l_@exp1& (0+255),c
  5267  00244C  D001               	goto	l4329
  5268  00244E  D05A               	goto	u2620
  5269  002450                     l4329:
  5270  002450  3414               	rlcf	(__div_to_l_@f2+2)& (0+255),w,c
  5271  002452  3415               	rlcf	(__div_to_l_@f2+3)& (0+255),w,c
  5272  002454  6E1A               	movwf	__div_to_l_@cntr,c
  5273  002456  661A               	tstfsz	__div_to_l_@cntr& (0+255),c
  5274  002458  D001               	goto	l4335
  5275  00245A  D054               	goto	u2620
  5276  00245C                     l4335:
  5277  00245C  8E11               	bsf	__div_to_l_@f1+2,7,c
  5278  00245E  0EFF               	movlw	255
  5279  002460  160F               	andwf	__div_to_l_@f1,f,c
  5280  002462  0EFF               	movlw	255
  5281  002464  1610               	andwf	__div_to_l_@f1+1,f,c
  5282  002466  0EFF               	movlw	255
  5283  002468  1611               	andwf	__div_to_l_@f1+2,f,c
  5284  00246A  0E00               	movlw	0
  5285  00246C  1612               	andwf	__div_to_l_@f1+3,f,c
  5286  00246E  8E14               	bsf	__div_to_l_@f2+2,7,c
  5287  002470  0EFF               	movlw	255
  5288  002472  1612               	andwf	__div_to_l_@f2,f,c
  5289  002474  0EFF               	movlw	255
  5290  002476  1613               	andwf	__div_to_l_@f2+1,f,c
  5291  002478  0EFF               	movlw	255
  5292  00247A  1614               	andwf	__div_to_l_@f2+2,f,c
  5293  00247C  0E00               	movlw	0
  5294  00247E  1615               	andwf	__div_to_l_@f2+3,f,c
  5295  002480  0E00               	movlw	0
  5296  002482  6E16               	movwf	__div_to_l_@quot,c
  5297  002484  0E00               	movlw	0
  5298  002486  6E17               	movwf	__div_to_l_@quot+1,c
  5299  002488  0E00               	movlw	0
  5300  00248A  6E18               	movwf	__div_to_l_@quot+2,c
  5301  00248C  0E00               	movlw	0
  5302  00248E  6E19               	movwf	__div_to_l_@quot+3,c
  5303  002490  0E7F               	movlw	127
  5304  002492  5E1B               	subwf	__div_to_l_@exp1,f,c
  5305  002494  501A               	movf	__div_to_l_@cntr,w,c
  5306  002496  0FA0               	addlw	160
  5307  002498  5E1B               	subwf	__div_to_l_@exp1,f,c
  5308  00249A  6E15               	movwf	??__div_to_l_& (0+255),c
  5309  00249C  0E20               	movlw	32
  5310  00249E  6E1A               	movwf	__div_to_l_@cntr,c
  5311  0024A0  5015               	movf	??__div_to_l_& (0+255),w,c
  5312  0024A2                     l498:
  5313  0024A2  90D8               	bcf	status,0,c
  5314  0024A4  3616               	rlcf	__div_to_l_@quot,f,c
  5315  0024A6  3617               	rlcf	__div_to_l_@quot+1,f,c
  5316  0024A8  3618               	rlcf	__div_to_l_@quot+2,f,c
  5317  0024AA  3619               	rlcf	__div_to_l_@quot+3,f,c
  5318  0024AC  5012               	movf	__div_to_l_@f2,w,c
  5319  0024AE  5C0F               	subwf	__div_to_l_@f1,w,c
  5320  0024B0  5013               	movf	__div_to_l_@f2+1,w,c
  5321  0024B2  5810               	subwfb	__div_to_l_@f1+1,w,c
  5322  0024B4  5014               	movf	__div_to_l_@f2+2,w,c
  5323  0024B6  5811               	subwfb	__div_to_l_@f1+2,w,c
  5324  0024B8  5015               	movf	__div_to_l_@f2+3,w,c
  5325  0024BA  5812               	subwfb	__div_to_l_@f1+3,w,c
  5326  0024BC  A0D8               	btfss	status,0,c
  5327  0024BE  D009               	goto	l4355
  5328  0024C0  5012               	movf	__div_to_l_@f2,w,c
  5329  0024C2  5E0F               	subwf	__div_to_l_@f1,f,c
  5330  0024C4  5013               	movf	__div_to_l_@f2+1,w,c
  5331  0024C6  5A10               	subwfb	__div_to_l_@f1+1,f,c
  5332  0024C8  5014               	movf	__div_to_l_@f2+2,w,c
  5333  0024CA  5A11               	subwfb	__div_to_l_@f1+2,f,c
  5334  0024CC  5015               	movf	__div_to_l_@f2+3,w,c
  5335  0024CE  5A12               	subwfb	__div_to_l_@f1+3,f,c
  5336  0024D0  8016               	bsf	__div_to_l_@quot,0,c
  5337  0024D2                     l4355:
  5338  0024D2  90D8               	bcf	status,0,c
  5339  0024D4  360F               	rlcf	__div_to_l_@f1,f,c
  5340  0024D6  3610               	rlcf	__div_to_l_@f1+1,f,c
  5341  0024D8  3611               	rlcf	__div_to_l_@f1+2,f,c
  5342  0024DA  3612               	rlcf	__div_to_l_@f1+3,f,c
  5343  0024DC  2E1A               	decfsz	__div_to_l_@cntr,f,c
  5344  0024DE  D7E1               	goto	l498
  5345  0024E0  AE1B               	btfss	__div_to_l_@exp1,7,c
  5346  0024E2  D00D               	goto	l4369
  5347  0024E4  501B               	movf	__div_to_l_@exp1,w,c
  5348  0024E6  0A80               	xorlw	128
  5349  0024E8  0F9F               	addlw	159
  5350  0024EA  A0D8               	btfss	status,0,c
  5351  0024EC  D00B               	goto	u2620
  5352  0024EE                     l4365:
  5353  0024EE  90D8               	bcf	status,0,c
  5354  0024F0  3219               	rrcf	__div_to_l_@quot+3,f,c
  5355  0024F2  3218               	rrcf	__div_to_l_@quot+2,f,c
  5356  0024F4  3217               	rrcf	__div_to_l_@quot+1,f,c
  5357  0024F6  3216               	rrcf	__div_to_l_@quot,f,c
  5358  0024F8  3E1B               	incfsz	__div_to_l_@exp1,f,c
  5359  0024FA  D7F9               	goto	l4365
  5360  0024FC  D014               	goto	l505
  5361  0024FE                     l4369:
  5362  0024FE  0E1F               	movlw	31
  5363  002500  641B               	cpfsgt	__div_to_l_@exp1,c
  5364  002502  D00F               	goto	l4377
  5365  002504                     u2620:
  5366  002504  0E00               	movlw	0
  5367  002506  6E0F               	movwf	?__div_to_l_,c
  5368  002508  0E00               	movlw	0
  5369  00250A  6E10               	movwf	?__div_to_l_+1,c
  5370  00250C  0E00               	movlw	0
  5371  00250E  6E11               	movwf	?__div_to_l_+2,c
  5372  002510  0E00               	movlw	0
  5373  002512  6E12               	movwf	?__div_to_l_+3,c
  5374  002514  D010               	goto	l496
  5375  002516                     l4375:
  5376  002516  90D8               	bcf	status,0,c
  5377  002518  3616               	rlcf	__div_to_l_@quot,f,c
  5378  00251A  3617               	rlcf	__div_to_l_@quot+1,f,c
  5379  00251C  3618               	rlcf	__div_to_l_@quot+2,f,c
  5380  00251E  3619               	rlcf	__div_to_l_@quot+3,f,c
  5381  002520  061B               	decf	__div_to_l_@exp1,f,c
  5382  002522                     l4377:
  5383  002522  661B               	tstfsz	__div_to_l_@exp1,c
  5384  002524  D7F8               	goto	l4375
  5385  002526                     l505:
  5386  002526  C016  F00F         	movff	__div_to_l_@quot,?__div_to_l_
  5387  00252A  C017  F010         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5388  00252E  C018  F011         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5389  002532  C019  F012         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5390  002536                     l496:
  5391  002536  0012               	return	
  5392  002538                     __end_of__div_to_l_:
  5393                           	opt stack 0
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           wreg	equ	0xFE8
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           fsr2h	equ	0xFDA
  5406                           fsr2l	equ	0xFD9
  5407                           status	equ	0xFD8
  5408                           
  5409 ;; *************** function __tdiv_to_l_ *****************
  5410 ;; Defined at:
  5411 ;;		line 61 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftdivl.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  f1              3   14[COMRAM] float 
  5414 ;;  f2              3   17[COMRAM] float 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  quot            4   25[COMRAM] unsigned long 
  5417 ;;  exp1            1   30[COMRAM] unsigned char 
  5418 ;;  cntr            1   29[COMRAM] unsigned char 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  4   14[COMRAM] unsigned long 
  5421 ;; Registers used:
  5422 ;;		wreg, status,2, status,0
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5428 ;;      Params:         6       0       0       0       0       0       0
  5429 ;;      Locals:         6       0       0       0       0       0       0
  5430 ;;      Temps:          5       0       0       0       0       0       0
  5431 ;;      Totals:        17       0       0       0       0       0       0
  5432 ;;Total ram usage:       17 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    1
  5435 ;; This function calls:
  5436 ;;		Nothing
  5437 ;; This function is called by:
  5438 ;;		_sprintf
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text18
  5443  002114                     __ptext18:
  5444                           	opt stack 0
  5445  002114                     __tdiv_to_l_:
  5446                           	opt stack 27
  5447                           
  5448                           ;incstack = 0
  5449                           ;incstack = 0
  5450  002114  0E0F               	movlw	15
  5451  002116  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  5452  002118  C00F  F016         	movff	__tdiv_to_l_@f1,??__tdiv_to_l_+1
  5453  00211C  C010  F017         	movff	__tdiv_to_l_@f1+1,??__tdiv_to_l_+2
  5454  002120  C011  F018         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_+3
  5455  002124  2815               	incf	??__tdiv_to_l_,w,c
  5456  002126  6E19               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  5457  002128  D004               	goto	u2480
  5458  00212A                     u2485:
  5459  00212A  90D8               	bcf	status,0,c
  5460  00212C  3218               	rrcf	??__tdiv_to_l_+3,f,c
  5461  00212E  3217               	rrcf	??__tdiv_to_l_+2,f,c
  5462  002130  3216               	rrcf	??__tdiv_to_l_+1,f,c
  5463  002132                     u2480:
  5464  002132  2E19               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  5465  002134  D7FA               	goto	u2485
  5466  002136  5016               	movf	??__tdiv_to_l_+1,w,c
  5467  002138  6E1F               	movwf	__tdiv_to_l_@exp1,c
  5468  00213A  661F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  5469  00213C  D001               	goto	l4273
  5470  00213E  D061               	goto	u2550
  5471  002140                     l4273:
  5472  002140  0E0F               	movlw	15
  5473  002142  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  5474  002144  C012  F016         	movff	__tdiv_to_l_@f2,??__tdiv_to_l_+1
  5475  002148  C013  F017         	movff	__tdiv_to_l_@f2+1,??__tdiv_to_l_+2
  5476  00214C  C014  F018         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_+3
  5477  002150  2815               	incf	??__tdiv_to_l_,w,c
  5478  002152  6E19               	movwf	(??__tdiv_to_l_+4)& (0+255),c
  5479  002154  D004               	goto	u2500
  5480  002156                     u2505:
  5481  002156  90D8               	bcf	status,0,c
  5482  002158  3218               	rrcf	??__tdiv_to_l_+3,f,c
  5483  00215A  3217               	rrcf	??__tdiv_to_l_+2,f,c
  5484  00215C  3216               	rrcf	??__tdiv_to_l_+1,f,c
  5485  00215E                     u2500:
  5486  00215E  2E19               	decfsz	(??__tdiv_to_l_+4)& (0+255),f,c
  5487  002160  D7FA               	goto	u2505
  5488  002162  5016               	movf	??__tdiv_to_l_+1,w,c
  5489  002164  6E1E               	movwf	__tdiv_to_l_@cntr,c
  5490  002166  661E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  5491  002168  D001               	goto	l4279
  5492  00216A  D04B               	goto	u2550
  5493  00216C                     l4279:
  5494  00216C  8E10               	bsf	__tdiv_to_l_@f1+1,7,c
  5495  00216E  0EFF               	movlw	255
  5496  002170  160F               	andwf	__tdiv_to_l_@f1,f,c
  5497  002172  0EFF               	movlw	255
  5498  002174  1610               	andwf	__tdiv_to_l_@f1+1,f,c
  5499  002176  0E00               	movlw	0
  5500  002178  1611               	andwf	__tdiv_to_l_@f1+2,f,c
  5501  00217A  8E13               	bsf	__tdiv_to_l_@f2+1,7,c
  5502  00217C  0EFF               	movlw	255
  5503  00217E  1612               	andwf	__tdiv_to_l_@f2,f,c
  5504  002180  0EFF               	movlw	255
  5505  002182  1613               	andwf	__tdiv_to_l_@f2+1,f,c
  5506  002184  0E00               	movlw	0
  5507  002186  1614               	andwf	__tdiv_to_l_@f2+2,f,c
  5508  002188  0E00               	movlw	0
  5509  00218A  6E1A               	movwf	__tdiv_to_l_@quot,c
  5510  00218C  0E00               	movlw	0
  5511  00218E  6E1B               	movwf	__tdiv_to_l_@quot+1,c
  5512  002190  0E00               	movlw	0
  5513  002192  6E1C               	movwf	__tdiv_to_l_@quot+2,c
  5514  002194  0E00               	movlw	0
  5515  002196  6E1D               	movwf	__tdiv_to_l_@quot+3,c
  5516  002198  0E7F               	movlw	127
  5517  00219A  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
  5518  00219C  501E               	movf	__tdiv_to_l_@cntr,w,c
  5519  00219E  0F98               	addlw	152
  5520  0021A0  5E1F               	subwf	__tdiv_to_l_@exp1,f,c
  5521  0021A2  6E15               	movwf	??__tdiv_to_l_& (0+255),c
  5522  0021A4  0E18               	movlw	24
  5523  0021A6  6E1E               	movwf	__tdiv_to_l_@cntr,c
  5524  0021A8  5015               	movf	??__tdiv_to_l_& (0+255),w,c
  5525  0021AA                     l4293:
  5526  0021AA  90D8               	bcf	status,0,c
  5527  0021AC  361A               	rlcf	__tdiv_to_l_@quot,f,c
  5528  0021AE  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5529  0021B0  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5530  0021B2  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5531  0021B4  5012               	movf	__tdiv_to_l_@f2,w,c
  5532  0021B6  5C0F               	subwf	__tdiv_to_l_@f1,w,c
  5533  0021B8  5013               	movf	__tdiv_to_l_@f2+1,w,c
  5534  0021BA  5810               	subwfb	__tdiv_to_l_@f1+1,w,c
  5535  0021BC  5014               	movf	__tdiv_to_l_@f2+2,w,c
  5536  0021BE  5811               	subwfb	__tdiv_to_l_@f1+2,w,c
  5537  0021C0  A0D8               	btfss	status,0,c
  5538  0021C2  D007               	goto	l617
  5539  0021C4  5012               	movf	__tdiv_to_l_@f2,w,c
  5540  0021C6  5E0F               	subwf	__tdiv_to_l_@f1,f,c
  5541  0021C8  5013               	movf	__tdiv_to_l_@f2+1,w,c
  5542  0021CA  5A10               	subwfb	__tdiv_to_l_@f1+1,f,c
  5543  0021CC  5014               	movf	__tdiv_to_l_@f2+2,w,c
  5544  0021CE  5A11               	subwfb	__tdiv_to_l_@f1+2,f,c
  5545  0021D0  801A               	bsf	__tdiv_to_l_@quot,0,c
  5546  0021D2                     l617:
  5547  0021D2  90D8               	bcf	status,0,c
  5548  0021D4  360F               	rlcf	__tdiv_to_l_@f1,f,c
  5549  0021D6  3610               	rlcf	__tdiv_to_l_@f1+1,f,c
  5550  0021D8  3611               	rlcf	__tdiv_to_l_@f1+2,f,c
  5551  0021DA  2E1E               	decfsz	__tdiv_to_l_@cntr,f,c
  5552  0021DC  D7E6               	goto	l4293
  5553  0021DE  AE1F               	btfss	__tdiv_to_l_@exp1,7,c
  5554  0021E0  D00D               	goto	l4313
  5555  0021E2  501F               	movf	__tdiv_to_l_@exp1,w,c
  5556  0021E4  0A80               	xorlw	128
  5557  0021E6  0F97               	addlw	151
  5558  0021E8  A0D8               	btfss	status,0,c
  5559  0021EA  D00B               	goto	u2550
  5560  0021EC                     l4309:
  5561  0021EC  90D8               	bcf	status,0,c
  5562  0021EE  321D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5563  0021F0  321C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5564  0021F2  321B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5565  0021F4  321A               	rrcf	__tdiv_to_l_@quot,f,c
  5566  0021F6  3E1F               	incfsz	__tdiv_to_l_@exp1,f,c
  5567  0021F8  D7F9               	goto	l4309
  5568  0021FA  D014               	goto	l623
  5569  0021FC                     l4313:
  5570  0021FC  0E17               	movlw	23
  5571  0021FE  641F               	cpfsgt	__tdiv_to_l_@exp1,c
  5572  002200  D00F               	goto	l4321
  5573  002202                     u2550:
  5574  002202  0E00               	movlw	0
  5575  002204  6E0F               	movwf	?__tdiv_to_l_,c
  5576  002206  0E00               	movlw	0
  5577  002208  6E10               	movwf	?__tdiv_to_l_+1,c
  5578  00220A  0E00               	movlw	0
  5579  00220C  6E11               	movwf	?__tdiv_to_l_+2,c
  5580  00220E  0E00               	movlw	0
  5581  002210  6E12               	movwf	?__tdiv_to_l_+3,c
  5582  002212  D010               	goto	l614
  5583  002214                     l4319:
  5584  002214  90D8               	bcf	status,0,c
  5585  002216  361A               	rlcf	__tdiv_to_l_@quot,f,c
  5586  002218  361B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5587  00221A  361C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5588  00221C  361D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5589  00221E  061F               	decf	__tdiv_to_l_@exp1,f,c
  5590  002220                     l4321:
  5591  002220  661F               	tstfsz	__tdiv_to_l_@exp1,c
  5592  002222  D7F8               	goto	l4319
  5593  002224                     l623:
  5594  002224  C01A  F00F         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5595  002228  C01B  F010         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5596  00222C  C01C  F011         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5597  002230  C01D  F012         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5598  002234                     l614:
  5599  002234  0012               	return	
  5600  002236                     __end_of__tdiv_to_l_:
  5601                           	opt stack 0
  5602                           tblptru	equ	0xFF8
  5603                           tblptrh	equ	0xFF7
  5604                           tblptrl	equ	0xFF6
  5605                           tablat	equ	0xFF5
  5606                           prodh	equ	0xFF4
  5607                           prodl	equ	0xFF3
  5608                           intcon	equ	0xFF2
  5609                           wreg	equ	0xFE8
  5610                           indf2	equ	0xFDF
  5611                           postinc2	equ	0xFDE
  5612                           postdec2	equ	0xFDD
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _isdigit *****************
  5618 ;; Defined at:
  5619 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  c               1   14[COMRAM] unsigned char 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;		None               void
  5626 ;; Registers used:
  5627 ;;		wreg, status,2, status,0
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5633 ;;      Params:         1       0       0       0       0       0       0
  5634 ;;      Locals:         1       0       0       0       0       0       0
  5635 ;;      Temps:          1       0       0       0       0       0       0
  5636 ;;      Totals:         3       0       0       0       0       0       0
  5637 ;;Total ram usage:        3 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    1
  5640 ;; This function calls:
  5641 ;;		Nothing
  5642 ;; This function is called by:
  5643 ;;		_sprintf
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text19
  5648  002ECA                     __ptext19:
  5649                           	opt stack 0
  5650  002ECA                     _isdigit:
  5651                           	opt stack 27
  5652                           
  5653                           ;incstack = 0
  5654                           ;incstack = 0
  5655  002ECA  6E10               	movwf	??_isdigit& (0+255),c
  5656  002ECC  0E00               	movlw	0
  5657  002ECE  6E11               	movwf	_isdigit$801,c
  5658  002ED0  5010               	movf	??_isdigit& (0+255),w,c
  5659  002ED2  0E3A               	movlw	58
  5660  002ED4  600F               	cpfslt	isdigit@c,c
  5661  002ED6  D007               	goto	l4263
  5662  002ED8  0E2F               	movlw	47
  5663  002EDA  640F               	cpfsgt	isdigit@c,c
  5664  002EDC  D004               	goto	l4263
  5665  002EDE  6E10               	movwf	??_isdigit& (0+255),c
  5666  002EE0  0E01               	movlw	1
  5667  002EE2  6E11               	movwf	_isdigit$801,c
  5668  002EE4  5010               	movf	??_isdigit& (0+255),w,c
  5669  002EE6                     l4263:
  5670  002EE6  C011  F010         	movff	_isdigit$801,??_isdigit
  5671  002EEA  3010               	rrcf	??_isdigit,w,c
  5672  002EEC  0012               	return	
  5673  002EEE                     __end_of_isdigit:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           intcon	equ	0xFF2
  5682                           wreg	equ	0xFE8
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function _scale *****************
  5691 ;; Defined at:
  5692 ;;		line 426 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  scl             1   53[COMRAM] char 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;		None
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  3   53[COMRAM] char 
  5699 ;; Registers used:
  5700 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5706 ;;      Params:         3       0       0       0       0       0       0
  5707 ;;      Locals:         3       0       0       0       0       0       0
  5708 ;;      Temps:          6       0       0       0       0       0       0
  5709 ;;      Totals:        12       0       0       0       0       0       0
  5710 ;;Total ram usage:       12 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    3
  5713 ;; This function calls:
  5714 ;;		___ftmul
  5715 ;;		___awdiv
  5716 ;;		___awmod
  5717 ;;		___wmul
  5718 ;; This function is called by:
  5719 ;;		_sprintf
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text20
  5724  00171A                     __ptext20:
  5725                           	opt stack 0
  5726  00171A                     _scale:
  5727                           	opt stack 25
  5728                           
  5729                           ;doprnt.c: 428: if(scl < 0) {
  5730                           
  5731                           ;incstack = 0
  5732                           ;incstack = 0
  5733  00171A  AE36               	btfss	scale@scl,7,c
  5734  00171C  D108               	goto	l4237
  5735                           
  5736                           ;doprnt.c: 429: scl = -scl;
  5737  00171E  6C36               	negf	scale@scl,c
  5738                           
  5739                           ;doprnt.c: 430: if(scl>=110)
  5740  001720  5036               	movf	scale@scl,w,c
  5741  001722  0A80               	xorlw	128
  5742  001724  0F12               	addlw	-238
  5743  001726  A0D8               	btfss	status,0,c
  5744  001728  D09D               	goto	l4227
  5745                           
  5746                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5747  00172A  0E00               	movlw	0
  5748  00172C  6E22               	movwf	?___wmul+3,c
  5749  00172E  0E03               	movlw	3
  5750  001730  6E21               	movwf	?___wmul+2,c
  5751  001732  0E00               	movlw	0
  5752  001734  6E19               	movwf	?___awdiv+3,c
  5753  001736  0E0A               	movlw	10
  5754  001738  6E18               	movwf	?___awdiv+2,c
  5755  00173A  0E00               	movlw	0
  5756  00173C  6E12               	movwf	?___awmod+3,c
  5757  00173E  0E64               	movlw	100
  5758  001740  6E11               	movwf	?___awmod+2,c
  5759  001742  5036               	movf	scale@scl,w,c
  5760  001744  6E0F               	movwf	?___awmod,c
  5761  001746  6A10               	clrf	?___awmod+1,c
  5762  001748  BE0F               	btfsc	?___awmod,7,c
  5763  00174A  0610               	decf	?___awmod+1,f,c
  5764  00174C  EC74  F015         	call	___awmod	;wreg free
  5765  001750  C00F  F016         	movff	?___awmod,?___awdiv
  5766  001754  C010  F017         	movff	?___awmod+1,?___awdiv+1
  5767  001758  ECA6  F014         	call	___awdiv	;wreg free
  5768  00175C  0E09               	movlw	9
  5769  00175E  2416               	addwf	?___awdiv,w,c
  5770  001760  6E1F               	movwf	?___wmul,c
  5771  001762  0E00               	movlw	0
  5772  001764  2017               	addwfc	?___awdiv+1,w,c
  5773  001766  6E20               	movwf	?___wmul+1,c
  5774  001768  EC0A  F017         	call	___wmul	;wreg free
  5775  00176C  0E28               	movlw	low __npowers_
  5776  00176E  241F               	addwf	?___wmul,w,c
  5777  001770  6EF6               	movwf	tblptrl,c
  5778  001772  0E06               	movlw	high __npowers_
  5779  001774  2020               	addwfc	?___wmul+1,w,c
  5780  001776  6EF7               	movwf	tblptrh,c
  5781  001778  0009               	tblrd		*+
  5782  00177A  CFF5 F039          	movff	tablat,??_scale
  5783  00177E  0009               	tblrd		*+
  5784  001780  CFF5 F03A          	movff	tablat,??_scale+1
  5785  001784  0009               	tblrd		*+
  5786  001786  CFF5 F03B          	movff	tablat,??_scale+2
  5787  00178A  C03B  F02A         	movff	??_scale+2,?___ftmul+5
  5788  00178E  C03A  F029         	movff	??_scale+1,?___ftmul+4
  5789  001792  C039  F028         	movff	??_scale,?___ftmul+3
  5790  001796  0E00               	movlw	0
  5791  001798  6E22               	movwf	?___wmul+3,c
  5792  00179A  0E03               	movlw	3
  5793  00179C  6E21               	movwf	?___wmul+2,c
  5794  00179E  0E00               	movlw	0
  5795  0017A0  6E19               	movwf	?___awdiv+3,c
  5796  0017A2  0E64               	movlw	100
  5797  0017A4  6E18               	movwf	?___awdiv+2,c
  5798  0017A6  5036               	movf	scale@scl,w,c
  5799  0017A8  6E16               	movwf	?___awdiv,c
  5800  0017AA  6A17               	clrf	?___awdiv+1,c
  5801  0017AC  BE16               	btfsc	?___awdiv,7,c
  5802  0017AE  0617               	decf	?___awdiv+1,f,c
  5803  0017B0  ECA6  F014         	call	___awdiv	;wreg free
  5804  0017B4  0E12               	movlw	18
  5805  0017B6  2416               	addwf	?___awdiv,w,c
  5806  0017B8  6E1F               	movwf	?___wmul,c
  5807  0017BA  0E00               	movlw	0
  5808  0017BC  2017               	addwfc	?___awdiv+1,w,c
  5809  0017BE  6E20               	movwf	?___wmul+1,c
  5810  0017C0  EC0A  F017         	call	___wmul	;wreg free
  5811  0017C4  0E28               	movlw	low __npowers_
  5812  0017C6  241F               	addwf	?___wmul,w,c
  5813  0017C8  6EF6               	movwf	tblptrl,c
  5814  0017CA  0E06               	movlw	high __npowers_
  5815  0017CC  2020               	addwfc	?___wmul+1,w,c
  5816  0017CE  6EF7               	movwf	tblptrh,c
  5817  0017D0  0009               	tblrd		*+
  5818  0017D2  CFF5 F03C          	movff	tablat,??_scale+3
  5819  0017D6  0009               	tblrd		*+
  5820  0017D8  CFF5 F03D          	movff	tablat,??_scale+4
  5821  0017DC  0009               	tblrd		*+
  5822  0017DE  CFF5 F03E          	movff	tablat,??_scale+5
  5823  0017E2  C03E  F027         	movff	??_scale+5,?___ftmul+2
  5824  0017E6  C03D  F026         	movff	??_scale+4,?___ftmul+1
  5825  0017EA  C03C  F025         	movff	??_scale+3,?___ftmul
  5826  0017EE  EC1B  F011         	call	___ftmul	;wreg free
  5827  0017F2  C027  F041         	movff	?___ftmul+2,_scale$1137+2
  5828  0017F6  C026  F040         	movff	?___ftmul+1,_scale$1137+1
  5829  0017FA  C025  F03F         	movff	?___ftmul,_scale$1137
  5830                           
  5831                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  5832  0017FE  C03F  F025         	movff	_scale$1137,?___ftmul
  5833  001802  C040  F026         	movff	_scale$1137+1,?___ftmul+1
  5834  001806  C041  F027         	movff	_scale$1137+2,?___ftmul+2
  5835  00180A  0E00               	movlw	0
  5836  00180C  6E22               	movwf	?___wmul+3,c
  5837  00180E  0E03               	movlw	3
  5838  001810  6E21               	movwf	?___wmul+2,c
  5839  001812  0E00               	movlw	0
  5840  001814  6E12               	movwf	?___awmod+3,c
  5841  001816  0E0A               	movlw	10
  5842  001818  6E11               	movwf	?___awmod+2,c
  5843  00181A  5036               	movf	scale@scl,w,c
  5844  00181C  6E0F               	movwf	?___awmod,c
  5845  00181E  6A10               	clrf	?___awmod+1,c
  5846  001820  BE0F               	btfsc	?___awmod,7,c
  5847  001822  0610               	decf	?___awmod+1,f,c
  5848  001824  EC74  F015         	call	___awmod	;wreg free
  5849  001828  C00F  F01F         	movff	?___awmod,?___wmul
  5850  00182C  C010  F020         	movff	?___awmod+1,?___wmul+1
  5851  001830  EC0A  F017         	call	___wmul	;wreg free
  5852  001834  0E28               	movlw	low __npowers_
  5853  001836  241F               	addwf	?___wmul,w,c
  5854  001838  6EF6               	movwf	tblptrl,c
  5855  00183A  0E06               	movlw	high __npowers_
  5856  00183C  2020               	addwfc	?___wmul+1,w,c
  5857  00183E  6EF7               	movwf	tblptrh,c
  5858  001840  0009               	tblrd		*+
  5859  001842  CFF5 F039          	movff	tablat,??_scale
  5860  001846  0009               	tblrd		*+
  5861  001848  CFF5 F03A          	movff	tablat,??_scale+1
  5862  00184C  0009               	tblrd		*+
  5863  00184E  CFF5 F03B          	movff	tablat,??_scale+2
  5864  001852  C03B  F02A         	movff	??_scale+2,?___ftmul+5
  5865  001856  C03A  F029         	movff	??_scale+1,?___ftmul+4
  5866  00185A  C039  F028         	movff	??_scale,?___ftmul+3
  5867  00185E  EC1B  F011         	call	___ftmul	;wreg free
  5868  001862  D164               	goto	L13
  5869  001864                     l4227:
  5870                           
  5871                           ;doprnt.c: 432: else if(scl > 10)
  5872  001864  5036               	movf	scale@scl,w,c
  5873  001866  0A80               	xorlw	128
  5874  001868  0F75               	addlw	-139
  5875  00186A  A0D8               	btfss	status,0,c
  5876  00186C  D059               	goto	l4233
  5877                           
  5878                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  5879  00186E  0E00               	movlw	0
  5880  001870  6E22               	movwf	?___wmul+3,c
  5881  001872  0E03               	movlw	3
  5882  001874  6E21               	movwf	?___wmul+2,c
  5883  001876  0E00               	movlw	0
  5884  001878  6E19               	movwf	?___awdiv+3,c
  5885  00187A  0E0A               	movlw	10
  5886  00187C  6E18               	movwf	?___awdiv+2,c
  5887  00187E  5036               	movf	scale@scl,w,c
  5888  001880  6E16               	movwf	?___awdiv,c
  5889  001882  6A17               	clrf	?___awdiv+1,c
  5890  001884  BE16               	btfsc	?___awdiv,7,c
  5891  001886  0617               	decf	?___awdiv+1,f,c
  5892  001888  ECA6  F014         	call	___awdiv	;wreg free
  5893  00188C  0E09               	movlw	9
  5894  00188E  2416               	addwf	?___awdiv,w,c
  5895  001890  6E1F               	movwf	?___wmul,c
  5896  001892  0E00               	movlw	0
  5897  001894  2017               	addwfc	?___awdiv+1,w,c
  5898  001896  6E20               	movwf	?___wmul+1,c
  5899  001898  EC0A  F017         	call	___wmul	;wreg free
  5900  00189C  0E28               	movlw	low __npowers_
  5901  00189E  241F               	addwf	?___wmul,w,c
  5902  0018A0  6EF6               	movwf	tblptrl,c
  5903  0018A2  0E06               	movlw	high __npowers_
  5904  0018A4  2020               	addwfc	?___wmul+1,w,c
  5905  0018A6  6EF7               	movwf	tblptrh,c
  5906  0018A8  0009               	tblrd		*+
  5907  0018AA  CFF5 F039          	movff	tablat,??_scale
  5908  0018AE  0009               	tblrd		*+
  5909  0018B0  CFF5 F03A          	movff	tablat,??_scale+1
  5910  0018B4  0009               	tblrd		*+
  5911  0018B6  CFF5 F03B          	movff	tablat,??_scale+2
  5912  0018BA  C03B  F027         	movff	??_scale+2,?___ftmul+2
  5913  0018BE  C03A  F026         	movff	??_scale+1,?___ftmul+1
  5914  0018C2  C039  F025         	movff	??_scale,?___ftmul
  5915  0018C6  0E00               	movlw	0
  5916  0018C8  6E22               	movwf	?___wmul+3,c
  5917  0018CA  0E03               	movlw	3
  5918  0018CC  6E21               	movwf	?___wmul+2,c
  5919  0018CE  0E00               	movlw	0
  5920  0018D0  6E12               	movwf	?___awmod+3,c
  5921  0018D2  0E0A               	movlw	10
  5922  0018D4  6E11               	movwf	?___awmod+2,c
  5923  0018D6  5036               	movf	scale@scl,w,c
  5924  0018D8  6E0F               	movwf	?___awmod,c
  5925  0018DA  6A10               	clrf	?___awmod+1,c
  5926  0018DC  BE0F               	btfsc	?___awmod,7,c
  5927  0018DE  0610               	decf	?___awmod+1,f,c
  5928  0018E0  EC74  F015         	call	___awmod	;wreg free
  5929  0018E4  C00F  F01F         	movff	?___awmod,?___wmul
  5930  0018E8  C010  F020         	movff	?___awmod+1,?___wmul+1
  5931  0018EC  EC0A  F017         	call	___wmul	;wreg free
  5932  0018F0  0E28               	movlw	low __npowers_
  5933  0018F2  241F               	addwf	?___wmul,w,c
  5934  0018F4  6EF6               	movwf	tblptrl,c
  5935  0018F6  0E06               	movlw	high __npowers_
  5936  0018F8  2020               	addwfc	?___wmul+1,w,c
  5937  0018FA  6EF7               	movwf	tblptrh,c
  5938  0018FC  0009               	tblrd		*+
  5939  0018FE  CFF5 F03C          	movff	tablat,??_scale+3
  5940  001902  0009               	tblrd		*+
  5941  001904  CFF5 F03D          	movff	tablat,??_scale+4
  5942  001908  0009               	tblrd		*+
  5943  00190A  CFF5 F03E          	movff	tablat,??_scale+5
  5944  00190E  C03E  F02A         	movff	??_scale+5,?___ftmul+5
  5945  001912  C03D  F029         	movff	??_scale+4,?___ftmul+4
  5946  001916  C03C  F028         	movff	??_scale+3,?___ftmul+3
  5947  00191A  EC1B  F011         	call	___ftmul	;wreg free
  5948  00191E  D106               	goto	L13
  5949  001920                     l4233:
  5950                           
  5951                           ;doprnt.c: 434: return _npowers_[scl];
  5952  001920  5036               	movf	scale@scl,w,c
  5953  001922  0D03               	mullw	3
  5954  001924  0E28               	movlw	low __npowers_
  5955  001926  24F3               	addwf	prodl,w,c
  5956  001928  6EF6               	movwf	tblptrl,c
  5957  00192A  0E06               	movlw	high __npowers_
  5958  00192C  D10C               	goto	L12
  5959  00192E                     l4237:
  5960                           
  5961                           ;doprnt.c: 435: }
  5962                           ;doprnt.c: 436: if(scl>=110)
  5963  00192E  5036               	movf	scale@scl,w,c
  5964  001930  0A80               	xorlw	128
  5965  001932  0F12               	addlw	-238
  5966  001934  A0D8               	btfss	status,0,c
  5967  001936  D09D               	goto	l4245
  5968                           
  5969                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5970  001938  0E00               	movlw	0
  5971  00193A  6E22               	movwf	?___wmul+3,c
  5972  00193C  0E03               	movlw	3
  5973  00193E  6E21               	movwf	?___wmul+2,c
  5974  001940  0E00               	movlw	0
  5975  001942  6E19               	movwf	?___awdiv+3,c
  5976  001944  0E0A               	movlw	10
  5977  001946  6E18               	movwf	?___awdiv+2,c
  5978  001948  0E00               	movlw	0
  5979  00194A  6E12               	movwf	?___awmod+3,c
  5980  00194C  0E64               	movlw	100
  5981  00194E  6E11               	movwf	?___awmod+2,c
  5982  001950  5036               	movf	scale@scl,w,c
  5983  001952  6E0F               	movwf	?___awmod,c
  5984  001954  6A10               	clrf	?___awmod+1,c
  5985  001956  BE0F               	btfsc	?___awmod,7,c
  5986  001958  0610               	decf	?___awmod+1,f,c
  5987  00195A  EC74  F015         	call	___awmod	;wreg free
  5988  00195E  C00F  F016         	movff	?___awmod,?___awdiv
  5989  001962  C010  F017         	movff	?___awmod+1,?___awdiv+1
  5990  001966  ECA6  F014         	call	___awdiv	;wreg free
  5991  00196A  0E09               	movlw	9
  5992  00196C  2416               	addwf	?___awdiv,w,c
  5993  00196E  6E1F               	movwf	?___wmul,c
  5994  001970  0E00               	movlw	0
  5995  001972  2017               	addwfc	?___awdiv+1,w,c
  5996  001974  6E20               	movwf	?___wmul+1,c
  5997  001976  EC0A  F017         	call	___wmul	;wreg free
  5998  00197A  0E4F               	movlw	low __powers_
  5999  00197C  241F               	addwf	?___wmul,w,c
  6000  00197E  6EF6               	movwf	tblptrl,c
  6001  001980  0E06               	movlw	high __powers_
  6002  001982  2020               	addwfc	?___wmul+1,w,c
  6003  001984  6EF7               	movwf	tblptrh,c
  6004  001986  0009               	tblrd		*+
  6005  001988  CFF5 F039          	movff	tablat,??_scale
  6006  00198C  0009               	tblrd		*+
  6007  00198E  CFF5 F03A          	movff	tablat,??_scale+1
  6008  001992  0009               	tblrd		*+
  6009  001994  CFF5 F03B          	movff	tablat,??_scale+2
  6010  001998  C03B  F02A         	movff	??_scale+2,?___ftmul+5
  6011  00199C  C03A  F029         	movff	??_scale+1,?___ftmul+4
  6012  0019A0  C039  F028         	movff	??_scale,?___ftmul+3
  6013  0019A4  0E00               	movlw	0
  6014  0019A6  6E22               	movwf	?___wmul+3,c
  6015  0019A8  0E03               	movlw	3
  6016  0019AA  6E21               	movwf	?___wmul+2,c
  6017  0019AC  0E00               	movlw	0
  6018  0019AE  6E19               	movwf	?___awdiv+3,c
  6019  0019B0  0E64               	movlw	100
  6020  0019B2  6E18               	movwf	?___awdiv+2,c
  6021  0019B4  5036               	movf	scale@scl,w,c
  6022  0019B6  6E16               	movwf	?___awdiv,c
  6023  0019B8  6A17               	clrf	?___awdiv+1,c
  6024  0019BA  BE16               	btfsc	?___awdiv,7,c
  6025  0019BC  0617               	decf	?___awdiv+1,f,c
  6026  0019BE  ECA6  F014         	call	___awdiv	;wreg free
  6027  0019C2  0E12               	movlw	18
  6028  0019C4  2416               	addwf	?___awdiv,w,c
  6029  0019C6  6E1F               	movwf	?___wmul,c
  6030  0019C8  0E00               	movlw	0
  6031  0019CA  2017               	addwfc	?___awdiv+1,w,c
  6032  0019CC  6E20               	movwf	?___wmul+1,c
  6033  0019CE  EC0A  F017         	call	___wmul	;wreg free
  6034  0019D2  0E4F               	movlw	low __powers_
  6035  0019D4  241F               	addwf	?___wmul,w,c
  6036  0019D6  6EF6               	movwf	tblptrl,c
  6037  0019D8  0E06               	movlw	high __powers_
  6038  0019DA  2020               	addwfc	?___wmul+1,w,c
  6039  0019DC  6EF7               	movwf	tblptrh,c
  6040  0019DE  0009               	tblrd		*+
  6041  0019E0  CFF5 F03C          	movff	tablat,??_scale+3
  6042  0019E4  0009               	tblrd		*+
  6043  0019E6  CFF5 F03D          	movff	tablat,??_scale+4
  6044  0019EA  0009               	tblrd		*+
  6045  0019EC  CFF5 F03E          	movff	tablat,??_scale+5
  6046  0019F0  C03E  F027         	movff	??_scale+5,?___ftmul+2
  6047  0019F4  C03D  F026         	movff	??_scale+4,?___ftmul+1
  6048  0019F8  C03C  F025         	movff	??_scale+3,?___ftmul
  6049  0019FC  EC1B  F011         	call	___ftmul	;wreg free
  6050  001A00  C027  F041         	movff	?___ftmul+2,_scale$1137+2
  6051  001A04  C026  F040         	movff	?___ftmul+1,_scale$1137+1
  6052  001A08  C025  F03F         	movff	?___ftmul,_scale$1137
  6053                           
  6054                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6055  001A0C  C03F  F025         	movff	_scale$1137,?___ftmul
  6056  001A10  C040  F026         	movff	_scale$1137+1,?___ftmul+1
  6057  001A14  C041  F027         	movff	_scale$1137+2,?___ftmul+2
  6058  001A18  0E00               	movlw	0
  6059  001A1A  6E22               	movwf	?___wmul+3,c
  6060  001A1C  0E03               	movlw	3
  6061  001A1E  6E21               	movwf	?___wmul+2,c
  6062  001A20  0E00               	movlw	0
  6063  001A22  6E12               	movwf	?___awmod+3,c
  6064  001A24  0E0A               	movlw	10
  6065  001A26  6E11               	movwf	?___awmod+2,c
  6066  001A28  5036               	movf	scale@scl,w,c
  6067  001A2A  6E0F               	movwf	?___awmod,c
  6068  001A2C  6A10               	clrf	?___awmod+1,c
  6069  001A2E  BE0F               	btfsc	?___awmod,7,c
  6070  001A30  0610               	decf	?___awmod+1,f,c
  6071  001A32  EC74  F015         	call	___awmod	;wreg free
  6072  001A36  C00F  F01F         	movff	?___awmod,?___wmul
  6073  001A3A  C010  F020         	movff	?___awmod+1,?___wmul+1
  6074  001A3E  EC0A  F017         	call	___wmul	;wreg free
  6075  001A42  0E4F               	movlw	low __powers_
  6076  001A44  241F               	addwf	?___wmul,w,c
  6077  001A46  6EF6               	movwf	tblptrl,c
  6078  001A48  0E06               	movlw	high __powers_
  6079  001A4A  2020               	addwfc	?___wmul+1,w,c
  6080  001A4C  6EF7               	movwf	tblptrh,c
  6081  001A4E  0009               	tblrd		*+
  6082  001A50  CFF5 F039          	movff	tablat,??_scale
  6083  001A54  0009               	tblrd		*+
  6084  001A56  CFF5 F03A          	movff	tablat,??_scale+1
  6085  001A5A  0009               	tblrd		*+
  6086  001A5C  CFF5 F03B          	movff	tablat,??_scale+2
  6087  001A60  C03B  F02A         	movff	??_scale+2,?___ftmul+5
  6088  001A64  C03A  F029         	movff	??_scale+1,?___ftmul+4
  6089  001A68  C039  F028         	movff	??_scale,?___ftmul+3
  6090  001A6C  EC1B  F011         	call	___ftmul	;wreg free
  6091  001A70  D05D               	goto	L13
  6092  001A72                     l4245:
  6093                           
  6094                           ;doprnt.c: 438: else if(scl > 10)
  6095  001A72  5036               	movf	scale@scl,w,c
  6096  001A74  0A80               	xorlw	128
  6097  001A76  0F75               	addlw	-139
  6098  001A78  A0D8               	btfss	status,0,c
  6099  001A7A  D05F               	goto	l4251
  6100                           
  6101                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6102  001A7C  0E00               	movlw	0
  6103  001A7E  6E22               	movwf	?___wmul+3,c
  6104  001A80  0E03               	movlw	3
  6105  001A82  6E21               	movwf	?___wmul+2,c
  6106  001A84  0E00               	movlw	0
  6107  001A86  6E19               	movwf	?___awdiv+3,c
  6108  001A88  0E0A               	movlw	10
  6109  001A8A  6E18               	movwf	?___awdiv+2,c
  6110  001A8C  5036               	movf	scale@scl,w,c
  6111  001A8E  6E16               	movwf	?___awdiv,c
  6112  001A90  6A17               	clrf	?___awdiv+1,c
  6113  001A92  BE16               	btfsc	?___awdiv,7,c
  6114  001A94  0617               	decf	?___awdiv+1,f,c
  6115  001A96  ECA6  F014         	call	___awdiv	;wreg free
  6116  001A9A  0E09               	movlw	9
  6117  001A9C  2416               	addwf	?___awdiv,w,c
  6118  001A9E  6E1F               	movwf	?___wmul,c
  6119  001AA0  0E00               	movlw	0
  6120  001AA2  2017               	addwfc	?___awdiv+1,w,c
  6121  001AA4  6E20               	movwf	?___wmul+1,c
  6122  001AA6  EC0A  F017         	call	___wmul	;wreg free
  6123  001AAA  0E4F               	movlw	low __powers_
  6124  001AAC  241F               	addwf	?___wmul,w,c
  6125  001AAE  6EF6               	movwf	tblptrl,c
  6126  001AB0  0E06               	movlw	high __powers_
  6127  001AB2  2020               	addwfc	?___wmul+1,w,c
  6128  001AB4  6EF7               	movwf	tblptrh,c
  6129  001AB6  0009               	tblrd		*+
  6130  001AB8  CFF5 F039          	movff	tablat,??_scale
  6131  001ABC  0009               	tblrd		*+
  6132  001ABE  CFF5 F03A          	movff	tablat,??_scale+1
  6133  001AC2  0009               	tblrd		*+
  6134  001AC4  CFF5 F03B          	movff	tablat,??_scale+2
  6135  001AC8  C03B  F027         	movff	??_scale+2,?___ftmul+2
  6136  001ACC  C03A  F026         	movff	??_scale+1,?___ftmul+1
  6137  001AD0  C039  F025         	movff	??_scale,?___ftmul
  6138  001AD4  0E00               	movlw	0
  6139  001AD6  6E22               	movwf	?___wmul+3,c
  6140  001AD8  0E03               	movlw	3
  6141  001ADA  6E21               	movwf	?___wmul+2,c
  6142  001ADC  0E00               	movlw	0
  6143  001ADE  6E12               	movwf	?___awmod+3,c
  6144  001AE0  0E0A               	movlw	10
  6145  001AE2  6E11               	movwf	?___awmod+2,c
  6146  001AE4  5036               	movf	scale@scl,w,c
  6147  001AE6  6E0F               	movwf	?___awmod,c
  6148  001AE8  6A10               	clrf	?___awmod+1,c
  6149  001AEA  BE0F               	btfsc	?___awmod,7,c
  6150  001AEC  0610               	decf	?___awmod+1,f,c
  6151  001AEE  EC74  F015         	call	___awmod	;wreg free
  6152  001AF2  C00F  F01F         	movff	?___awmod,?___wmul
  6153  001AF6  C010  F020         	movff	?___awmod+1,?___wmul+1
  6154  001AFA  EC0A  F017         	call	___wmul	;wreg free
  6155  001AFE  0E4F               	movlw	low __powers_
  6156  001B00  241F               	addwf	?___wmul,w,c
  6157  001B02  6EF6               	movwf	tblptrl,c
  6158  001B04  0E06               	movlw	high __powers_
  6159  001B06  2020               	addwfc	?___wmul+1,w,c
  6160  001B08  6EF7               	movwf	tblptrh,c
  6161  001B0A  0009               	tblrd		*+
  6162  001B0C  CFF5 F03C          	movff	tablat,??_scale+3
  6163  001B10  0009               	tblrd		*+
  6164  001B12  CFF5 F03D          	movff	tablat,??_scale+4
  6165  001B16  0009               	tblrd		*+
  6166  001B18  CFF5 F03E          	movff	tablat,??_scale+5
  6167  001B1C  C03E  F02A         	movff	??_scale+5,?___ftmul+5
  6168  001B20  C03D  F029         	movff	??_scale+4,?___ftmul+4
  6169  001B24  C03C  F028         	movff	??_scale+3,?___ftmul+3
  6170  001B28  EC1B  F011         	call	___ftmul	;wreg free
  6171  001B2C                     L13:
  6172  001B2C  C027  F038         	movff	?___ftmul+2,?_scale+2
  6173  001B30  C026  F037         	movff	?___ftmul+1,?_scale+1
  6174  001B34  C025  F036         	movff	?___ftmul,?_scale
  6175  001B38  D017               	goto	l124
  6176  001B3A                     l4251:
  6177                           
  6178                           ;doprnt.c: 440: return _powers_[scl];
  6179  001B3A  5036               	movf	scale@scl,w,c
  6180  001B3C  0D03               	mullw	3
  6181  001B3E  0E4F               	movlw	low __powers_
  6182  001B40  24F3               	addwf	prodl,w,c
  6183  001B42  6EF6               	movwf	tblptrl,c
  6184  001B44  0E06               	movlw	high __powers_
  6185  001B46                     L12:
  6186  001B46  20F4               	addwfc	prodh,w,c
  6187  001B48  6EF7               	movwf	tblptrh,c
  6188  001B4A  0009               	tblrd		*+
  6189  001B4C  CFF5 F039          	movff	tablat,??_scale
  6190  001B50  0009               	tblrd		*+
  6191  001B52  CFF5 F03A          	movff	tablat,??_scale+1
  6192  001B56  0009               	tblrd		*+
  6193  001B58  CFF5 F03B          	movff	tablat,??_scale+2
  6194  001B5C  C03B  F038         	movff	??_scale+2,?_scale+2
  6195  001B60  C03A  F037         	movff	??_scale+1,?_scale+1
  6196  001B64  C039  F036         	movff	??_scale,?_scale
  6197  001B68                     l124:
  6198  001B68  0012               	return	
  6199  001B6A                     __end_of_scale:
  6200                           	opt stack 0
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           wreg	equ	0xFE8
  6209                           indf2	equ	0xFDF
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           fsr2h	equ	0xFDA
  6213                           fsr2l	equ	0xFD9
  6214                           status	equ	0xFD8
  6215                           
  6216 ;; *************** function _fround *****************
  6217 ;; Defined at:
  6218 ;;		line 410 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;  prec            1   53[COMRAM] unsigned char 
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;		None
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  3   53[COMRAM] unsigned char 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6232 ;;      Params:         3       0       0       0       0       0       0
  6233 ;;      Locals:         6       0       0       0       0       0       0
  6234 ;;      Temps:          6       0       0       0       0       0       0
  6235 ;;      Totals:        15       0       0       0       0       0       0
  6236 ;;Total ram usage:       15 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    3
  6239 ;; This function calls:
  6240 ;;		___ftmul
  6241 ;;		___awdiv
  6242 ;;		___awmod
  6243 ;;		___wmul
  6244 ;; This function is called by:
  6245 ;;		_sprintf
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           	psect	text21
  6250  001B6A                     __ptext21:
  6251                           	opt stack 0
  6252  001B6A                     _fround:
  6253                           	opt stack 25
  6254                           
  6255                           ;doprnt.c: 413: if(prec>=110)
  6256                           
  6257                           ;incstack = 0
  6258                           ;incstack = 0
  6259  001B6A  0E6D               	movlw	109
  6260  001B6C  6436               	cpfsgt	fround@prec,c
  6261  001B6E  D0AB               	goto	l4203
  6262                           
  6263                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6264  001B70  0E00               	movlw	0
  6265  001B72  6E22               	movwf	?___wmul+3,c
  6266  001B74  0E03               	movlw	3
  6267  001B76  6E21               	movwf	?___wmul+2,c
  6268  001B78  0E00               	movlw	0
  6269  001B7A  6E19               	movwf	?___awdiv+3,c
  6270  001B7C  0E0A               	movlw	10
  6271  001B7E  6E18               	movwf	?___awdiv+2,c
  6272  001B80  0E00               	movlw	0
  6273  001B82  6E12               	movwf	?___awmod+3,c
  6274  001B84  0E64               	movlw	100
  6275  001B86  6E11               	movwf	?___awmod+2,c
  6276  001B88  C036  F00F         	movff	fround@prec,?___awmod
  6277  001B8C  6A10               	clrf	?___awmod+1,c
  6278  001B8E  EC74  F015         	call	___awmod	;wreg free
  6279  001B92  C00F  F016         	movff	?___awmod,?___awdiv
  6280  001B96  C010  F017         	movff	?___awmod+1,?___awdiv+1
  6281  001B9A  ECA6  F014         	call	___awdiv	;wreg free
  6282  001B9E  0E09               	movlw	9
  6283  001BA0  2416               	addwf	?___awdiv,w,c
  6284  001BA2  6E1F               	movwf	?___wmul,c
  6285  001BA4  0E00               	movlw	0
  6286  001BA6  2017               	addwfc	?___awdiv+1,w,c
  6287  001BA8  6E20               	movwf	?___wmul+1,c
  6288  001BAA  EC0A  F017         	call	___wmul	;wreg free
  6289  001BAE  0E28               	movlw	low __npowers_
  6290  001BB0  241F               	addwf	?___wmul,w,c
  6291  001BB2  6EF6               	movwf	tblptrl,c
  6292  001BB4  0E06               	movlw	high __npowers_
  6293  001BB6  2020               	addwfc	?___wmul+1,w,c
  6294  001BB8  6EF7               	movwf	tblptrh,c
  6295  001BBA  0009               	tblrd		*+
  6296  001BBC  CFF5 F039          	movff	tablat,??_fround
  6297  001BC0  0009               	tblrd		*+
  6298  001BC2  CFF5 F03A          	movff	tablat,??_fround+1
  6299  001BC6  0009               	tblrd		*+
  6300  001BC8  CFF5 F03B          	movff	tablat,??_fround+2
  6301  001BCC  C03B  F02A         	movff	??_fround+2,?___ftmul+5
  6302  001BD0  C03A  F029         	movff	??_fround+1,?___ftmul+4
  6303  001BD4  C039  F028         	movff	??_fround,?___ftmul+3
  6304  001BD8  0E00               	movlw	0
  6305  001BDA  6E22               	movwf	?___wmul+3,c
  6306  001BDC  0E03               	movlw	3
  6307  001BDE  6E21               	movwf	?___wmul+2,c
  6308  001BE0  0E00               	movlw	0
  6309  001BE2  6E19               	movwf	?___awdiv+3,c
  6310  001BE4  0E64               	movlw	100
  6311  001BE6  6E18               	movwf	?___awdiv+2,c
  6312  001BE8  C036  F016         	movff	fround@prec,?___awdiv
  6313  001BEC  6A17               	clrf	?___awdiv+1,c
  6314  001BEE  ECA6  F014         	call	___awdiv	;wreg free
  6315  001BF2  0E12               	movlw	18
  6316  001BF4  2416               	addwf	?___awdiv,w,c
  6317  001BF6  6E1F               	movwf	?___wmul,c
  6318  001BF8  0E00               	movlw	0
  6319  001BFA  2017               	addwfc	?___awdiv+1,w,c
  6320  001BFC  6E20               	movwf	?___wmul+1,c
  6321  001BFE  EC0A  F017         	call	___wmul	;wreg free
  6322  001C02  0E28               	movlw	low __npowers_
  6323  001C04  241F               	addwf	?___wmul,w,c
  6324  001C06  6EF6               	movwf	tblptrl,c
  6325  001C08  0E06               	movlw	high __npowers_
  6326  001C0A  2020               	addwfc	?___wmul+1,w,c
  6327  001C0C  6EF7               	movwf	tblptrh,c
  6328  001C0E  0009               	tblrd		*+
  6329  001C10  CFF5 F03C          	movff	tablat,??_fround+3
  6330  001C14  0009               	tblrd		*+
  6331  001C16  CFF5 F03D          	movff	tablat,??_fround+4
  6332  001C1A  0009               	tblrd		*+
  6333  001C1C  CFF5 F03E          	movff	tablat,??_fround+5
  6334  001C20  C03E  F027         	movff	??_fround+5,?___ftmul+2
  6335  001C24  C03D  F026         	movff	??_fround+4,?___ftmul+1
  6336  001C28  C03C  F025         	movff	??_fround+3,?___ftmul
  6337  001C2C  EC1B  F011         	call	___ftmul	;wreg free
  6338  001C30  C027  F044         	movff	?___ftmul+2,_fround$1135+2
  6339  001C34  C026  F043         	movff	?___ftmul+1,_fround$1135+1
  6340  001C38  C025  F042         	movff	?___ftmul,_fround$1135
  6341                           
  6342                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6343  001C3C  0E00               	movlw	0
  6344  001C3E  6E22               	movwf	?___wmul+3,c
  6345  001C40  0E03               	movlw	3
  6346  001C42  6E21               	movwf	?___wmul+2,c
  6347  001C44  0E00               	movlw	0
  6348  001C46  6E12               	movwf	?___awmod+3,c
  6349  001C48  0E0A               	movlw	10
  6350  001C4A  6E11               	movwf	?___awmod+2,c
  6351  001C4C  C036  F00F         	movff	fround@prec,?___awmod
  6352  001C50  6A10               	clrf	?___awmod+1,c
  6353  001C52  EC74  F015         	call	___awmod	;wreg free
  6354  001C56  C00F  F01F         	movff	?___awmod,?___wmul
  6355  001C5A  C010  F020         	movff	?___awmod+1,?___wmul+1
  6356  001C5E  EC0A  F017         	call	___wmul	;wreg free
  6357  001C62  0E28               	movlw	low __npowers_
  6358  001C64  241F               	addwf	?___wmul,w,c
  6359  001C66  6EF6               	movwf	tblptrl,c
  6360  001C68  0E06               	movlw	high __npowers_
  6361  001C6A  2020               	addwfc	?___wmul+1,w,c
  6362  001C6C  6EF7               	movwf	tblptrh,c
  6363  001C6E  0009               	tblrd		*+
  6364  001C70  CFF5 F039          	movff	tablat,??_fround
  6365  001C74  0009               	tblrd		*+
  6366  001C76  CFF5 F03A          	movff	tablat,??_fround+1
  6367  001C7A  0009               	tblrd		*+
  6368  001C7C  CFF5 F03B          	movff	tablat,??_fround+2
  6369  001C80  C03B  F02A         	movff	??_fround+2,?___ftmul+5
  6370  001C84  C03A  F029         	movff	??_fround+1,?___ftmul+4
  6371  001C88  C039  F028         	movff	??_fround,?___ftmul+3
  6372  001C8C  C042  F025         	movff	_fround$1135,?___ftmul
  6373  001C90  C043  F026         	movff	_fround$1135+1,?___ftmul+1
  6374  001C94  C044  F027         	movff	_fround$1135+2,?___ftmul+2
  6375  001C98  EC1B  F011         	call	___ftmul	;wreg free
  6376  001C9C  C027  F041         	movff	?___ftmul+2,_fround$1136+2
  6377  001CA0  C026  F040         	movff	?___ftmul+1,_fround$1136+1
  6378  001CA4  C025  F03F         	movff	?___ftmul,_fround$1136
  6379                           
  6380                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  6381  001CA8  C03F  F025         	movff	_fround$1136,?___ftmul
  6382  001CAC  C040  F026         	movff	_fround$1136+1,?___ftmul+1
  6383  001CB0  C041  F027         	movff	_fround$1136+2,?___ftmul+2
  6384  001CB4  0E00               	movlw	0
  6385  001CB6  6E28               	movwf	?___ftmul+3,c
  6386  001CB8  0E00               	movlw	0
  6387  001CBA  6E29               	movwf	?___ftmul+4,c
  6388  001CBC  0E3F               	movlw	63
  6389  001CBE  6E2A               	movwf	?___ftmul+5,c
  6390  001CC0  EC1B  F011         	call	___ftmul	;wreg free
  6391  001CC4  D08B               	goto	L15
  6392  001CC6                     l4203:
  6393                           
  6394                           ;doprnt.c: 415: else if(prec > 10)
  6395  001CC6  0E0A               	movlw	10
  6396  001CC8  6436               	cpfsgt	fround@prec,c
  6397  001CCA  D069               	goto	l4211
  6398                           
  6399                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6400  001CCC  0E00               	movlw	0
  6401  001CCE  6E22               	movwf	?___wmul+3,c
  6402  001CD0  0E03               	movlw	3
  6403  001CD2  6E21               	movwf	?___wmul+2,c
  6404  001CD4  0E00               	movlw	0
  6405  001CD6  6E12               	movwf	?___awmod+3,c
  6406  001CD8  0E0A               	movlw	10
  6407  001CDA  6E11               	movwf	?___awmod+2,c
  6408  001CDC  C036  F00F         	movff	fround@prec,?___awmod
  6409  001CE0  6A10               	clrf	?___awmod+1,c
  6410  001CE2  EC74  F015         	call	___awmod	;wreg free
  6411  001CE6  C00F  F01F         	movff	?___awmod,?___wmul
  6412  001CEA  C010  F020         	movff	?___awmod+1,?___wmul+1
  6413  001CEE  EC0A  F017         	call	___wmul	;wreg free
  6414  001CF2  0E28               	movlw	low __npowers_
  6415  001CF4  241F               	addwf	?___wmul,w,c
  6416  001CF6  6EF6               	movwf	tblptrl,c
  6417  001CF8  0E06               	movlw	high __npowers_
  6418  001CFA  2020               	addwfc	?___wmul+1,w,c
  6419  001CFC  6EF7               	movwf	tblptrh,c
  6420  001CFE  0009               	tblrd		*+
  6421  001D00  CFF5 F039          	movff	tablat,??_fround
  6422  001D04  0009               	tblrd		*+
  6423  001D06  CFF5 F03A          	movff	tablat,??_fround+1
  6424  001D0A  0009               	tblrd		*+
  6425  001D0C  CFF5 F03B          	movff	tablat,??_fround+2
  6426  001D10  C03B  F02A         	movff	??_fround+2,?___ftmul+5
  6427  001D14  C03A  F029         	movff	??_fround+1,?___ftmul+4
  6428  001D18  C039  F028         	movff	??_fround,?___ftmul+3
  6429  001D1C  0E00               	movlw	0
  6430  001D1E  6E22               	movwf	?___wmul+3,c
  6431  001D20  0E03               	movlw	3
  6432  001D22  6E21               	movwf	?___wmul+2,c
  6433  001D24  0E00               	movlw	0
  6434  001D26  6E19               	movwf	?___awdiv+3,c
  6435  001D28  0E0A               	movlw	10
  6436  001D2A  6E18               	movwf	?___awdiv+2,c
  6437  001D2C  C036  F016         	movff	fround@prec,?___awdiv
  6438  001D30  6A17               	clrf	?___awdiv+1,c
  6439  001D32  ECA6  F014         	call	___awdiv	;wreg free
  6440  001D36  0E09               	movlw	9
  6441  001D38  2416               	addwf	?___awdiv,w,c
  6442  001D3A  6E1F               	movwf	?___wmul,c
  6443  001D3C  0E00               	movlw	0
  6444  001D3E  2017               	addwfc	?___awdiv+1,w,c
  6445  001D40  6E20               	movwf	?___wmul+1,c
  6446  001D42  EC0A  F017         	call	___wmul	;wreg free
  6447  001D46  0E28               	movlw	low __npowers_
  6448  001D48  241F               	addwf	?___wmul,w,c
  6449  001D4A  6EF6               	movwf	tblptrl,c
  6450  001D4C  0E06               	movlw	high __npowers_
  6451  001D4E  2020               	addwfc	?___wmul+1,w,c
  6452  001D50  6EF7               	movwf	tblptrh,c
  6453  001D52  0009               	tblrd		*+
  6454  001D54  CFF5 F03C          	movff	tablat,??_fround+3
  6455  001D58  0009               	tblrd		*+
  6456  001D5A  CFF5 F03D          	movff	tablat,??_fround+4
  6457  001D5E  0009               	tblrd		*+
  6458  001D60  CFF5 F03E          	movff	tablat,??_fround+5
  6459  001D64  C03E  F027         	movff	??_fround+5,?___ftmul+2
  6460  001D68  C03D  F026         	movff	??_fround+4,?___ftmul+1
  6461  001D6C  C03C  F025         	movff	??_fround+3,?___ftmul
  6462  001D70  EC1B  F011         	call	___ftmul	;wreg free
  6463  001D74  C027  F044         	movff	?___ftmul+2,_fround$1135+2
  6464  001D78  C026  F043         	movff	?___ftmul+1,_fround$1135+1
  6465  001D7C  C025  F042         	movff	?___ftmul,_fround$1135
  6466                           
  6467                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  6468  001D80  C042  F025         	movff	_fround$1135,?___ftmul
  6469  001D84  C043  F026         	movff	_fround$1135+1,?___ftmul+1
  6470  001D88  C044  F027         	movff	_fround$1135+2,?___ftmul+2
  6471  001D8C  0E00               	movlw	0
  6472  001D8E  6E28               	movwf	?___ftmul+3,c
  6473  001D90  0E00               	movlw	0
  6474  001D92  6E29               	movwf	?___ftmul+4,c
  6475  001D94  0E3F               	movlw	63
  6476  001D96  6E2A               	movwf	?___ftmul+5,c
  6477  001D98  EC1B  F011         	call	___ftmul	;wreg free
  6478  001D9C  D01F               	goto	L15
  6479  001D9E                     l4211:
  6480                           
  6481                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  6482  001D9E  5036               	movf	fround@prec,w,c
  6483  001DA0  0D03               	mullw	3
  6484  001DA2  0E28               	movlw	low __npowers_
  6485  001DA4  24F3               	addwf	prodl,w,c
  6486  001DA6  6EF6               	movwf	tblptrl,c
  6487  001DA8  0E06               	movlw	high __npowers_
  6488  001DAA  20F4               	addwfc	prodh,w,c
  6489  001DAC  6EF7               	movwf	tblptrh,c
  6490  001DAE  0009               	tblrd		*+
  6491  001DB0  CFF5 F039          	movff	tablat,??_fround
  6492  001DB4  0009               	tblrd		*+
  6493  001DB6  CFF5 F03A          	movff	tablat,??_fround+1
  6494  001DBA  0009               	tblrd		*+
  6495  001DBC  CFF5 F03B          	movff	tablat,??_fround+2
  6496  001DC0  C03B  F027         	movff	??_fround+2,?___ftmul+2
  6497  001DC4  C03A  F026         	movff	??_fround+1,?___ftmul+1
  6498  001DC8  C039  F025         	movff	??_fround,?___ftmul
  6499  001DCC  0E00               	movlw	0
  6500  001DCE  6E28               	movwf	?___ftmul+3,c
  6501  001DD0  0E00               	movlw	0
  6502  001DD2  6E29               	movwf	?___ftmul+4,c
  6503  001DD4  0E3F               	movlw	63
  6504  001DD6  6E2A               	movwf	?___ftmul+5,c
  6505  001DD8  EC1B  F011         	call	___ftmul	;wreg free
  6506  001DDC                     L15:
  6507  001DDC  C027  F038         	movff	?___ftmul+2,?_fround+2
  6508  001DE0  C026  F037         	movff	?___ftmul+1,?_fround+1
  6509  001DE4  C025  F036         	movff	?___ftmul,?_fround
  6510  001DE8  0012               	return	
  6511  001DEA                     __end_of_fround:
  6512                           	opt stack 0
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           intcon	equ	0xFF2
  6520                           wreg	equ	0xFE8
  6521                           indf2	equ	0xFDF
  6522                           postinc2	equ	0xFDE
  6523                           postdec2	equ	0xFDD
  6524                           fsr2h	equ	0xFDA
  6525                           fsr2l	equ	0xFD9
  6526                           status	equ	0xFD8
  6527                           
  6528 ;; *************** function ___wmul *****************
  6529 ;; Defined at:
  6530 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;  multiplier      2   30[COMRAM] unsigned int 
  6533 ;;  multiplicand    2   32[COMRAM] unsigned int 
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  product         2   34[COMRAM] unsigned int 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  2   30[COMRAM] unsigned int 
  6538 ;; Registers used:
  6539 ;;		wreg, status,2, status,0, prodl, prodh
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6545 ;;      Params:         4       0       0       0       0       0       0
  6546 ;;      Locals:         2       0       0       0       0       0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0
  6548 ;;      Totals:         6       0       0       0       0       0       0
  6549 ;;Total ram usage:        6 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    1
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_fround
  6556 ;;		_scale
  6557 ;;		_sprintf
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text22
  6562  002E14                     __ptext22:
  6563                           	opt stack 0
  6564  002E14                     ___wmul:
  6565                           	opt stack 27
  6566                           
  6567                           ;incstack = 0
  6568                           ;incstack = 0
  6569  002E14  501F               	movf	___wmul@multiplier,w,c
  6570  002E16  0221               	mulwf	___wmul@multiplicand,c
  6571  002E18  CFF3 F023          	movff	prodl,___wmul@product
  6572  002E1C  CFF4 F024          	movff	prodh,___wmul@product+1
  6573  002E20  501F               	movf	___wmul@multiplier,w,c
  6574  002E22  0222               	mulwf	___wmul@multiplicand+1,c
  6575  002E24  CFF3 FFF4          	movff	prodl,prodh
  6576  002E28  6AF3               	clrf	prodl,c
  6577  002E2A  50F3               	movf	prodl,w,c
  6578  002E2C  2623               	addwf	___wmul@product,f,c
  6579  002E2E  50F4               	movf	prodh,w,c
  6580  002E30  2224               	addwfc	___wmul@product+1,f,c
  6581  002E32  5020               	movf	___wmul@multiplier+1,w,c
  6582  002E34  0221               	mulwf	___wmul@multiplicand,c
  6583  002E36  CFF3 FFF4          	movff	prodl,prodh
  6584  002E3A  6AF3               	clrf	prodl,c
  6585  002E3C  50F3               	movf	prodl,w,c
  6586  002E3E  2623               	addwf	___wmul@product,f,c
  6587  002E40  50F4               	movf	prodh,w,c
  6588  002E42  2224               	addwfc	___wmul@product+1,f,c
  6589  002E44  C023  F01F         	movff	___wmul@product,?___wmul
  6590  002E48  C024  F020         	movff	___wmul@product+1,?___wmul+1
  6591  002E4C  0012               	return	
  6592  002E4E                     __end_of___wmul:
  6593                           	opt stack 0
  6594                           tblptru	equ	0xFF8
  6595                           tblptrh	equ	0xFF7
  6596                           tblptrl	equ	0xFF6
  6597                           tablat	equ	0xFF5
  6598                           prodh	equ	0xFF4
  6599                           prodl	equ	0xFF3
  6600                           intcon	equ	0xFF2
  6601                           wreg	equ	0xFE8
  6602                           indf2	equ	0xFDF
  6603                           postinc2	equ	0xFDE
  6604                           postdec2	equ	0xFDD
  6605                           fsr2h	equ	0xFDA
  6606                           fsr2l	equ	0xFD9
  6607                           status	equ	0xFD8
  6608                           
  6609 ;; *************** function ___awmod *****************
  6610 ;; Defined at:
  6611 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awmod.c"
  6612 ;; Parameters:    Size  Location     Type
  6613 ;;  dividend        2   14[COMRAM] int 
  6614 ;;  divisor         2   16[COMRAM] int 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;  sign            1   20[COMRAM] unsigned char 
  6617 ;;  counter         1   19[COMRAM] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  2   14[COMRAM] int 
  6620 ;; Registers used:
  6621 ;;		wreg, status,2, status,0
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6627 ;;      Params:         4       0       0       0       0       0       0
  6628 ;;      Locals:         2       0       0       0       0       0       0
  6629 ;;      Temps:          1       0       0       0       0       0       0
  6630 ;;      Totals:         7       0       0       0       0       0       0
  6631 ;;Total ram usage:        7 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    1
  6634 ;; This function calls:
  6635 ;;		Nothing
  6636 ;; This function is called by:
  6637 ;;		_fround
  6638 ;;		_scale
  6639 ;;		_sprintf
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           	psect	text23
  6644  002AE8                     __ptext23:
  6645                           	opt stack 0
  6646  002AE8                     ___awmod:
  6647                           	opt stack 27
  6648                           
  6649                           ;incstack = 0
  6650                           ;incstack = 0
  6651  002AE8  6E13               	movwf	??___awmod& (0+255),c
  6652  002AEA  0E00               	movlw	0
  6653  002AEC  6E15               	movwf	___awmod@sign,c
  6654  002AEE  5013               	movf	??___awmod& (0+255),w,c
  6655  002AF0  AE10               	btfss	___awmod@dividend+1,7,c
  6656  002AF2  D008               	goto	l4649
  6657  002AF4  6C0F               	negf	___awmod@dividend,c
  6658  002AF6  1E10               	comf	___awmod@dividend+1,f,c
  6659  002AF8  B0D8               	btfsc	status,0,c
  6660  002AFA  2A10               	incf	___awmod@dividend+1,f,c
  6661  002AFC  6E13               	movwf	??___awmod& (0+255),c
  6662  002AFE  0E01               	movlw	1
  6663  002B00  6E15               	movwf	___awmod@sign,c
  6664  002B02  5013               	movf	??___awmod& (0+255),w,c
  6665  002B04                     l4649:
  6666  002B04  AE12               	btfss	___awmod@divisor+1,7,c
  6667  002B06  D004               	goto	l4653
  6668  002B08  6C11               	negf	___awmod@divisor,c
  6669  002B0A  1E12               	comf	___awmod@divisor+1,f,c
  6670  002B0C  B0D8               	btfsc	status,0,c
  6671  002B0E  2A12               	incf	___awmod@divisor+1,f,c
  6672  002B10                     l4653:
  6673  002B10  5012               	movf	___awmod@divisor+1,w,c
  6674  002B12  1011               	iorwf	___awmod@divisor,w,c
  6675  002B14  B4D8               	btfsc	status,2,c
  6676  002B16  D01A               	goto	l4669
  6677  002B18  6E13               	movwf	??___awmod& (0+255),c
  6678  002B1A  0E01               	movlw	1
  6679  002B1C  6E14               	movwf	___awmod@counter,c
  6680  002B1E  5013               	movf	??___awmod& (0+255),w,c
  6681  002B20  D004               	goto	l4659
  6682  002B22                     l4657:
  6683  002B22  90D8               	bcf	status,0,c
  6684  002B24  3611               	rlcf	___awmod@divisor,f,c
  6685  002B26  3612               	rlcf	___awmod@divisor+1,f,c
  6686  002B28  2A14               	incf	___awmod@counter,f,c
  6687  002B2A                     l4659:
  6688  002B2A  AE12               	btfss	___awmod@divisor+1,7,c
  6689  002B2C  D7FA               	goto	l4657
  6690  002B2E                     l4661:
  6691  002B2E  5011               	movf	___awmod@divisor,w,c
  6692  002B30  5C0F               	subwf	___awmod@dividend,w,c
  6693  002B32  5012               	movf	___awmod@divisor+1,w,c
  6694  002B34  5810               	subwfb	___awmod@dividend+1,w,c
  6695  002B36  A0D8               	btfss	status,0,c
  6696  002B38  D004               	goto	l4665
  6697  002B3A  5011               	movf	___awmod@divisor,w,c
  6698  002B3C  5E0F               	subwf	___awmod@dividend,f,c
  6699  002B3E  5012               	movf	___awmod@divisor+1,w,c
  6700  002B40  5A10               	subwfb	___awmod@dividend+1,f,c
  6701  002B42                     l4665:
  6702  002B42  90D8               	bcf	status,0,c
  6703  002B44  3212               	rrcf	___awmod@divisor+1,f,c
  6704  002B46  3211               	rrcf	___awmod@divisor,f,c
  6705  002B48  2E14               	decfsz	___awmod@counter,f,c
  6706  002B4A  D7F1               	goto	l4661
  6707  002B4C                     l4669:
  6708  002B4C  5015               	movf	___awmod@sign,w,c
  6709  002B4E  B4D8               	btfsc	status,2,c
  6710  002B50  D004               	goto	l4673
  6711  002B52  6C0F               	negf	___awmod@dividend,c
  6712  002B54  1E10               	comf	___awmod@dividend+1,f,c
  6713  002B56  B0D8               	btfsc	status,0,c
  6714  002B58  2A10               	incf	___awmod@dividend+1,f,c
  6715  002B5A                     l4673:
  6716  002B5A  C00F  F00F         	movff	___awmod@dividend,?___awmod
  6717  002B5E  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
  6718  002B62  0012               	return	
  6719  002B64                     __end_of___awmod:
  6720                           	opt stack 0
  6721                           tblptru	equ	0xFF8
  6722                           tblptrh	equ	0xFF7
  6723                           tblptrl	equ	0xFF6
  6724                           tablat	equ	0xFF5
  6725                           prodh	equ	0xFF4
  6726                           prodl	equ	0xFF3
  6727                           intcon	equ	0xFF2
  6728                           wreg	equ	0xFE8
  6729                           indf2	equ	0xFDF
  6730                           postinc2	equ	0xFDE
  6731                           postdec2	equ	0xFDD
  6732                           fsr2h	equ	0xFDA
  6733                           fsr2l	equ	0xFD9
  6734                           status	equ	0xFD8
  6735                           
  6736 ;; *************** function ___awdiv *****************
  6737 ;; Defined at:
  6738 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awdiv.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;  dividend        2   21[COMRAM] int 
  6741 ;;  divisor         2   23[COMRAM] int 
  6742 ;; Auto vars:     Size  Location     Type
  6743 ;;  quotient        2   28[COMRAM] int 
  6744 ;;  sign            1   27[COMRAM] unsigned char 
  6745 ;;  counter         1   26[COMRAM] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  2   21[COMRAM] int 
  6748 ;; Registers used:
  6749 ;;		wreg, status,2, status,0
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6755 ;;      Params:         4       0       0       0       0       0       0
  6756 ;;      Locals:         4       0       0       0       0       0       0
  6757 ;;      Temps:          1       0       0       0       0       0       0
  6758 ;;      Totals:         9       0       0       0       0       0       0
  6759 ;;Total ram usage:        9 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    1
  6762 ;; This function calls:
  6763 ;;		Nothing
  6764 ;; This function is called by:
  6765 ;;		_fround
  6766 ;;		_scale
  6767 ;;		_sprintf
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text24
  6772  00294C                     __ptext24:
  6773                           	opt stack 0
  6774  00294C                     ___awdiv:
  6775                           	opt stack 27
  6776                           
  6777                           ;incstack = 0
  6778                           ;incstack = 0
  6779  00294C  6E1A               	movwf	??___awdiv& (0+255),c
  6780  00294E  0E00               	movlw	0
  6781  002950  6E1C               	movwf	___awdiv@sign,c
  6782  002952  501A               	movf	??___awdiv& (0+255),w,c
  6783  002954  AE19               	btfss	___awdiv@divisor+1,7,c
  6784  002956  D008               	goto	l4605
  6785  002958  6C18               	negf	___awdiv@divisor,c
  6786  00295A  1E19               	comf	___awdiv@divisor+1,f,c
  6787  00295C  B0D8               	btfsc	status,0,c
  6788  00295E  2A19               	incf	___awdiv@divisor+1,f,c
  6789  002960  6E1A               	movwf	??___awdiv& (0+255),c
  6790  002962  0E01               	movlw	1
  6791  002964  6E1C               	movwf	___awdiv@sign,c
  6792  002966  501A               	movf	??___awdiv& (0+255),w,c
  6793  002968                     l4605:
  6794  002968  AE17               	btfss	___awdiv@dividend+1,7,c
  6795  00296A  D006               	goto	l4611
  6796  00296C  6C16               	negf	___awdiv@dividend,c
  6797  00296E  1E17               	comf	___awdiv@dividend+1,f,c
  6798  002970  B0D8               	btfsc	status,0,c
  6799  002972  2A17               	incf	___awdiv@dividend+1,f,c
  6800  002974  0E01               	movlw	1
  6801  002976  1A1C               	xorwf	___awdiv@sign,f,c
  6802  002978                     l4611:
  6803  002978  0E00               	movlw	0
  6804  00297A  6E1E               	movwf	___awdiv@quotient+1,c
  6805  00297C  0E00               	movlw	0
  6806  00297E  6E1D               	movwf	___awdiv@quotient,c
  6807  002980  5019               	movf	___awdiv@divisor+1,w,c
  6808  002982  1018               	iorwf	___awdiv@divisor,w,c
  6809  002984  B4D8               	btfsc	status,2,c
  6810  002986  D01E               	goto	l4633
  6811  002988  6E1A               	movwf	??___awdiv& (0+255),c
  6812  00298A  0E01               	movlw	1
  6813  00298C  6E1B               	movwf	___awdiv@counter,c
  6814  00298E  501A               	movf	??___awdiv& (0+255),w,c
  6815  002990  D004               	goto	l4619
  6816  002992                     l4617:
  6817  002992  90D8               	bcf	status,0,c
  6818  002994  3618               	rlcf	___awdiv@divisor,f,c
  6819  002996  3619               	rlcf	___awdiv@divisor+1,f,c
  6820  002998  2A1B               	incf	___awdiv@counter,f,c
  6821  00299A                     l4619:
  6822  00299A  AE19               	btfss	___awdiv@divisor+1,7,c
  6823  00299C  D7FA               	goto	l4617
  6824  00299E                     l4621:
  6825  00299E  90D8               	bcf	status,0,c
  6826  0029A0  361D               	rlcf	___awdiv@quotient,f,c
  6827  0029A2  361E               	rlcf	___awdiv@quotient+1,f,c
  6828  0029A4  5018               	movf	___awdiv@divisor,w,c
  6829  0029A6  5C16               	subwf	___awdiv@dividend,w,c
  6830  0029A8  5019               	movf	___awdiv@divisor+1,w,c
  6831  0029AA  5817               	subwfb	___awdiv@dividend+1,w,c
  6832  0029AC  A0D8               	btfss	status,0,c
  6833  0029AE  D005               	goto	l4629
  6834  0029B0  5018               	movf	___awdiv@divisor,w,c
  6835  0029B2  5E16               	subwf	___awdiv@dividend,f,c
  6836  0029B4  5019               	movf	___awdiv@divisor+1,w,c
  6837  0029B6  5A17               	subwfb	___awdiv@dividend+1,f,c
  6838  0029B8  801D               	bsf	___awdiv@quotient,0,c
  6839  0029BA                     l4629:
  6840  0029BA  90D8               	bcf	status,0,c
  6841  0029BC  3219               	rrcf	___awdiv@divisor+1,f,c
  6842  0029BE  3218               	rrcf	___awdiv@divisor,f,c
  6843  0029C0  2E1B               	decfsz	___awdiv@counter,f,c
  6844  0029C2  D7ED               	goto	l4621
  6845  0029C4                     l4633:
  6846  0029C4  501C               	movf	___awdiv@sign,w,c
  6847  0029C6  B4D8               	btfsc	status,2,c
  6848  0029C8  D004               	goto	l4637
  6849  0029CA  6C1D               	negf	___awdiv@quotient,c
  6850  0029CC  1E1E               	comf	___awdiv@quotient+1,f,c
  6851  0029CE  B0D8               	btfsc	status,0,c
  6852  0029D0  2A1E               	incf	___awdiv@quotient+1,f,c
  6853  0029D2                     l4637:
  6854  0029D2  C01D  F016         	movff	___awdiv@quotient,?___awdiv
  6855  0029D6  C01E  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  6856  0029DA  0012               	return	
  6857  0029DC                     __end_of___awdiv:
  6858                           	opt stack 0
  6859                           tblptru	equ	0xFF8
  6860                           tblptrh	equ	0xFF7
  6861                           tblptrl	equ	0xFF6
  6862                           tablat	equ	0xFF5
  6863                           prodh	equ	0xFF4
  6864                           prodl	equ	0xFF3
  6865                           intcon	equ	0xFF2
  6866                           wreg	equ	0xFE8
  6867                           indf2	equ	0xFDF
  6868                           postinc2	equ	0xFDE
  6869                           postdec2	equ	0xFDD
  6870                           fsr2h	equ	0xFDA
  6871                           fsr2l	equ	0xFD9
  6872                           status	equ	0xFD8
  6873                           
  6874 ;; *************** function _load_string *****************
  6875 ;; Defined at:
  6876 ;;		line 207 in file "HW8.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
  6879 ;;		 -> main@buffer(16), STR_1(16), 
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;		None
  6882 ;; Return value:  Size  Location     Type
  6883 ;;		None               void
  6884 ;; Registers used:
  6885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6886 ;; Tracked objects:
  6887 ;;		On entry : 0/0
  6888 ;;		On exit  : 0/0
  6889 ;;		Unchanged: 0/0
  6890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6891 ;;      Params:         2       0       0       0       0       0       0
  6892 ;;      Locals:         0       0       0       0       0       0       0
  6893 ;;      Temps:          3       0       0       0       0       0       0
  6894 ;;      Totals:         5       0       0       0       0       0       0
  6895 ;;Total ram usage:        5 bytes
  6896 ;; Hardware stack levels used:    1
  6897 ;; Hardware stack levels required when called:    4
  6898 ;; This function calls:
  6899 ;;		_send_data
  6900 ;; This function is called by:
  6901 ;;		_main
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text25
  6906  002C32                     __ptext25:
  6907                           	opt stack 0
  6908  002C32                     _load_string:
  6909                           	opt stack 25
  6910                           
  6911                           ;HW8.c: 208: while(*ptr != 0){
  6912                           
  6913                           ;incstack = 0
  6914                           ;incstack = 0
  6915  002C32  D01F               	goto	l3773
  6916  002C34                     l3769:
  6917                           
  6918                           ;HW8.c: 209: send_data(*ptr,0,1,1);
  6919  002C34  501A               	movf	load_string@ptr,w,c
  6920  002C36  6EF6               	movwf	tblptrl,c
  6921  002C38  6EE9               	movwf	fsr0l,c
  6922  002C3A  0E05               	movlw	(high __ramtop+-1)
  6923  002C3C  6EEA               	movwf	fsr0h,c
  6924  002C3E  501B               	movf	load_string@ptr+1,w,c
  6925  002C40  64EA               	cpfsgt	fsr0h,c
  6926  002C42  D003               	bra	u1717
  6927  002C44  6EEA               	movwf	fsr0h,c
  6928  002C46  50EF               	movf	indf0,w,c
  6929  002C48  D003               	bra	u1710
  6930  002C4A                     u1717:
  6931  002C4A  6EF7               	movwf	tblptrh,c
  6932  002C4C  0008               	tblrd		*
  6933  002C4E  50F5               	movf	tablat,w,c
  6934  002C50                     u1710:
  6935  002C50  6E12               	movwf	?_send_data,c
  6936  002C52  6E1C               	movwf	??_load_string& (0+255),c
  6937  002C54  0E00               	movlw	0
  6938  002C56  6E13               	movwf	?_send_data+1,c
  6939  002C58  501C               	movf	??_load_string& (0+255),w,c
  6940  002C5A  6E1D               	movwf	(??_load_string+1)& (0+255),c
  6941  002C5C  0E01               	movlw	1
  6942  002C5E  6E14               	movwf	?_send_data+2,c
  6943  002C60  501D               	movf	(??_load_string+1)& (0+255),w,c
  6944  002C62  6E1E               	movwf	(??_load_string+2)& (0+255),c
  6945  002C64  0E01               	movlw	1
  6946  002C66  6E15               	movwf	?_send_data+3,c
  6947  002C68  501E               	movf	(??_load_string+2)& (0+255),w,c
  6948  002C6A  EC52  F014         	call	_send_data	;wreg free
  6949                           
  6950                           ;HW8.c: 210: ptr++;
  6951  002C6E  4A1A               	infsnz	load_string@ptr,f,c
  6952  002C70  2A1B               	incf	load_string@ptr+1,f,c
  6953  002C72                     l3773:
  6954  002C72  501A               	movf	load_string@ptr,w,c
  6955  002C74  6EF6               	movwf	tblptrl,c
  6956  002C76  6EE9               	movwf	fsr0l,c
  6957  002C78  0E05               	movlw	(high __ramtop+-1)
  6958  002C7A  6EEA               	movwf	fsr0h,c
  6959  002C7C  501B               	movf	load_string@ptr+1,w,c
  6960  002C7E  64EA               	cpfsgt	fsr0h,c
  6961  002C80  D003               	bra	u1727
  6962  002C82  6EEA               	movwf	fsr0h,c
  6963  002C84  50EF               	movf	indf0,w,c
  6964  002C86  D003               	bra	u1720
  6965  002C88                     u1727:
  6966  002C88  6EF7               	movwf	tblptrh,c
  6967  002C8A  0008               	tblrd		*
  6968  002C8C  50F5               	movf	tablat,w,c
  6969  002C8E                     u1720:
  6970  002C8E  0900               	iorlw	0
  6971  002C90  B4D8               	btfsc	status,2,c
  6972                           
  6973                           ;HW8.c: 211: }
  6974                           ;HW8.c: 212: return;
  6975  002C92  0012               	return	
  6976  002C94  D7CF               	goto	l3769
  6977  002C96                     __end_of_load_string:
  6978                           	opt stack 0
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           intcon	equ	0xFF2
  6986                           indf0	equ	0xFEF
  6987                           fsr0h	equ	0xFEA
  6988                           fsr0l	equ	0xFE9
  6989                           wreg	equ	0xFE8
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _init_LCD *****************
  6998 ;; Defined at:
  6999 ;;		line 120 in file "HW8.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;		None               void
  7006 ;; Registers used:
  7007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7013 ;;      Params:         0       0       0       0       0       0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0
  7015 ;;      Temps:          4       0       0       0       0       0       0
  7016 ;;      Totals:         4       0       0       0       0       0       0
  7017 ;;Total ram usage:        4 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    4
  7020 ;; This function calls:
  7021 ;;		_send_data
  7022 ;;		_delayms
  7023 ;; This function is called by:
  7024 ;;		_main
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text26
  7029  002538                     __ptext26:
  7030                           	opt stack 0
  7031  002538                     _init_LCD:
  7032                           	opt stack 25
  7033                           
  7034                           ;HW8.c: 121: TRISD = 0x00;
  7035                           
  7036                           ;incstack = 0
  7037                           ;incstack = 0
  7038  002538  0E00               	movlw	0
  7039  00253A  6E95               	movwf	3989,c	;volatile
  7040                           
  7041                           ;HW8.c: 122: PORTD = 0x00;
  7042  00253C  0E00               	movlw	0
  7043  00253E  6E83               	movwf	3971,c	;volatile
  7044                           
  7045                           ;HW8.c: 123: PORTDbits.RD7 = 1;
  7046  002540  8E83               	bsf	3971,7,c	;volatile
  7047                           
  7048                           ;HW8.c: 124: delayms(100);
  7049  002542  6E1A               	movwf	??_init_LCD& (0+255),c
  7050  002544  0E64               	movlw	100
  7051  002546  6E0F               	movwf	?_delayms,c
  7052  002548  501A               	movf	??_init_LCD& (0+255),w,c
  7053  00254A  EC77  F017         	call	_delayms	;wreg free
  7054                           
  7055                           ;HW8.c: 125: send_data(0x20,1,0,0);
  7056  00254E  6E1A               	movwf	??_init_LCD& (0+255),c
  7057  002550  0E20               	movlw	32
  7058  002552  6E12               	movwf	?_send_data,c
  7059  002554  501A               	movf	??_init_LCD& (0+255),w,c
  7060  002556  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7061  002558  0E01               	movlw	1
  7062  00255A  6E13               	movwf	?_send_data+1,c
  7063  00255C  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7064  00255E  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7065  002560  0E00               	movlw	0
  7066  002562  6E14               	movwf	?_send_data+2,c
  7067  002564  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7068  002566  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7069  002568  0E00               	movlw	0
  7070  00256A  6E15               	movwf	?_send_data+3,c
  7071  00256C  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7072  00256E  EC52  F014         	call	_send_data	;wreg free
  7073                           
  7074                           ;HW8.c: 126: send_data(0x28,1,0,1);
  7075  002572  6E1A               	movwf	??_init_LCD& (0+255),c
  7076  002574  0E28               	movlw	40
  7077  002576  6E12               	movwf	?_send_data,c
  7078  002578  501A               	movf	??_init_LCD& (0+255),w,c
  7079  00257A  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7080  00257C  0E01               	movlw	1
  7081  00257E  6E13               	movwf	?_send_data+1,c
  7082  002580  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7083  002582  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7084  002584  0E00               	movlw	0
  7085  002586  6E14               	movwf	?_send_data+2,c
  7086  002588  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7087  00258A  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7088  00258C  0E01               	movlw	1
  7089  00258E  6E15               	movwf	?_send_data+3,c
  7090  002590  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7091  002592  EC52  F014         	call	_send_data	;wreg free
  7092                           
  7093                           ;HW8.c: 127: send_data(0x28,1,0,1);
  7094  002596  6E1A               	movwf	??_init_LCD& (0+255),c
  7095  002598  0E28               	movlw	40
  7096  00259A  6E12               	movwf	?_send_data,c
  7097  00259C  501A               	movf	??_init_LCD& (0+255),w,c
  7098  00259E  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7099  0025A0  0E01               	movlw	1
  7100  0025A2  6E13               	movwf	?_send_data+1,c
  7101  0025A4  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7102  0025A6  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7103  0025A8  0E00               	movlw	0
  7104  0025AA  6E14               	movwf	?_send_data+2,c
  7105  0025AC  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7106  0025AE  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7107  0025B0  0E01               	movlw	1
  7108  0025B2  6E15               	movwf	?_send_data+3,c
  7109  0025B4  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7110  0025B6  EC52  F014         	call	_send_data	;wreg free
  7111                           
  7112                           ;HW8.c: 128: send_data(0x06,1,0,1);
  7113  0025BA  6E1A               	movwf	??_init_LCD& (0+255),c
  7114  0025BC  0E06               	movlw	6
  7115  0025BE  6E12               	movwf	?_send_data,c
  7116  0025C0  501A               	movf	??_init_LCD& (0+255),w,c
  7117  0025C2  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7118  0025C4  0E01               	movlw	1
  7119  0025C6  6E13               	movwf	?_send_data+1,c
  7120  0025C8  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7121  0025CA  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7122  0025CC  0E00               	movlw	0
  7123  0025CE  6E14               	movwf	?_send_data+2,c
  7124  0025D0  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7125  0025D2  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7126  0025D4  0E01               	movlw	1
  7127  0025D6  6E15               	movwf	?_send_data+3,c
  7128  0025D8  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7129  0025DA  EC52  F014         	call	_send_data	;wreg free
  7130                           
  7131                           ;HW8.c: 129: send_data(0x0c,1,0,1);
  7132  0025DE  6E1A               	movwf	??_init_LCD& (0+255),c
  7133  0025E0  0E0C               	movlw	12
  7134  0025E2  6E12               	movwf	?_send_data,c
  7135  0025E4  501A               	movf	??_init_LCD& (0+255),w,c
  7136  0025E6  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7137  0025E8  0E01               	movlw	1
  7138  0025EA  6E13               	movwf	?_send_data+1,c
  7139  0025EC  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7140  0025EE  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7141  0025F0  0E00               	movlw	0
  7142  0025F2  6E14               	movwf	?_send_data+2,c
  7143  0025F4  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7144  0025F6  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7145  0025F8  0E01               	movlw	1
  7146  0025FA  6E15               	movwf	?_send_data+3,c
  7147  0025FC  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7148  0025FE  EC52  F014         	call	_send_data	;wreg free
  7149                           
  7150                           ;HW8.c: 130: send_data(0x02,1,0,1);
  7151  002602  6E1A               	movwf	??_init_LCD& (0+255),c
  7152  002604  0E02               	movlw	2
  7153  002606  6E12               	movwf	?_send_data,c
  7154  002608  501A               	movf	??_init_LCD& (0+255),w,c
  7155  00260A  6E1B               	movwf	(??_init_LCD+1)& (0+255),c
  7156  00260C  0E01               	movlw	1
  7157  00260E  6E13               	movwf	?_send_data+1,c
  7158  002610  501B               	movf	(??_init_LCD+1)& (0+255),w,c
  7159  002612  6E1C               	movwf	(??_init_LCD+2)& (0+255),c
  7160  002614  0E00               	movlw	0
  7161  002616  6E14               	movwf	?_send_data+2,c
  7162  002618  501C               	movf	(??_init_LCD+2)& (0+255),w,c
  7163  00261A  6E1D               	movwf	(??_init_LCD+3)& (0+255),c
  7164  00261C  0E01               	movlw	1
  7165  00261E  6E15               	movwf	?_send_data+3,c
  7166  002620  501D               	movf	(??_init_LCD+3)& (0+255),w,c
  7167  002622  EC52  F014         	call	_send_data	;wreg free
  7168  002626  0012               	return	
  7169  002628                     __end_of_init_LCD:
  7170                           	opt stack 0
  7171                           tblptru	equ	0xFF8
  7172                           tblptrh	equ	0xFF7
  7173                           tblptrl	equ	0xFF6
  7174                           tablat	equ	0xFF5
  7175                           prodh	equ	0xFF4
  7176                           prodl	equ	0xFF3
  7177                           intcon	equ	0xFF2
  7178                           indf0	equ	0xFEF
  7179                           fsr0h	equ	0xFEA
  7180                           fsr0l	equ	0xFE9
  7181                           wreg	equ	0xFE8
  7182                           indf2	equ	0xFDF
  7183                           postinc2	equ	0xFDE
  7184                           postdec2	equ	0xFDD
  7185                           fsr2h	equ	0xFDA
  7186                           fsr2l	equ	0xFD9
  7187                           status	equ	0xFD8
  7188                           
  7189 ;; *************** function _send_data *****************
  7190 ;; Defined at:
  7191 ;;		line 134 in file "HW8.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  data            1   17[COMRAM] unsigned char 
  7194 ;;  cflag           1   18[COMRAM] unsigned char 
  7195 ;;  chk_busy        1   19[COMRAM] unsigned char 
  7196 ;;  dflag           1   20[COMRAM] unsigned char 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  d               1   24[COMRAM] unsigned char 
  7199 ;;  c               1   23[COMRAM] unsigned char 
  7200 ;;  bflag           1   22[COMRAM] unsigned char 
  7201 ;; Return value:  Size  Location     Type
  7202 ;;		None               void
  7203 ;; Registers used:
  7204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7210 ;;      Params:         4       0       0       0       0       0       0
  7211 ;;      Locals:         3       0       0       0       0       0       0
  7212 ;;      Temps:          1       0       0       0       0       0       0
  7213 ;;      Totals:         8       0       0       0       0       0       0
  7214 ;;Total ram usage:        8 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    3
  7217 ;; This function calls:
  7218 ;;		_delayms
  7219 ;;		_epulse
  7220 ;;		_delayus
  7221 ;; This function is called by:
  7222 ;;		_main
  7223 ;;		_init_LCD
  7224 ;;		_load_string
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	text27
  7229  0028A4                     __ptext27:
  7230                           	opt stack 0
  7231  0028A4                     _send_data:
  7232                           	opt stack 26
  7233                           
  7234                           ;HW8.c: 135: char c,d,bflag;
  7235                           ;HW8.c: 136: if(chk_busy){
  7236                           
  7237                           ;incstack = 0
  7238                           ;incstack = 0
  7239  0028A4  5014               	movf	send_data@chk_busy,w,c
  7240  0028A6  B4D8               	btfsc	status,2,c
  7241  0028A8  D028               	goto	l3803
  7242                           
  7243                           ;HW8.c: 137: TRISD = 0x0F;
  7244  0028AA  0E0F               	movlw	15
  7245  0028AC  6E95               	movwf	3989,c	;volatile
  7246                           
  7247                           ;HW8.c: 138: PORTDbits.RD4 = 0;
  7248  0028AE  9883               	bcf	3971,4,c	;volatile
  7249                           
  7250                           ;HW8.c: 139: PORTDbits.RD5 = 1;
  7251  0028B0  8A83               	bsf	3971,5,c	;volatile
  7252                           
  7253                           ;HW8.c: 140: bflag = 1;
  7254  0028B2  6E16               	movwf	??_send_data& (0+255),c
  7255  0028B4  0E01               	movlw	1
  7256  0028B6  6E17               	movwf	send_data@bflag,c
  7257  0028B8  5016               	movf	??_send_data& (0+255),w,c
  7258                           
  7259                           ;HW8.c: 142: while(bflag){
  7260  0028BA  D01C               	goto	l3801
  7261  0028BC                     l3785:
  7262                           
  7263                           ;HW8.c: 143: epulse();
  7264  0028BC  EC3D  F017         	call	_epulse	;wreg free
  7265                           
  7266                           ;HW8.c: 144: delayus(1);
  7267  0028C0  6E16               	movwf	??_send_data& (0+255),c
  7268  0028C2  0E01               	movlw	1
  7269  0028C4  6E0F               	movwf	?_delayus,c
  7270  0028C6  5016               	movf	??_send_data& (0+255),w,c
  7271  0028C8  EC98  F017         	call	_delayus	;wreg free
  7272                           
  7273                           ;HW8.c: 145: PORTDbits.RD6=1;
  7274  0028CC  8C83               	bsf	3971,6,c	;volatile
  7275                           
  7276                           ;HW8.c: 146: delayus(1);
  7277  0028CE  6E16               	movwf	??_send_data& (0+255),c
  7278  0028D0  0E01               	movlw	1
  7279  0028D2  6E0F               	movwf	?_delayus,c
  7280  0028D4  5016               	movf	??_send_data& (0+255),w,c
  7281  0028D6  EC98  F017         	call	_delayus	;wreg free
  7282                           
  7283                           ;HW8.c: 147: bflag = PORTDbits.RD3;
  7284  0028DA  0E00               	movlw	0
  7285  0028DC  B683               	btfsc	3971,3,c	;volatile
  7286  0028DE  0E01               	movlw	1
  7287  0028E0  6E17               	movwf	send_data@bflag,c
  7288                           
  7289                           ;HW8.c: 148: delayus(1);
  7290  0028E2  6E16               	movwf	??_send_data& (0+255),c
  7291  0028E4  0E01               	movlw	1
  7292  0028E6  6E0F               	movwf	?_delayus,c
  7293  0028E8  5016               	movf	??_send_data& (0+255),w,c
  7294  0028EA  EC98  F017         	call	_delayus	;wreg free
  7295                           
  7296                           ;HW8.c: 149: PORTDbits.RD6=0;
  7297  0028EE  9C83               	bcf	3971,6,c	;volatile
  7298                           
  7299                           ;HW8.c: 150: epulse();
  7300  0028F0  EC3D  F017         	call	_epulse	;wreg free
  7301  0028F4                     l3801:
  7302  0028F4  6617               	tstfsz	send_data@bflag,c
  7303  0028F6  D7E2               	goto	l3785
  7304  0028F8  D006               	goto	L16
  7305  0028FA                     l3803:
  7306                           
  7307                           ;HW8.c: 153: else
  7308                           ;HW8.c: 154: delayms(10);
  7309  0028FA  6E16               	movwf	??_send_data& (0+255),c
  7310  0028FC  0E0A               	movlw	10
  7311  0028FE  6E0F               	movwf	?_delayms,c
  7312  002900  5016               	movf	??_send_data& (0+255),w,c
  7313  002902  EC77  F017         	call	_delayms	;wreg free
  7314  002906                     L16:
  7315                           
  7316                           ;HW8.c: 156: TRISD = 0x00;
  7317  002906  0E00               	movlw	0
  7318  002908  6E95               	movwf	3989,c	;volatile
  7319                           
  7320                           ;HW8.c: 157: if(cflag)
  7321  00290A  5013               	movf	send_data@cflag,w,c
  7322  00290C  B4D8               	btfsc	status,2,c
  7323  00290E  D002               	goto	l67
  7324                           
  7325                           ;HW8.c: 158: PORTDbits.RD4 = 0;
  7326  002910  9883               	bcf	3971,4,c	;volatile
  7327  002912  D001               	goto	l68
  7328  002914                     l67:
  7329                           
  7330                           ;HW8.c: 159: else
  7331                           ;HW8.c: 160: PORTDbits.RD4 = 1;
  7332  002914  8883               	bsf	3971,4,c	;volatile
  7333  002916                     l68:
  7334                           
  7335                           ;HW8.c: 161: PORTDbits.RD5 = 0;
  7336  002916  9A83               	bcf	3971,5,c	;volatile
  7337                           
  7338                           ;HW8.c: 162: c = data>>4;
  7339  002918  3812               	swapf	send_data@data,w,c
  7340  00291A  0B0F               	andlw	15
  7341  00291C  6E18               	movwf	send_data@c,c
  7342                           
  7343                           ;HW8.c: 163: d = PORTD & 0xF0;
  7344  00291E  5083               	movf	3971,w,c	;volatile
  7345  002920  0BF0               	andlw	240
  7346  002922  6E19               	movwf	send_data@d,c
  7347                           
  7348                           ;HW8.c: 164: PORTD = d | c;
  7349  002924  5019               	movf	send_data@d,w,c
  7350  002926  1018               	iorwf	send_data@c,w,c
  7351  002928  6E83               	movwf	3971,c	;volatile
  7352                           
  7353                           ;HW8.c: 165: epulse();
  7354  00292A  EC3D  F017         	call	_epulse	;wreg free
  7355                           
  7356                           ;HW8.c: 166: if (dflag){
  7357  00292E  5015               	movf	send_data@dflag,w,c
  7358  002930  B4D8               	btfsc	status,2,c
  7359  002932  D00B               	goto	l70
  7360                           
  7361                           ;HW8.c: 167: c = data & 0x0F;
  7362  002934  5012               	movf	send_data@data,w,c
  7363  002936  0B0F               	andlw	15
  7364  002938  6E18               	movwf	send_data@c,c
  7365                           
  7366                           ;HW8.c: 168: d = PORTD & 0xF0;
  7367  00293A  5083               	movf	3971,w,c	;volatile
  7368  00293C  0BF0               	andlw	240
  7369  00293E  6E19               	movwf	send_data@d,c
  7370                           
  7371                           ;HW8.c: 169: PORTD = d | c;
  7372  002940  5019               	movf	send_data@d,w,c
  7373  002942  1018               	iorwf	send_data@c,w,c
  7374  002944  6E83               	movwf	3971,c	;volatile
  7375                           
  7376                           ;HW8.c: 170: epulse();
  7377  002946  EC3D  F017         	call	_epulse	;wreg free
  7378  00294A                     l70:
  7379  00294A  0012               	return	
  7380  00294C                     __end_of_send_data:
  7381                           	opt stack 0
  7382                           tblptru	equ	0xFF8
  7383                           tblptrh	equ	0xFF7
  7384                           tblptrl	equ	0xFF6
  7385                           tablat	equ	0xFF5
  7386                           prodh	equ	0xFF4
  7387                           prodl	equ	0xFF3
  7388                           intcon	equ	0xFF2
  7389                           indf0	equ	0xFEF
  7390                           fsr0h	equ	0xFEA
  7391                           fsr0l	equ	0xFE9
  7392                           wreg	equ	0xFE8
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           postdec2	equ	0xFDD
  7396                           fsr2h	equ	0xFDA
  7397                           fsr2l	equ	0xFD9
  7398                           status	equ	0xFD8
  7399                           
  7400 ;; *************** function _epulse *****************
  7401 ;; Defined at:
  7402 ;;		line 176 in file "HW8.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;		None
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;		None
  7407 ;; Return value:  Size  Location     Type
  7408 ;;		None               void
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7416 ;;      Params:         0       0       0       0       0       0       0
  7417 ;;      Locals:         0       0       0       0       0       0       0
  7418 ;;      Temps:          1       0       0       0       0       0       0
  7419 ;;      Totals:         1       0       0       0       0       0       0
  7420 ;;Total ram usage:        1 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    2
  7423 ;; This function calls:
  7424 ;;		_delayus
  7425 ;; This function is called by:
  7426 ;;		_send_data
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text28
  7431  002E7A                     __ptext28:
  7432                           	opt stack 0
  7433  002E7A                     _epulse:
  7434                           	opt stack 26
  7435                           
  7436                           ;HW8.c: 177: delayus(1);
  7437                           
  7438                           ;incstack = 0
  7439                           ;incstack = 0
  7440  002E7A  6E11               	movwf	??_epulse& (0+255),c
  7441  002E7C  0E01               	movlw	1
  7442  002E7E  6E0F               	movwf	?_delayus,c
  7443  002E80  5011               	movf	??_epulse& (0+255),w,c
  7444  002E82  EC98  F017         	call	_delayus	;wreg free
  7445                           
  7446                           ;HW8.c: 178: PORTDbits.RD6=1;
  7447  002E86  8C83               	bsf	3971,6,c	;volatile
  7448                           
  7449                           ;HW8.c: 179: delayus(1);
  7450  002E88  6E11               	movwf	??_epulse& (0+255),c
  7451  002E8A  0E01               	movlw	1
  7452  002E8C  6E0F               	movwf	?_delayus,c
  7453  002E8E  5011               	movf	??_epulse& (0+255),w,c
  7454  002E90  EC98  F017         	call	_delayus	;wreg free
  7455                           
  7456                           ;HW8.c: 180: PORTDbits.RD6=0;
  7457  002E94  9C83               	bcf	3971,6,c	;volatile
  7458                           
  7459                           ;HW8.c: 181: delayus(1);
  7460  002E96  6E11               	movwf	??_epulse& (0+255),c
  7461  002E98  0E01               	movlw	1
  7462  002E9A  6E0F               	movwf	?_delayus,c
  7463  002E9C  5011               	movf	??_epulse& (0+255),w,c
  7464  002E9E  EC98  F017         	call	_delayus	;wreg free
  7465                           
  7466                           ;HW8.c: 182: return;
  7467  002EA2  0012               	return	
  7468  002EA4                     __end_of_epulse:
  7469                           	opt stack 0
  7470                           tblptru	equ	0xFF8
  7471                           tblptrh	equ	0xFF7
  7472                           tblptrl	equ	0xFF6
  7473                           tablat	equ	0xFF5
  7474                           prodh	equ	0xFF4
  7475                           prodl	equ	0xFF3
  7476                           intcon	equ	0xFF2
  7477                           indf0	equ	0xFEF
  7478                           fsr0h	equ	0xFEA
  7479                           fsr0l	equ	0xFE9
  7480                           wreg	equ	0xFE8
  7481                           indf2	equ	0xFDF
  7482                           postinc2	equ	0xFDE
  7483                           postdec2	equ	0xFDD
  7484                           fsr2h	equ	0xFDA
  7485                           fsr2l	equ	0xFD9
  7486                           status	equ	0xFD8
  7487                           
  7488 ;; *************** function _delayus *****************
  7489 ;; Defined at:
  7490 ;;		line 197 in file "HW8.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;  cnt             1   14[COMRAM] unsigned char 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;		None
  7495 ;; Return value:  Size  Location     Type
  7496 ;;		None               void
  7497 ;; Registers used:
  7498 ;;		wreg, status,2, status,0
  7499 ;; Tracked objects:
  7500 ;;		On entry : 0/0
  7501 ;;		On exit  : 0/0
  7502 ;;		Unchanged: 0/0
  7503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7504 ;;      Params:         1       0       0       0       0       0       0
  7505 ;;      Locals:         0       0       0       0       0       0       0
  7506 ;;      Temps:          1       0       0       0       0       0       0
  7507 ;;      Totals:         2       0       0       0       0       0       0
  7508 ;;Total ram usage:        2 bytes
  7509 ;; Hardware stack levels used:    1
  7510 ;; Hardware stack levels required when called:    1
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_send_data
  7515 ;;		_epulse
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text29
  7520  002F30                     __ptext29:
  7521                           	opt stack 0
  7522  002F30                     _delayus:
  7523                           	opt stack 27
  7524                           
  7525                           ;HW8.c: 198: static unsigned char i;
  7526                           ;HW8.c: 199: for (i=0; i<cnt; i++);
  7527                           
  7528                           ;incstack = 0
  7529                           ;incstack = 0
  7530  002F30  6E10               	movwf	??_delayus& (0+255),c
  7531  002F32  0E00               	movlw	0
  7532  002F34  6E6F               	movwf	delayus@i,c
  7533  002F36  5010               	movf	??_delayus& (0+255),w,c
  7534  002F38  D001               	goto	l4191
  7535  002F3A                     l4189:
  7536  002F3A  2A6F               	incf	delayus@i,f,c
  7537  002F3C                     l4191:
  7538  002F3C  500F               	movf	delayus@cnt,w,c
  7539  002F3E  5C6F               	subwf	delayus@i,w,c
  7540  002F40  B0D8               	btfsc	status,0,c
  7541                           
  7542                           ;HW8.c: 200: return;
  7543  002F42  0012               	return	
  7544  002F44  D7FA               	goto	l4189
  7545  002F46                     __end_of_delayus:
  7546                           	opt stack 0
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodh	equ	0xFF4
  7552                           prodl	equ	0xFF3
  7553                           intcon	equ	0xFF2
  7554                           indf0	equ	0xFEF
  7555                           fsr0h	equ	0xFEA
  7556                           fsr0l	equ	0xFE9
  7557                           wreg	equ	0xFE8
  7558                           indf2	equ	0xFDF
  7559                           postinc2	equ	0xFDE
  7560                           postdec2	equ	0xFDD
  7561                           fsr2h	equ	0xFDA
  7562                           fsr2l	equ	0xFD9
  7563                           status	equ	0xFD8
  7564                           
  7565 ;; *************** function _delayms *****************
  7566 ;; Defined at:
  7567 ;;		line 186 in file "HW8.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  cnt             1   14[COMRAM] unsigned char 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;		None               void
  7574 ;; Registers used:
  7575 ;;		wreg, status,2, status,0
  7576 ;; Tracked objects:
  7577 ;;		On entry : 0/0
  7578 ;;		On exit  : 0/0
  7579 ;;		Unchanged: 0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7581 ;;      Params:         1       0       0       0       0       0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0
  7583 ;;      Temps:          1       0       0       0       0       0       0
  7584 ;;      Totals:         2       0       0       0       0       0       0
  7585 ;;Total ram usage:        2 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    1
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_main
  7592 ;;		_init_LCD
  7593 ;;		_send_data
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text30
  7598  002EEE                     __ptext30:
  7599                           	opt stack 0
  7600  002EEE                     _delayms:
  7601                           	opt stack 28
  7602                           
  7603                           ;HW8.c: 187: static unsigned char i,j;
  7604                           ;HW8.c: 188: for (i=0; i<cnt; i++){
  7605                           
  7606                           ;incstack = 0
  7607                           ;incstack = 0
  7608  002EEE  6E10               	movwf	??_delayms& (0+255),c
  7609  002EF0  0E00               	movlw	0
  7610  002EF2  6E6E               	movwf	delayms@i,c
  7611  002EF4  5010               	movf	??_delayms& (0+255),w,c
  7612  002EF6  D008               	goto	l4177
  7613  002EF8                     l4173:
  7614                           
  7615                           ;HW8.c: 189: j=245;
  7616  002EF8  6E10               	movwf	??_delayms& (0+255),c
  7617  002EFA  0EF5               	movlw	245
  7618  002EFC  6E70               	movwf	delayms@j,c
  7619  002EFE  5010               	movf	??_delayms& (0+255),w,c
  7620  002F00                     loop:
  7621  002F00  F000               	nop		;# 
  7622  002F02  2FF5               	decfsz	245,f,b	;# 
  7623  002F04  D7FD               	bra	loop	;# 
  7624  002F06  2A6E               	incf	delayms@i,f,c
  7625  002F08                     l4177:
  7626  002F08  500F               	movf	delayms@cnt,w,c
  7627  002F0A  5C6E               	subwf	delayms@i,w,c
  7628  002F0C  B0D8               	btfsc	status,0,c
  7629                           
  7630                           ;HW8.c: 193: }
  7631                           ;HW8.c: 194: return;
  7632  002F0E  0012               	return	
  7633  002F10  D7F3               	goto	l4173
  7634  002F12                     __end_of_delayms:
  7635                           	opt stack 0
  7636                           tblptru	equ	0xFF8
  7637                           tblptrh	equ	0xFF7
  7638                           tblptrl	equ	0xFF6
  7639                           tablat	equ	0xFF5
  7640                           prodh	equ	0xFF4
  7641                           prodl	equ	0xFF3
  7642                           intcon	equ	0xFF2
  7643                           indf0	equ	0xFEF
  7644                           fsr0h	equ	0xFEA
  7645                           fsr0l	equ	0xFE9
  7646                           wreg	equ	0xFE8
  7647                           indf2	equ	0xFDF
  7648                           postinc2	equ	0xFDE
  7649                           postdec2	equ	0xFDD
  7650                           fsr2h	equ	0xFDA
  7651                           fsr2l	equ	0xFD9
  7652                           status	equ	0xFD8
  7653                           
  7654 ;; *************** function _init_ADCM *****************
  7655 ;; Defined at:
  7656 ;;		line 92 in file "HW8.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;		None
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;		None
  7661 ;; Return value:  Size  Location     Type
  7662 ;;		None               void
  7663 ;; Registers used:
  7664 ;;		wreg, status,2
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7670 ;;      Params:         0       0       0       0       0       0       0
  7671 ;;      Locals:         0       0       0       0       0       0       0
  7672 ;;      Temps:          0       0       0       0       0       0       0
  7673 ;;      Totals:         0       0       0       0       0       0       0
  7674 ;;Total ram usage:        0 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    1
  7677 ;; This function calls:
  7678 ;;		Nothing
  7679 ;; This function is called by:
  7680 ;;		_main
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           	psect	text31
  7685  002F12                     __ptext31:
  7686                           	opt stack 0
  7687  002F12                     _init_ADCM:
  7688                           	opt stack 28
  7689                           
  7690                           ;HW8.c: 94: ADCON0bits.CHS3 = 0;
  7691                           
  7692                           ;incstack = 0
  7693                           ;incstack = 0
  7694  002F12  9AC2               	bcf	4034,5,c	;volatile
  7695                           
  7696                           ;HW8.c: 95: ADCON0bits.CHS2 = 0;
  7697  002F14  98C2               	bcf	4034,4,c	;volatile
  7698                           
  7699                           ;HW8.c: 96: ADCON0bits.CHS1 = 0;
  7700  002F16  96C2               	bcf	4034,3,c	;volatile
  7701                           
  7702                           ;HW8.c: 97: ADCON0bits.CHS0 = 0;
  7703  002F18  94C2               	bcf	4034,2,c	;volatile
  7704                           
  7705                           ;HW8.c: 100: ADCON1 = 0X00;
  7706  002F1A  0E00               	movlw	0
  7707  002F1C  6EC1               	movwf	4033,c	;volatile
  7708                           
  7709                           ;HW8.c: 103: ADCON2bits.ADFM = 1;
  7710  002F1E  8EC0               	bsf	4032,7,c	;volatile
  7711                           
  7712                           ;HW8.c: 106: ADCON2bits.ACQT2 = 0;
  7713  002F20  9AC0               	bcf	4032,5,c	;volatile
  7714                           
  7715                           ;HW8.c: 107: ADCON2bits.ACQT1 = 1;
  7716  002F22  88C0               	bsf	4032,4,c	;volatile
  7717                           
  7718                           ;HW8.c: 108: ADCON2bits.ACQT0 = 0;
  7719  002F24  96C0               	bcf	4032,3,c	;volatile
  7720                           
  7721                           ;HW8.c: 111: ADCON2bits.ADCS2 = 1;
  7722  002F26  84C0               	bsf	4032,2,c	;volatile
  7723                           
  7724                           ;HW8.c: 112: ADCON2bits.ADCS1 = 0;
  7725  002F28  92C0               	bcf	4032,1,c	;volatile
  7726                           
  7727                           ;HW8.c: 113: ADCON2bits.ADCS0 = 0;
  7728  002F2A  90C0               	bcf	4032,0,c	;volatile
  7729                           
  7730                           ;HW8.c: 116: ADCON0bits.ADON = 1;
  7731  002F2C  80C2               	bsf	4034,0,c	;volatile
  7732  002F2E  0012               	return	
  7733  002F30                     __end_of_init_ADCM:
  7734                           	opt stack 0
  7735                           tblptru	equ	0xFF8
  7736                           tblptrh	equ	0xFF7
  7737                           tblptrl	equ	0xFF6
  7738                           tablat	equ	0xFF5
  7739                           prodh	equ	0xFF4
  7740                           prodl	equ	0xFF3
  7741                           intcon	equ	0xFF2
  7742                           indf0	equ	0xFEF
  7743                           fsr0h	equ	0xFEA
  7744                           fsr0l	equ	0xFE9
  7745                           wreg	equ	0xFE8
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           fsr2h	equ	0xFDA
  7750                           fsr2l	equ	0xFD9
  7751                           status	equ	0xFD8
  7752                           
  7753 ;; *************** function ___ftmul *****************
  7754 ;; Defined at:
  7755 ;;		line 52 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ftmul.c"
  7756 ;; Parameters:    Size  Location     Type
  7757 ;;  f1              3   36[COMRAM] float 
  7758 ;;  f2              3   39[COMRAM] float 
  7759 ;; Auto vars:     Size  Location     Type
  7760 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  7761 ;;  sign            1   52[COMRAM] unsigned char 
  7762 ;;  cntr            1   51[COMRAM] unsigned char 
  7763 ;;  exp             1   47[COMRAM] unsigned char 
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  3   36[COMRAM] float 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0, cstack
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7773 ;;      Params:         6       0       0       0       0       0       0
  7774 ;;      Locals:         6       0       0       0       0       0       0
  7775 ;;      Temps:          5       0       0       0       0       0       0
  7776 ;;      Totals:        17       0       0       0       0       0       0
  7777 ;;Total ram usage:       17 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    2
  7780 ;; This function calls:
  7781 ;;		___ftpack
  7782 ;; This function is called by:
  7783 ;;		_main
  7784 ;;		_fround
  7785 ;;		_scale
  7786 ;;		_sprintf
  7787 ;;		___asftmul
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           	psect	text32
  7792  002236                     __ptext32:
  7793                           	opt stack 0
  7794  002236                     ___ftmul:
  7795                           	opt stack 27
  7796                           
  7797                           ;incstack = 0
  7798                           ;incstack = 0
  7799  002236  0E0F               	movlw	15
  7800  002238  6E2B               	movwf	??___ftmul& (0+255),c
  7801  00223A  C025  F02C         	movff	___ftmul@f1,??___ftmul+1
  7802  00223E  C026  F02D         	movff	___ftmul@f1+1,??___ftmul+2
  7803  002242  C027  F02E         	movff	___ftmul@f1+2,??___ftmul+3
  7804  002246  282B               	incf	??___ftmul,w,c
  7805  002248  6E2F               	movwf	(??___ftmul+4)& (0+255),c
  7806  00224A  D004               	goto	u2970
  7807  00224C                     u2975:
  7808  00224C  90D8               	bcf	status,0,c
  7809  00224E  322E               	rrcf	??___ftmul+3,f,c
  7810  002250  322D               	rrcf	??___ftmul+2,f,c
  7811  002252  322C               	rrcf	??___ftmul+1,f,c
  7812  002254                     u2970:
  7813  002254  2E2F               	decfsz	(??___ftmul+4)& (0+255),f,c
  7814  002256  D7FA               	goto	u2975
  7815  002258  502C               	movf	??___ftmul+1,w,c
  7816  00225A  6E30               	movwf	___ftmul@exp,c
  7817  00225C  6630               	tstfsz	___ftmul@exp& (0+255),c
  7818  00225E  D001               	goto	l4545
  7819  002260  D015               	goto	u3000
  7820  002262                     l4545:
  7821  002262  0E0F               	movlw	15
  7822  002264  6E2B               	movwf	??___ftmul& (0+255),c
  7823  002266  C028  F02C         	movff	___ftmul@f2,??___ftmul+1
  7824  00226A  C029  F02D         	movff	___ftmul@f2+1,??___ftmul+2
  7825  00226E  C02A  F02E         	movff	___ftmul@f2+2,??___ftmul+3
  7826  002272  282B               	incf	??___ftmul,w,c
  7827  002274  6E2F               	movwf	(??___ftmul+4)& (0+255),c
  7828  002276  D004               	goto	u2990
  7829  002278                     u2995:
  7830  002278  90D8               	bcf	status,0,c
  7831  00227A  322E               	rrcf	??___ftmul+3,f,c
  7832  00227C  322D               	rrcf	??___ftmul+2,f,c
  7833  00227E  322C               	rrcf	??___ftmul+1,f,c
  7834  002280                     u2990:
  7835  002280  2E2F               	decfsz	(??___ftmul+4)& (0+255),f,c
  7836  002282  D7FA               	goto	u2995
  7837  002284  502C               	movf	??___ftmul+1,w,c
  7838  002286  6E35               	movwf	___ftmul@sign,c
  7839  002288  6635               	tstfsz	___ftmul@sign& (0+255),c
  7840  00228A  D007               	goto	l4551
  7841  00228C                     u3000:
  7842  00228C  0E00               	movlw	0
  7843  00228E  6E25               	movwf	?___ftmul,c
  7844  002290  0E00               	movlw	0
  7845  002292  6E26               	movwf	?___ftmul+1,c
  7846  002294  0E00               	movlw	0
  7847  002296  6E27               	movwf	?___ftmul+2,c
  7848  002298  D055               	goto	l638
  7849  00229A                     l4551:
  7850  00229A  5035               	movf	___ftmul@sign,w,c
  7851  00229C  0F7B               	addlw	123
  7852  00229E  2630               	addwf	___ftmul@exp,f,c
  7853  0022A0  C027  F035         	movff	___ftmul@f1+2,___ftmul@sign
  7854  0022A4  502A               	movf	(___ftmul@f2+2)& (0+255),w,c
  7855  0022A6  1A35               	xorwf	___ftmul@sign,f,c
  7856  0022A8  0E80               	movlw	128
  7857  0022AA  1635               	andwf	___ftmul@sign,f,c
  7858  0022AC  8E26               	bsf	___ftmul@f1+1,7,c
  7859  0022AE  8E29               	bsf	___ftmul@f2+1,7,c
  7860  0022B0  0EFF               	movlw	255
  7861  0022B2  1628               	andwf	___ftmul@f2,f,c
  7862  0022B4  0EFF               	movlw	255
  7863  0022B6  1629               	andwf	___ftmul@f2+1,f,c
  7864  0022B8  0E00               	movlw	0
  7865  0022BA  162A               	andwf	___ftmul@f2+2,f,c
  7866  0022BC  0E00               	movlw	0
  7867  0022BE  6E31               	movwf	___ftmul@f3_as_product,c
  7868  0022C0  0E00               	movlw	0
  7869  0022C2  6E32               	movwf	___ftmul@f3_as_product+1,c
  7870  0022C4  0E00               	movlw	0
  7871  0022C6  6E33               	movwf	___ftmul@f3_as_product+2,c
  7872  0022C8  6E2B               	movwf	??___ftmul& (0+255),c
  7873  0022CA  0E07               	movlw	7
  7874  0022CC  6E34               	movwf	___ftmul@cntr,c
  7875  0022CE  502B               	movf	??___ftmul& (0+255),w,c
  7876  0022D0                     l4565:
  7877  0022D0  A025               	btfss	___ftmul@f1,0,c
  7878  0022D2  D006               	goto	l4569
  7879  0022D4  5028               	movf	___ftmul@f2,w,c
  7880  0022D6  2631               	addwf	___ftmul@f3_as_product,f,c
  7881  0022D8  5029               	movf	___ftmul@f2+1,w,c
  7882  0022DA  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  7883  0022DC  502A               	movf	___ftmul@f2+2,w,c
  7884  0022DE  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  7885  0022E0                     l4569:
  7886  0022E0  90D8               	bcf	status,0,c
  7887  0022E2  3227               	rrcf	___ftmul@f1+2,f,c
  7888  0022E4  3226               	rrcf	___ftmul@f1+1,f,c
  7889  0022E6  3225               	rrcf	___ftmul@f1,f,c
  7890  0022E8  90D8               	bcf	status,0,c
  7891  0022EA  3628               	rlcf	___ftmul@f2,f,c
  7892  0022EC  3629               	rlcf	___ftmul@f2+1,f,c
  7893  0022EE  362A               	rlcf	___ftmul@f2+2,f,c
  7894  0022F0  2E34               	decfsz	___ftmul@cntr,f,c
  7895  0022F2  D7EE               	goto	l4565
  7896  0022F4  6E2B               	movwf	??___ftmul& (0+255),c
  7897  0022F6  0E09               	movlw	9
  7898  0022F8  6E34               	movwf	___ftmul@cntr,c
  7899  0022FA  502B               	movf	??___ftmul& (0+255),w,c
  7900  0022FC                     l4575:
  7901  0022FC  A025               	btfss	___ftmul@f1,0,c
  7902  0022FE  D006               	goto	l4579
  7903  002300  5028               	movf	___ftmul@f2,w,c
  7904  002302  2631               	addwf	___ftmul@f3_as_product,f,c
  7905  002304  5029               	movf	___ftmul@f2+1,w,c
  7906  002306  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  7907  002308  502A               	movf	___ftmul@f2+2,w,c
  7908  00230A  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  7909  00230C                     l4579:
  7910  00230C  90D8               	bcf	status,0,c
  7911  00230E  3227               	rrcf	___ftmul@f1+2,f,c
  7912  002310  3226               	rrcf	___ftmul@f1+1,f,c
  7913  002312  3225               	rrcf	___ftmul@f1,f,c
  7914  002314  90D8               	bcf	status,0,c
  7915  002316  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  7916  002318  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  7917  00231A  3231               	rrcf	___ftmul@f3_as_product,f,c
  7918  00231C  2E34               	decfsz	___ftmul@cntr,f,c
  7919  00231E  D7EE               	goto	l4575
  7920  002320  C031  F00F         	movff	___ftmul@f3_as_product,?___ftpack
  7921  002324  C032  F010         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  7922  002328  C033  F011         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  7923  00232C  C030  F012         	movff	___ftmul@exp,?___ftpack+3
  7924  002330  C035  F013         	movff	___ftmul@sign,?___ftpack+4
  7925  002334  ECF6  F013         	call	___ftpack	;wreg free
  7926  002338  C011  F027         	movff	?___ftpack+2,?___ftmul+2
  7927  00233C  C010  F026         	movff	?___ftpack+1,?___ftmul+1
  7928  002340  C00F  F025         	movff	?___ftpack,?___ftmul
  7929  002344                     l638:
  7930  002344  0012               	return	
  7931  002346                     __end_of___ftmul:
  7932                           	opt stack 0
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           indf0	equ	0xFEF
  7941                           fsr0h	equ	0xFEA
  7942                           fsr0l	equ	0xFE9
  7943                           wreg	equ	0xFE8
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           fsr2h	equ	0xFDA
  7948                           fsr2l	equ	0xFD9
  7949                           status	equ	0xFD8
  7950                           
  7951 ;; *************** function ___ftpack *****************
  7952 ;; Defined at:
  7953 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\float.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;  arg             3   14[COMRAM] unsigned um
  7956 ;;  exp             1   17[COMRAM] unsigned char 
  7957 ;;  sign            1   18[COMRAM] unsigned char 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  3   14[COMRAM] float 
  7962 ;; Registers used:
  7963 ;;		wreg, status,2, status,0
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7969 ;;      Params:         5       0       0       0       0       0       0
  7970 ;;      Locals:         0       0       0       0       0       0       0
  7971 ;;      Temps:          3       0       0       0       0       0       0
  7972 ;;      Totals:         8       0       0       0       0       0       0
  7973 ;;Total ram usage:        8 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    1
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		___ftadd
  7980 ;;		___ftdiv
  7981 ;;		___ftmul
  7982 ;;		___lltoft
  7983 ;;		___lwtoft
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           	psect	text33
  7988  0027EC                     __ptext33:
  7989                           	opt stack 0
  7990  0027EC                     ___ftpack:
  7991                           	opt stack 27
  7992                           
  7993                           ;incstack = 0
  7994                           ;incstack = 0
  7995  0027EC  5012               	movf	___ftpack@exp,w,c
  7996  0027EE  B4D8               	btfsc	status,2,c
  7997  0027F0  D005               	goto	l4383
  7998  0027F2  500F               	movf	___ftpack@arg,w,c
  7999  0027F4  1010               	iorwf	___ftpack@arg+1,w,c
  8000  0027F6  1011               	iorwf	___ftpack@arg+2,w,c
  8001  0027F8  A4D8               	btfss	status,2,c
  8002  0027FA  D00C               	goto	l4389
  8003  0027FC                     l4383:
  8004  0027FC  0E00               	movlw	0
  8005  0027FE  6E0F               	movwf	?___ftpack,c
  8006  002800  0E00               	movlw	0
  8007  002802  6E10               	movwf	?___ftpack+1,c
  8008  002804  0E00               	movlw	0
  8009  002806  6E11               	movwf	?___ftpack+2,c
  8010  002808  D04C               	goto	l537
  8011  00280A                     l4387:
  8012  00280A  2A12               	incf	___ftpack@exp,f,c
  8013  00280C  90D8               	bcf	status,0,c
  8014  00280E  3211               	rrcf	___ftpack@arg+2,f,c
  8015  002810  3210               	rrcf	___ftpack@arg+1,f,c
  8016  002812  320F               	rrcf	___ftpack@arg,f,c
  8017  002814                     l4389:
  8018  002814  0E00               	movlw	0
  8019  002816  140F               	andwf	___ftpack@arg,w,c
  8020  002818  6E14               	movwf	??___ftpack& (0+255),c
  8021  00281A  0E00               	movlw	0
  8022  00281C  1410               	andwf	___ftpack@arg+1,w,c
  8023  00281E  6E15               	movwf	(??___ftpack+1)& (0+255),c
  8024  002820  0EFE               	movlw	254
  8025  002822  1411               	andwf	___ftpack@arg+2,w,c
  8026  002824  6E16               	movwf	(??___ftpack+2)& (0+255),c
  8027  002826  5014               	movf	??___ftpack,w,c
  8028  002828  1015               	iorwf	??___ftpack+1,w,c
  8029  00282A  1016               	iorwf	??___ftpack+2,w,c
  8030  00282C  B4D8               	btfsc	status,2,c
  8031  00282E  D00C               	goto	l4395
  8032  002830  D7EC               	goto	l4387
  8033  002832                     l4391:
  8034  002832  2A12               	incf	___ftpack@exp,f,c
  8035  002834  0E01               	movlw	1
  8036  002836  260F               	addwf	___ftpack@arg,f,c
  8037  002838  0E00               	movlw	0
  8038  00283A  2210               	addwfc	___ftpack@arg+1,f,c
  8039  00283C  0E00               	movlw	0
  8040  00283E  2211               	addwfc	___ftpack@arg+2,f,c
  8041  002840  90D8               	bcf	status,0,c
  8042  002842  3211               	rrcf	___ftpack@arg+2,f,c
  8043  002844  3210               	rrcf	___ftpack@arg+1,f,c
  8044  002846  320F               	rrcf	___ftpack@arg,f,c
  8045  002848                     l4395:
  8046  002848  0E00               	movlw	0
  8047  00284A  140F               	andwf	___ftpack@arg,w,c
  8048  00284C  6E14               	movwf	??___ftpack& (0+255),c
  8049  00284E  0E00               	movlw	0
  8050  002850  1410               	andwf	___ftpack@arg+1,w,c
  8051  002852  6E15               	movwf	(??___ftpack+1)& (0+255),c
  8052  002854  0EFF               	movlw	255
  8053  002856  1411               	andwf	___ftpack@arg+2,w,c
  8054  002858  6E16               	movwf	(??___ftpack+2)& (0+255),c
  8055  00285A  5014               	movf	??___ftpack,w,c
  8056  00285C  1015               	iorwf	??___ftpack+1,w,c
  8057  00285E  1016               	iorwf	??___ftpack+2,w,c
  8058  002860  B4D8               	btfsc	status,2,c
  8059  002862  D006               	goto	l4399
  8060  002864  D7E6               	goto	l4391
  8061  002866                     l4397:
  8062  002866  0612               	decf	___ftpack@exp,f,c
  8063  002868  90D8               	bcf	status,0,c
  8064  00286A  360F               	rlcf	___ftpack@arg,f,c
  8065  00286C  3610               	rlcf	___ftpack@arg+1,f,c
  8066  00286E  3611               	rlcf	___ftpack@arg+2,f,c
  8067  002870                     l4399:
  8068  002870  AE10               	btfss	___ftpack@arg+1,7,c
  8069  002872  D7F9               	goto	l4397
  8070  002874  A012               	btfss	___ftpack@exp,0,c
  8071  002876  9E10               	bcf	___ftpack@arg+1,7,c
  8072  002878  90D8               	bcf	status,0,c
  8073  00287A  3212               	rrcf	___ftpack@exp,f,c
  8074  00287C  5012               	movf	___ftpack@exp,w,c
  8075  00287E  6E16               	movwf	(??___ftpack+2)& (0+255),c
  8076  002880  6A15               	clrf	(??___ftpack+1)& (0+255),c
  8077  002882  6A14               	clrf	??___ftpack& (0+255),c
  8078  002884  5014               	movf	??___ftpack,w,c
  8079  002886  120F               	iorwf	___ftpack@arg,f,c
  8080  002888  5015               	movf	??___ftpack+1,w,c
  8081  00288A  1210               	iorwf	___ftpack@arg+1,f,c
  8082  00288C  5016               	movf	??___ftpack+2,w,c
  8083  00288E  1211               	iorwf	___ftpack@arg+2,f,c
  8084  002890  5013               	movf	___ftpack@sign,w,c
  8085  002892  A4D8               	btfss	status,2,c
  8086  002894  8E11               	bsf	___ftpack@arg+2,7,c
  8087  002896  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  8088  00289A  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  8089  00289E  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  8090  0028A2                     l537:
  8091  0028A2  0012               	return	
  8092  0028A4                     __end_of___ftpack:
  8093                           	opt stack 0
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           intcon	equ	0xFF2
  8101                           indf0	equ	0xFEF
  8102                           fsr0h	equ	0xFEA
  8103                           fsr0l	equ	0xFE9
  8104                           wreg	equ	0xFE8
  8105                           indf2	equ	0xFDF
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _RA0_isr *****************
  8113 ;; Defined at:
  8114 ;;		line 37 in file "HW8.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;		None               void
  8121 ;; Registers used:
  8122 ;;		wreg, status,2
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8128 ;;      Params:         0       0       0       0       0       0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0
  8130 ;;      Temps:         14       0       0       0       0       0       0
  8131 ;;      Totals:        14       0       0       0       0       0       0
  8132 ;;Total ram usage:       14 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; This function calls:
  8135 ;;		Nothing
  8136 ;; This function is called by:
  8137 ;;		Interrupt level 2
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           	psect	intcode
  8142  000008                     __pintcode:
  8143                           	opt stack 0
  8144  000008                     _RA0_isr:
  8145                           	opt stack 24
  8146                           
  8147                           ;incstack = 0
  8148  000008  CFFA F001          	movff	pclath,??_RA0_isr
  8149  00000C  CFFB F002          	movff	pclatu,??_RA0_isr+1
  8150  000010  ED31  F015         	call	int_func,f	;refresh shadow registers
  8151                           pclatu	equ	0xFFB
  8152                           pclath	equ	0xFFA
  8153                           tblptru	equ	0xFF8
  8154                           tblptrh	equ	0xFF7
  8155                           tblptrl	equ	0xFF6
  8156                           tablat	equ	0xFF5
  8157                           prodh	equ	0xFF4
  8158                           prodl	equ	0xFF3
  8159                           intcon	equ	0xFF2
  8160                           indf0	equ	0xFEF
  8161                           fsr0h	equ	0xFEA
  8162                           fsr0l	equ	0xFE9
  8163                           wreg	equ	0xFE8
  8164                           indf2	equ	0xFDF
  8165                           postinc2	equ	0xFDE
  8166                           postdec2	equ	0xFDD
  8167                           fsr2h	equ	0xFDA
  8168                           fsr2l	equ	0xFD9
  8169                           status	equ	0xFD8
  8170                           
  8171                           	psect	intcode_body
  8172  002A62                     __pintcode_body:
  8173                           	opt stack 24
  8174  002A62                     int_func:
  8175                           	opt stack 24
  8176  002A62  0006               	pop		; remove dummy address from shadow register refresh
  8177  002A64  CFE9 F003          	movff	fsr0l,??_RA0_isr+2
  8178  002A68  CFEA F004          	movff	fsr0h,??_RA0_isr+3
  8179  002A6C  CFE1 F005          	movff	fsr1l,??_RA0_isr+4
  8180  002A70  CFE2 F006          	movff	fsr1h,??_RA0_isr+5
  8181  002A74  CFD9 F007          	movff	fsr2l,??_RA0_isr+6
  8182  002A78  CFDA F008          	movff	fsr2h,??_RA0_isr+7
  8183  002A7C  CFF3 F009          	movff	prodl,??_RA0_isr+8
  8184  002A80  CFF4 F00A          	movff	prodh,??_RA0_isr+9
  8185  002A84  CFF6 F00B          	movff	tblptrl,??_RA0_isr+10
  8186  002A88  CFF7 F00C          	movff	tblptrh,??_RA0_isr+11
  8187  002A8C  CFF8 F00D          	movff	tblptru,??_RA0_isr+12
  8188  002A90  CFF5 F00E          	movff	tablat,??_RA0_isr+13
  8189  002A94                     
  8190                           ;HW8.c: 38: if(ADIF)
  8191  002A94  AC9E               	btfss	3998,6,c	;volatile
  8192  002A96  D001               	goto	i2u169_41
  8193  002A98  D001               	goto	i2u169_40
  8194  002A9A                     i2u169_41:
  8195  002A9A  D009               	goto	i2l46
  8196  002A9C                     i2u169_40:
  8197  002A9C                     
  8198                           ;HW8.c: 39: {
  8199                           ;HW8.c: 40: flag = 1;
  8200  002A9C  0E00               	movlw	0
  8201  002A9E  0100               	movlb	0	; () banked
  8202  002AA0  0100               	movlb	0	; () banked
  8203  002AA2  6FD4               	movwf	(_flag+1)& (0+255),b	;volatile
  8204  002AA4  0E01               	movlw	1
  8205  002AA6  0100               	movlb	0	; () banked
  8206  002AA8  6FD3               	movwf	_flag& (0+255),b	;volatile
  8207  002AAA                     
  8208                           ; BSR set to: 0
  8209                           ;HW8.c: 41: ADIF = 0;
  8210  002AAA  9C9E               	bcf	3998,6,c	;volatile
  8211  002AAC  D000               	goto	i2l46
  8212  002AAE                     i2l46:
  8213  002AAE  C00E  FFF5         	movff	??_RA0_isr+13,tablat
  8214  002AB2  C00D  FFF8         	movff	??_RA0_isr+12,tblptru
  8215  002AB6  C00C  FFF7         	movff	??_RA0_isr+11,tblptrh
  8216  002ABA  C00B  FFF6         	movff	??_RA0_isr+10,tblptrl
  8217  002ABE  C00A  FFF4         	movff	??_RA0_isr+9,prodh
  8218  002AC2  C009  FFF3         	movff	??_RA0_isr+8,prodl
  8219  002AC6  C008  FFDA         	movff	??_RA0_isr+7,fsr2h
  8220  002ACA  C007  FFD9         	movff	??_RA0_isr+6,fsr2l
  8221  002ACE  C006  FFE2         	movff	??_RA0_isr+5,fsr1h
  8222  002AD2  C005  FFE1         	movff	??_RA0_isr+4,fsr1l
  8223  002AD6  C004  FFEA         	movff	??_RA0_isr+3,fsr0h
  8224  002ADA  C003  FFE9         	movff	??_RA0_isr+2,fsr0l
  8225  002ADE  C002  FFFB         	movff	??_RA0_isr+1,pclatu
  8226  002AE2  C001  FFFA         	movff	??_RA0_isr,pclath
  8227  002AE6  0011               	retfie		f
  8228  002AE8                     __end_of_RA0_isr:
  8229                           	opt stack 0
  8230                           pclatu	equ	0xFFB
  8231                           pclath	equ	0xFFA
  8232                           tblptru	equ	0xFF8
  8233                           tblptrh	equ	0xFF7
  8234                           tblptrl	equ	0xFF6
  8235                           tablat	equ	0xFF5
  8236                           prodh	equ	0xFF4
  8237                           prodl	equ	0xFF3
  8238                           intcon	equ	0xFF2
  8239                           indf0	equ	0xFEF
  8240                           fsr0h	equ	0xFEA
  8241                           fsr0l	equ	0xFE9
  8242                           wreg	equ	0xFE8
  8243                           fsr1h	equ	0xFE2
  8244                           fsr1l	equ	0xFE1
  8245                           indf2	equ	0xFDF
  8246                           postinc2	equ	0xFDE
  8247                           postdec2	equ	0xFDD
  8248                           fsr2h	equ	0xFDA
  8249                           fsr2l	equ	0xFD9
  8250                           status	equ	0xFD8
  8251                           pclatu	equ	0xFFB
  8252                           pclath	equ	0xFFA
  8253                           tblptru	equ	0xFF8
  8254                           tblptrh	equ	0xFF7
  8255                           tblptrl	equ	0xFF6
  8256                           tablat	equ	0xFF5
  8257                           prodh	equ	0xFF4
  8258                           prodl	equ	0xFF3
  8259                           intcon	equ	0xFF2
  8260                           indf0	equ	0xFEF
  8261                           fsr0h	equ	0xFEA
  8262                           fsr0l	equ	0xFE9
  8263                           wreg	equ	0xFE8
  8264                           fsr1h	equ	0xFE2
  8265                           fsr1l	equ	0xFE1
  8266                           indf2	equ	0xFDF
  8267                           postinc2	equ	0xFDE
  8268                           postdec2	equ	0xFDD
  8269                           fsr2h	equ	0xFDA
  8270                           fsr2l	equ	0xFD9
  8271                           status	equ	0xFD8
  8272                           
  8273                           	psect	rparam
  8274  0000                     pclatu	equ	0xFFB
  8275                           pclath	equ	0xFFA
  8276                           tblptru	equ	0xFF8
  8277                           tblptrh	equ	0xFF7
  8278                           tblptrl	equ	0xFF6
  8279                           tablat	equ	0xFF5
  8280                           prodh	equ	0xFF4
  8281                           prodl	equ	0xFF3
  8282                           intcon	equ	0xFF2
  8283                           indf0	equ	0xFEF
  8284                           fsr0h	equ	0xFEA
  8285                           fsr0l	equ	0xFE9
  8286                           wreg	equ	0xFE8
  8287                           fsr1h	equ	0xFE2
  8288                           fsr1l	equ	0xFE1
  8289                           indf2	equ	0xFDF
  8290                           postinc2	equ	0xFDE
  8291                           postdec2	equ	0xFDD
  8292                           fsr2h	equ	0xFDA
  8293                           fsr2l	equ	0xFD9
  8294                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    118
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    109     112
    BANK0           128     83      85
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?___ftsub	float  size(2) Largest target is 0

    ?___ftpack	float  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(2) Largest target is 0

    ?___asftsub	float  size(2) Largest target is 0

    ?__tdiv_to_l_	unsigned long  size(2) Largest target is 0

    ?__div_to_l_	unsigned long  size(2) Largest target is 0

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___asftadd	float  size(2) Largest target is 0

    ?___ftadd	float  size(2) Largest target is 0

    ?___lltoft	float  size(2) Largest target is 0

    ?___fttol	long  size(2) Largest target is 0

    ?___asftdiv	float  size(2) Largest target is 0

    ?___asftmul	float  size(2) Largest target is 0

    ?___ftneg	float  size(2) Largest target is 0

    ?_scale	float  size(2) Largest target is 0

    ?_fround	float  size(2) Largest target is 0

    ?___awdiv	int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___awmod	int  size(2) Largest target is 0

    ?___ftdiv	float  size(2) Largest target is 0

    ?___ftmul	float  size(2) Largest target is 0

    ?___lwtoft	float  size(2) Largest target is 0

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@temp(BANK0[3]), sprintf@integ(BANK0[3]), sprintf@fval(BANK0[3]), 

    __asftdiv@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_2(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 16
		 -> main@buffer(BANK0[16]), 

    ?_sprintf	int  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S514$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    load_string@ptr	PTR const unsigned char  size(2) Largest target is 16
		 -> main@buffer(BANK0[16]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    ___lwtoft->___ftpack
    _sprintf->___ftge
    ___lltoft->___fttol
    ___fttol->_scale
    ___ftneg->___lltoft
    ___ftge->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___asftmul->___ftadd
    ___asftdiv->___ftdiv
    ___ftdiv->___ftmul
    ___asftadd->___ftadd
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    _load_string->_send_data
    _init_LCD->_send_data
    _send_data->_epulse
    _epulse->_delayus
    ___ftmul->___wmul

Critical Paths under _RA0_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___asftsub
    ___asftsub->___ftsub

Critical Paths under _RA0_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _RA0_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _RA0_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _RA0_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _RA0_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _RA0_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   18980
                                             58 BANK0     25    25      0
                          _init_ADCM
                           _init_LCD
                        _load_string
                          _send_data
                            _sprintf
                            _delayms
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             5     2      3     231
                                             22 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             53    46      7   16507
                                             11 BANK0     47    40      7
                             _fround
                              _scale
                            _isdigit
                        __tdiv_to_l_
                         __div_to_l_
                          ___asftadd
                            ___ftadd
                          ___asftdiv
                          ___asftmul
                            ___ftmul
                          ___asftsub
                            ___awdiv
                            ___awmod
                             ___ftge
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     159
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4     278
                                             80 COMRAM     9     5      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     159
                                             14 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     162
                                             14 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     252
                                             65 COMRAM    15    11      4
                              _scale (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      45
                                             89 COMRAM     3     0      3
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     198
                                            106 COMRAM     3     3      0
                                              0 BANK0      6     0      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftsub                                            5     0      5    1207
                                              6 BANK0      5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    1114
                                              0 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             14     8      6    1049
                                             92 COMRAM    14     8      6
                           ___ftpack
                            ___ftneg (ARG)
                            ___fttol (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftmul                                            5     0      5     628
                                              0 BANK0      5     0      5
                            ___ftadd (ARG)
                            ___ftmul
                            ___ftneg (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftdiv                                            5     0      5     555
                                             70 COMRAM     5     0      5
                              _scale (ARG)
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             17    11      6     489
                                             53 COMRAM    17    11      6
                           ___ftpack
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftadd                                            5     0      5    1142
                                              0 BANK0      5     0      5
                             _fround (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          13     7      6     446
                                             14 COMRAM    13     7      6
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17    11      6     303
                                             14 COMRAM    17    11      6
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     2      1      68
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (2) _scale                                               15    12      3    1779
                                             53 COMRAM    12     9      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _fround                                              18    15      3    1581
                                             53 COMRAM    15    12      3
                            ___ftmul
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             30 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     296
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     300
                                             21 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _load_string                                          5     3      2     337
                                             25 COMRAM     5     3      2
                          _send_data
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             4     4      0     314
                                             25 COMRAM     4     4      0
                          _send_data
                            _delayms
 ---------------------------------------------------------------------------------
 (1) _send_data                                            8     4      4     292
                                             17 COMRAM     8     4      4
                            _delayms
                             _epulse
                            _delayus
 ---------------------------------------------------------------------------------
 (2) _epulse                                               1     1      0      22
                                             16 COMRAM     1     1      0
                            _delayus
 ---------------------------------------------------------------------------------
 (2) _delayus                                              2     1      1      22
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _delayms                                              2     1      1      22
                                             14 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _init_ADCM                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             17    11      6     535
                                             36 COMRAM    17    11      6
                           ___ftpack
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5     209
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5     209
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _RA0_isr                                             14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_ADCM
   _init_LCD
     _send_data
       _delayms
       _epulse
         _delayus
       _delayus
     _delayms
   _load_string
     _send_data
       _delayms
       _epulse
         _delayus
       _delayus
   _send_data
     _delayms
     _epulse
       _delayus
     _delayus
   _sprintf
     _fround
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale
       ___ftmul
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     __tdiv_to_l_
     __div_to_l_
     ___asftadd
       _fround (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     ___ftadd
       ___ftpack
       ___ftneg (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___fttol (ARG)
         _scale (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___asftdiv
       _scale (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
     ___asftmul
       ___ftadd (ARG)
         ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___ftmul
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___asftsub
       ___ftsub
         ___ftadd
           ___ftpack
           ___ftneg (ARG)
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 _scale (ARG)
                   ___ftmul
                     ___ftpack
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                   ___awdiv
                     ___awmod (ARG)
                   ___awmod
                   ___wmul
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___ftmul (ARG)
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___awdiv
       ___awmod (ARG)
     ___awmod
     ___ftge
       ___ftadd (ARG)
         ___ftpack
         ___ftneg (ARG)
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
             ___fttol (ARG)
               _scale (ARG)
                 ___ftmul
                   ___ftpack
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___ftneg (ARG)
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
           ___fttol (ARG)
             _scale (ARG)
               ___ftmul
                 ___ftpack
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       ___fttol (ARG)
         _scale (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___ftneg
       ___fttol (ARG)
         _scale (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
         ___fttol (ARG)
           _scale (ARG)
             ___ftmul
               ___ftpack
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
     ___fttol
       _scale (ARG)
         ___ftmul
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
       ___fttol (ARG)
         _scale (ARG)
           ___ftmul
             ___ftpack
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___lwmod
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _delayms
   ___ftdiv
     ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack

 _RA0_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK5            EF      0       0      15        0.0%
BANK5               EF      0       0      13        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80     53      55       4       66.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6D      70       1       88.2%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       5       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5      14        0.0%
DATA                 0      0      CA      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Nov 28 23:21:34 2013

           ___asftadd@f2 0082            ___asftadd@f1p 0080             ___asftdiv@f2 0049  
                     l70 294A                       l67 2914                       l68 2916  
           ___awdiv@sign 001C      ___wmul@multiplicand 0021             ___asftmul@f2 0082  
           ___asftsub@f2 0088            ___asftdiv@f1p 0047             ___ftadd@exp1 006A  
           ___ftadd@exp2 0069             ___ftadd@sign 0068                      l211 1488  
                    l124 1B68                      l160 0A5C                      l170 0D98  
                    l154 09D4                      l155 09D8                      l156 0F4C  
                    l505 2526                      l614 2234                      l606 2442  
                    l702 2A50                      l623 2224                      l608 23EC  
                    l632 270A                      l712 2BBC                      l537 28A2  
                    l617 21D2                      l609 2412                      l638 2344  
                    l574 1E52                      l575 1FB4                      l496 2536  
                    l648 2EBC                      l498 24A2                      l578 1E7C  
                    l658 27EA                      l589 1F20                      l781 2CD2  
                    l598 1F3C             ___awmod@sign 0015                      loop 2F00  
                    wreg 000FE8            ___asftmul@f1p 0080              _sprintf$526 009B  
          ___asftsub@f1p 0086             __CFG_LVP$OFF 000000             ___ftdiv@cntr 0041  
        __end_of_RA0_isr 2AE8             ___ftdiv@sign 0046             __CFG_WDT$OFF 000000  
                   l4211 1D9E                     l4203 1CC6                     l5021 0906  
                   l5005 0842                     l5111 0EAA                     l5103 0E7C  
                   l4233 1920                     l4321 2220                     l4313 21FC  
                   l5201 12B2                     l5105 0E8C                     l5113 0EB6  
                   l5041 0A1A                     l5033 09AE                     l4251 1B3A  
                   l4227 1864                     l5051 0A60                     l4173 2EF8  
                   l4245 1A72                     l4237 192E                     l4309 21EC  
                   l5221 1374                     l5141 0F88                     l5125 0EEC  
                   l5029 097A                     l5301 16E8                     l4191 2F3C  
                   l4263 2EE6                     l4319 2214                     l4335 245C  
                   l4503 23AA                     l4431 1E8A                     l5207 1316  
                   l5071 0C60                     l5047 0A38                     l5303 170C  
                   l4177 2F08                     l3801 28F4                     l4273 2140  
                   l4329 2450                     l4425 1E60                     l5161 105E  
                   l5065 0BE8                     l3803 28FA                     l4611 2978  
                   l4355 24D2                     l5243 144E                     l5227 13A2  
                   l5235 1420                     l5059 0B4E                     l4189 2F3A  
                   l4621 299E                     l4605 2968                     l4293 21AA  
                   l4365 24EE                     l4453 1EDA                     l5333 26AC  
                   l5261 1516                     l5237 1430                     l5165 10F6  
                   l5157 1006                     l5173 1172                     l5077 0C96  
                   l4391 2832                     l4383 27FC                     l4551 229A  
                   l4279 216C                     l4375 2516                     l4455 1EE4  
                   l4447 1EBC                     l5271 15E4                     l4545 2262  
                   l4617 2992                     l4633 29C4                     l4377 2522  
                   l4369 24FE                     l4473 1F58                     l4465 1F10  
                   l4457 1EEC                     l5329 266A                     l4705 2738  
                   l4801 2CB4                     l5273 15F4                     l5257 14C4  
                   l5249 148C                     l5185 1208                     l5177 11B0  
                   l5169 1134                     l5097 0DD6                     l5281 1620  
                   l4395 2848                     l4387 280A                     l4619 299A  
                   l4483 1F90                     l4467 1F1A                     l4459 1EF2  
                   l5339 2708                     l4723 278C                     l5291 1672  
                   l4397 2866                     l4389 2814                     l4565 22D0  
                   l3773 2C72                     l4637 29D2                     l4629 29BA  
                   l4661 2B2E                     l4653 2B10                     l4741 27DA  
                   l4733 27B4                     l4805 2CC8                     l5189 123A  
                   l4399 2870                     l4575 22FC                     l4735 27C0  
                   l4727 279C                     l4751 2A02                     l5295 16B2  
                   l5287 1644                     l5279 1612                     l4569 22E0  
                   l3785 28BC                     l3769 2C34                     l4673 2B5A  
                   l4665 2B42                     l4657 2B22                     l4649 2B04  
                   l4497 2372                     l4737 27C4                     l4753 2A0E  
                   l4579 230C                     l4659 2B2A                     l4763 2A42  
                   l4755 2A12                     l4771 2B7A                     l4669 2B4C  
                   l4773 2B86                     l4775 2B8A                     _ADIF 007CF6  
                   l4785 2BD8                     l4937 1FD4                     l4779 2BAE  
                   l4787 2BE4                     l4797 2CA8                     l4973 0704  
                   l4965 06C2                     l4799 2CB0                     l4983 077A  
                   l4959 06A4                     l4977 0748                     l4995 07D8  
                   l4987 0782                     l4979 0764                     l4989 07B4  
                   STR_1 0676                     STR_2 0686                     u3000 228C  
                   u3210 2756                     u2500 215E                     u1710 2C50  
                   u3215 274E                     u1720 2C8E                     u3240 27A2  
                   u2505 2156                     u2620 2504                     u1717 2C4A  
                   u2550 2202                     u2710 1E08                     u3190 272A  
                   u1727 2C88                     u2480 2132                     u2720 1E2E  
                   u3450 0896                     u2715 1E00                     u3195 2722  
                   u3435 081A                     u2485 212A                     u2725 1E26  
                   u3455 088A                     u2920 2364                     u2940 2390  
                   u2925 235C                     u2950 239C                     u2945 2388  
                   u2970 2254                     u2990 2280                     u2975 224C  
                   u2995 2278                     i2l45 2AAE                     i2l46 2AAE  
                   _flag 00D3                     _main 1FB6             ___ftpack@arg 000F  
           ___ftpack@exp 0012                     fsr0h 000FEA                     fsr1h 000FE2  
                   indf0 000FEF                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 0014              main@voltage 00CE             _sprintf$1138 0098  
           ___ftmul@cntr 0034             ___ftmul@sign 0035             ___fttol@exp1 0050  
           ___fttol@lval 004C                    ?_main 0001          __end_of___awdiv 29DC  
        __end_of___ftadd 1FB6          __end_of___awmod 2B64          __end_of___ftdiv 2444  
        __end_of___ftneg 2ECA          __end_of___lldiv 2A62          __end_of___ftmul 2346  
        ___awdiv@divisor 0018          __end_of___llmod 2BCE          __end_of___ftsub 2D60  
        __end_of___fttol 27EC          __end_of___lwmod 2CDC          ___awdiv@counter 001B  
           ?_load_string 001A                    _PORTD 000F83                    _TRISD 000F95  
        __end_of_delayms 2F12          __end_of_delayus 2F46             ___lltoft@exp 0059  
        __end_of_dpowers 0628                    _scale 171A          __end_of_isdigit 2EEE  
          ___ftpack@sign 0013                    tablat 000FF5                    status 000FD8  
        __end_of_sprintf 171A          __initialization 2F46             __end_of_main 2114  
                 ??_main 00BA            ___fttol@sign1 004B            __activetblptr 000002  
   __size_of__tdiv_to_l_ 0122                ??_RA0_isr 0001                   _ADCON1 000FC1  
       ___llmod@dividend 000F                   ?_scale 0036                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0016         __end_of___ftpack 28A4  
       __end_of___lltoft 2C32                   i2l3691 2A9C                   i2l3693 2AAA  
                 i2l3689 2A94         __end_of___lwtoft 2E7A         __end_of__powers_ 0676  
                 ___ftge 2628                   ___wmul 2E14                ??___awdiv 001A  
              ??___ftadd 0063                ??___awmod 0013                ??___ftdiv 003C  
              ??___ftneg 005D                ??___lldiv 0017                ??___ftmul 002B  
              ??___llmod 0017                ??___ftsub 006B                ??___fttol 0046  
       __end_of_init_LCD 2628                ??___lwmod 0013                   _epulse 2E7A  
                 _fround 1B6A         ___awdiv@quotient 001D          ___awmod@divisor 0011  
              ??_delayms 0010                ??_delayus 0010          ___awmod@counter 0014  
  ___ftmul@f3_as_product 0031                ??_isdigit 0010             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0092       __size_of___asftadd 003C       __size_of___asftdiv 003C  
         main@adc_result 00D1       __size_of___asftmul 003C       __size_of___asftsub 0042  
             __accesstop 0080  __end_of__initialization 2F50          __CFG_PBADEN$OFF 000000  
             ___ftadd@f1 005D               ___ftadd@f2 0060               ___ftge@ff1 0080  
             ___ftge@ff2 0083               ___ftdiv@f1 0036               ___ftdiv@f2 0039  
             ___ftdiv@f3 0042               ___ftneg@f1 005A               ___ftmul@f1 0025  
             ___ftmul@f2 0028               ___ftsub@f1 0080               ___ftsub@f2 0083  
             ___fttol@f1 0042           __pcstackCOMRAM 0001               ___lltoft@c 0051  
          __end_of_scale 1B6A               ___lwtoft@c 0017               __div_to_l_ 2444  
   __size_of_load_string 0064          __div_to_l_@exp1 001B          __div_to_l_@cntr 001A  
           sprintf@integ 00A8                  ??_scale 0039          __div_to_l_@quot 0016  
             __pbssBANK0 00D3       __size_of_init_ADCM 001E               __pnvCOMRAM 0070  
          __div_to_l_@f1 000F            __div_to_l_@f2 0012                  ?___ftge 0080  
                ?___wmul 001F       __size_of_send_data 00A8        __end_of___asftadd 2E14  
                ?_epulse 0001        __end_of___asftdiv 2DD8                  ?_fround 0036  
      __end_of___asftmul 2D9C        __end_of___asftsub 2D1E                ?___ftpack 000F  
              ?___lltoft 0051                ?___lwtoft 0017                  _RA0_isr 0008  
              ?_init_LCD 0001        __end_of__npowers_ 064F                  __Hparam 0000  
             _scale$1137 003F                  __Lparam 0000          __size_of___ftge 00E4  
                ___awdiv 294C                  ___ftadd 1DEA                  ___awmod 2AE8  
                ___ftdiv 2346                  ___ftneg 2EA4                  ___lldiv 29DC  
        __size_of___wmul 003A                  ___ftmul 2236                  ___llmod 2B64  
                ___ftsub 2D1E                  ___fttol 270C                  ___lwmod 2C96  
           __psmallconst 0600                  __pcinit 2F46          __size_of_epulse 002A  
             ??___ftpack 0014          __size_of_fround 0280                  __ramtop 0600  
                _delayms 2EEE                  _delayus 2F30        __end_of_init_ADCM 2F30  
             ??___lltoft 0055                  __ptext0 1FB6                  __ptext1 2E4E  
                __ptext2 068E                  __ptext3 2C96                  __ptext4 2BCE  
                __ptext5 2B64                  __ptext6 29DC                  __ptext7 270C  
                __ptext8 2EA4                  __ptext9 2628               ??___lwtoft 001A  
            ?__div_to_l_ 000F                  _dpowers 0600                  _isdigit 2ECA  
       ___awmod@dividend 000F                  _sprintf 068E           __pintcode_body 2A62  
   end_of_initialization 2F50        __end_of_send_data 294C               delayms@cnt 000F  
             ??_init_LCD 001A               delayus@cnt 000F            __Lmediumconst 0000  
                int_func 2A62          ___lldiv@divisor 0013          ___lldiv@counter 001C  
                postdec2 000FDD                  postinc2 000FDE           __tdiv_to_l_@f1 000F  
         __tdiv_to_l_@f2 0012            send_data@data 0012            ??__tdiv_to_l_ 0015  
              _PORTDbits 000F83              ___ftdiv@exp 0045               main@buffer 00BE  
    __size_of__div_to_l_ 00F4              ___ftmul@exp 0030           __end_of___ftge 270C  
         __end_of___wmul 2E4E           __end_of_epulse 2EA4           __end_of_fround 1DEA  
    start_initialization 2F46      __end_of__tdiv_to_l_ 2236          ___llmod@divisor 0013  
       __CFG_OSC$INTIO67 000000          ___llmod@counter 0018                 ??___ftge 006B  
               ??___wmul 0023            sprintf@vd_528 00A3                 ??_epulse 0011  
               ??_fround 0039               fround@prec 0036            ??_load_string 001C  
      __size_of___ftpack 00B8                ___asftadd 2DD8                ___asftdiv 2D9C  
              ___asftmul 2D60                ___asftsub 2CDC        __size_of___lltoft 0064  
               ?_RA0_isr 0001              __pbssCOMRAM 006E        __size_of___lwtoft 002C  
          __pcstackBANK0 0080      __end_of__stringdata 068C              sprintf@_val 00AD  
            sprintf@flag 00AB              sprintf@fval 00B6              sprintf@prec 00B4  
            sprintf@temp 00A5        __size_of_init_LCD 00F0        send_data@chk_busy 0014  
              __pintcode 0008                 ?___awdiv 0016                 ?___ftadd 005D  
               ?___awmod 000F                 ?___ftdiv 0036                 ?___ftneg 005A  
               ?___lldiv 000F                 ?___ftmul 0025                 ?___llmod 000F  
               ?___ftsub 0080                __npowers_ 0628                 ?___fttol 0042  
               ?___lwmod 000F                 ?_delayms 000F                 ?_delayus 000F  
             send_data@c 0018               send_data@d 0019              __tdiv_to_l_ 2114  
           ??__div_to_l_ 0015              __smallconst 0600               ?___asftadd 0080  
             ?___asftdiv 0047                 ?_isdigit 000F               ?___asftmul 0080  
             ?___asftsub 0086                _init_ADCM 2F12                 ?_sprintf 008B  
         __size_of_scale 0450      __end_of_load_string 2C96           ___wmul@product 0023  
               _PIE1bits 000F9D                _send_data 28A4                 i2u169_40 2A9C  
               i2u169_41 2A9A                 _PIR1bits 000F9E       __end_of__div_to_l_ 2538  
             _ADCON0bits 000FC2              __stringdata 0676               _ADCON2bits 000FC0  
      ___wmul@multiplier 001F               ?_init_ADCM 0001         __size_of_RA0_isr 2AE0  
         load_string@ptr 001A               ?_send_data 0012                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0090         __size_of___ftadd 01CC  
       __size_of___awmod 007C         __size_of___ftdiv 00FE         __size_of___ftneg 0026  
       __size_of___lldiv 0086         __size_of___ftmul 0110         __size_of___llmod 006A  
       __size_of___ftsub 0042         __size_of___fttol 00E0         __size_of___lwmod 0046  
               ___ftpack 27EC              _fround$1135 0042              _fround$1136 003F  
               ___lltoft 2BCE              _isdigit$801 0011         __size_of_delayms 0024  
       __size_of_delayus 0016                 ___lwtoft 2E4E              ??___asftadd 006B  
            ??___asftdiv 004C               sprintf@exp 00B2              ??___asftmul 006B  
            ??___asftsub 006B              _load_string 2C32         __size_of_isdigit 0024  
               __ptext10 2CDC                 __ptext11 2D1E                 __ptext20 171A  
               __ptext12 1DEA                 __ptext21 1B6A                 __ptext13 2D60  
               __ptext30 2EEE                 __ptext22 2E14                 __ptext14 2D9C  
               __ptext31 2F12                 __ptext23 2AE8                 __ptext15 2346  
               __ptext32 2236                 __ptext24 294C                 __ptext16 2DD8  
               __ptext33 27EC                 __ptext25 2C32                 __ptext17 2444  
               __ptext26 2538                 __ptext18 2114                 __ptext27 28A4  
               __ptext19 2ECA                 __ptext28 2E7A                 __ptext29 2F30  
               __powers_ 064F         __size_of_sprintf 108C                 _init_LCD 2538  
          __size_of_main 015E                 delayms@i 006E                 delayms@j 0070  
               delayus@i 006F               _INTCONbits 000FF2              ??_init_ADCM 000F  
               isdigit@c 000F                 scale@scl 0036                 intlevel2 0000  
              sprintf@ap 009F         __tdiv_to_l_@exp1 001F                sprintf@vd 00A1  
       __tdiv_to_l_@cntr 001E                sprintf@sp 008B         __tdiv_to_l_@quot 001A  
       ___lwmod@dividend 000F         ___lldiv@dividend 000F              ??_send_data 0016  
           ?__tdiv_to_l_ 000F                 sprintf@c 00B9                 sprintf@f 008D  
         send_data@bflag 0017           send_data@cflag 0013           send_data@dflag 0015  
       ___lldiv@quotient 0018          ___lwmod@divisor 0011          ___lwmod@counter 0014  
